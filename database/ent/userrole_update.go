// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DemoonLXW/up_learning/database/ent/predicate"
	"github.com/DemoonLXW/up_learning/database/ent/role"
	"github.com/DemoonLXW/up_learning/database/ent/user"
	"github.com/DemoonLXW/up_learning/database/ent/userrole"
)

// UserRoleUpdate is the builder for updating UserRole entities.
type UserRoleUpdate struct {
	config
	hooks    []Hook
	mutation *UserRoleMutation
}

// Where appends a list predicates to the UserRoleUpdate builder.
func (uru *UserRoleUpdate) Where(ps ...predicate.UserRole) *UserRoleUpdate {
	uru.mutation.Where(ps...)
	return uru
}

// SetUID sets the "uid" field.
func (uru *UserRoleUpdate) SetUID(u uint32) *UserRoleUpdate {
	uru.mutation.SetUID(u)
	return uru
}

// SetRid sets the "rid" field.
func (uru *UserRoleUpdate) SetRid(u uint8) *UserRoleUpdate {
	uru.mutation.SetRid(u)
	return uru
}

// SetCreatedTime sets the "created_time" field.
func (uru *UserRoleUpdate) SetCreatedTime(t time.Time) *UserRoleUpdate {
	uru.mutation.SetCreatedTime(t)
	return uru
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (uru *UserRoleUpdate) SetNillableCreatedTime(t *time.Time) *UserRoleUpdate {
	if t != nil {
		uru.SetCreatedTime(*t)
	}
	return uru
}

// SetUserID sets the "user" edge to the User entity by ID.
func (uru *UserRoleUpdate) SetUserID(id uint32) *UserRoleUpdate {
	uru.mutation.SetUserID(id)
	return uru
}

// SetUser sets the "user" edge to the User entity.
func (uru *UserRoleUpdate) SetUser(u *User) *UserRoleUpdate {
	return uru.SetUserID(u.ID)
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (uru *UserRoleUpdate) SetRoleID(id uint8) *UserRoleUpdate {
	uru.mutation.SetRoleID(id)
	return uru
}

// SetRole sets the "role" edge to the Role entity.
func (uru *UserRoleUpdate) SetRole(r *Role) *UserRoleUpdate {
	return uru.SetRoleID(r.ID)
}

// Mutation returns the UserRoleMutation object of the builder.
func (uru *UserRoleUpdate) Mutation() *UserRoleMutation {
	return uru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uru *UserRoleUpdate) ClearUser() *UserRoleUpdate {
	uru.mutation.ClearUser()
	return uru
}

// ClearRole clears the "role" edge to the Role entity.
func (uru *UserRoleUpdate) ClearRole() *UserRoleUpdate {
	uru.mutation.ClearRole()
	return uru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uru *UserRoleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uru.sqlSave, uru.mutation, uru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uru *UserRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := uru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uru *UserRoleUpdate) Exec(ctx context.Context) error {
	_, err := uru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uru *UserRoleUpdate) ExecX(ctx context.Context) {
	if err := uru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uru *UserRoleUpdate) check() error {
	if _, ok := uru.mutation.UserID(); uru.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserRole.user"`)
	}
	if _, ok := uru.mutation.RoleID(); uru.mutation.RoleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserRole.role"`)
	}
	return nil
}

func (uru *UserRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userrole.Table, userrole.Columns, sqlgraph.NewFieldSpec(userrole.FieldUID, field.TypeUint32), sqlgraph.NewFieldSpec(userrole.FieldRid, field.TypeUint8))
	if ps := uru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uru.mutation.CreatedTime(); ok {
		_spec.SetField(userrole.FieldCreatedTime, field.TypeTime, value)
	}
	if uru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userrole.UserTable,
			Columns: []string{userrole.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userrole.UserTable,
			Columns: []string{userrole.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uru.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userrole.RoleTable,
			Columns: []string{userrole.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint8),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uru.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userrole.RoleTable,
			Columns: []string{userrole.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint8),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uru.mutation.done = true
	return n, nil
}

// UserRoleUpdateOne is the builder for updating a single UserRole entity.
type UserRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserRoleMutation
}

// SetUID sets the "uid" field.
func (uruo *UserRoleUpdateOne) SetUID(u uint32) *UserRoleUpdateOne {
	uruo.mutation.SetUID(u)
	return uruo
}

// SetRid sets the "rid" field.
func (uruo *UserRoleUpdateOne) SetRid(u uint8) *UserRoleUpdateOne {
	uruo.mutation.SetRid(u)
	return uruo
}

// SetCreatedTime sets the "created_time" field.
func (uruo *UserRoleUpdateOne) SetCreatedTime(t time.Time) *UserRoleUpdateOne {
	uruo.mutation.SetCreatedTime(t)
	return uruo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (uruo *UserRoleUpdateOne) SetNillableCreatedTime(t *time.Time) *UserRoleUpdateOne {
	if t != nil {
		uruo.SetCreatedTime(*t)
	}
	return uruo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (uruo *UserRoleUpdateOne) SetUserID(id uint32) *UserRoleUpdateOne {
	uruo.mutation.SetUserID(id)
	return uruo
}

// SetUser sets the "user" edge to the User entity.
func (uruo *UserRoleUpdateOne) SetUser(u *User) *UserRoleUpdateOne {
	return uruo.SetUserID(u.ID)
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (uruo *UserRoleUpdateOne) SetRoleID(id uint8) *UserRoleUpdateOne {
	uruo.mutation.SetRoleID(id)
	return uruo
}

// SetRole sets the "role" edge to the Role entity.
func (uruo *UserRoleUpdateOne) SetRole(r *Role) *UserRoleUpdateOne {
	return uruo.SetRoleID(r.ID)
}

// Mutation returns the UserRoleMutation object of the builder.
func (uruo *UserRoleUpdateOne) Mutation() *UserRoleMutation {
	return uruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uruo *UserRoleUpdateOne) ClearUser() *UserRoleUpdateOne {
	uruo.mutation.ClearUser()
	return uruo
}

// ClearRole clears the "role" edge to the Role entity.
func (uruo *UserRoleUpdateOne) ClearRole() *UserRoleUpdateOne {
	uruo.mutation.ClearRole()
	return uruo
}

// Where appends a list predicates to the UserRoleUpdate builder.
func (uruo *UserRoleUpdateOne) Where(ps ...predicate.UserRole) *UserRoleUpdateOne {
	uruo.mutation.Where(ps...)
	return uruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uruo *UserRoleUpdateOne) Select(field string, fields ...string) *UserRoleUpdateOne {
	uruo.fields = append([]string{field}, fields...)
	return uruo
}

// Save executes the query and returns the updated UserRole entity.
func (uruo *UserRoleUpdateOne) Save(ctx context.Context) (*UserRole, error) {
	return withHooks(ctx, uruo.sqlSave, uruo.mutation, uruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uruo *UserRoleUpdateOne) SaveX(ctx context.Context) *UserRole {
	node, err := uruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uruo *UserRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := uruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uruo *UserRoleUpdateOne) ExecX(ctx context.Context) {
	if err := uruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uruo *UserRoleUpdateOne) check() error {
	if _, ok := uruo.mutation.UserID(); uruo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserRole.user"`)
	}
	if _, ok := uruo.mutation.RoleID(); uruo.mutation.RoleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserRole.role"`)
	}
	return nil
}

func (uruo *UserRoleUpdateOne) sqlSave(ctx context.Context) (_node *UserRole, err error) {
	if err := uruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userrole.Table, userrole.Columns, sqlgraph.NewFieldSpec(userrole.FieldUID, field.TypeUint32), sqlgraph.NewFieldSpec(userrole.FieldRid, field.TypeUint8))
	if id, ok := uruo.mutation.UID(); !ok {
		return nil, &ValidationError{Name: "uid", err: errors.New(`ent: missing "UserRole.uid" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := uruo.mutation.Rid(); !ok {
		return nil, &ValidationError{Name: "rid", err: errors.New(`ent: missing "UserRole.rid" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := uruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !userrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := uruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uruo.mutation.CreatedTime(); ok {
		_spec.SetField(userrole.FieldCreatedTime, field.TypeTime, value)
	}
	if uruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userrole.UserTable,
			Columns: []string{userrole.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userrole.UserTable,
			Columns: []string{userrole.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uruo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userrole.RoleTable,
			Columns: []string{userrole.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint8),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uruo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userrole.RoleTable,
			Columns: []string{userrole.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint8),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserRole{config: uruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uruo.mutation.done = true
	return _node, nil
}
