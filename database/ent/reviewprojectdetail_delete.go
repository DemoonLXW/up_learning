// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DemoonLXW/up_learning/database/ent/predicate"
	"github.com/DemoonLXW/up_learning/database/ent/reviewprojectdetail"
)

// ReviewProjectDetailDelete is the builder for deleting a ReviewProjectDetail entity.
type ReviewProjectDetailDelete struct {
	config
	hooks    []Hook
	mutation *ReviewProjectDetailMutation
}

// Where appends a list predicates to the ReviewProjectDetailDelete builder.
func (rpdd *ReviewProjectDetailDelete) Where(ps ...predicate.ReviewProjectDetail) *ReviewProjectDetailDelete {
	rpdd.mutation.Where(ps...)
	return rpdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rpdd *ReviewProjectDetailDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rpdd.sqlExec, rpdd.mutation, rpdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rpdd *ReviewProjectDetailDelete) ExecX(ctx context.Context) int {
	n, err := rpdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rpdd *ReviewProjectDetailDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(reviewprojectdetail.Table, sqlgraph.NewFieldSpec(reviewprojectdetail.FieldID, field.TypeInt))
	if ps := rpdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rpdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rpdd.mutation.done = true
	return affected, err
}

// ReviewProjectDetailDeleteOne is the builder for deleting a single ReviewProjectDetail entity.
type ReviewProjectDetailDeleteOne struct {
	rpdd *ReviewProjectDetailDelete
}

// Where appends a list predicates to the ReviewProjectDetailDelete builder.
func (rpddo *ReviewProjectDetailDeleteOne) Where(ps ...predicate.ReviewProjectDetail) *ReviewProjectDetailDeleteOne {
	rpddo.rpdd.mutation.Where(ps...)
	return rpddo
}

// Exec executes the deletion query.
func (rpddo *ReviewProjectDetailDeleteOne) Exec(ctx context.Context) error {
	n, err := rpddo.rpdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{reviewprojectdetail.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rpddo *ReviewProjectDetailDeleteOne) ExecX(ctx context.Context) {
	if err := rpddo.Exec(ctx); err != nil {
		panic(err)
	}
}
