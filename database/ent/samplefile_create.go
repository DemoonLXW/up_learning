// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DemoonLXW/up_learning/database/ent/file"
	"github.com/DemoonLXW/up_learning/database/ent/samplefile"
)

// SampleFileCreate is the builder for creating a SampleFile entity.
type SampleFileCreate struct {
	config
	mutation *SampleFileMutation
	hooks    []Hook
}

// SetFid sets the "fid" field.
func (sfc *SampleFileCreate) SetFid(u uint32) *SampleFileCreate {
	sfc.mutation.SetFid(u)
	return sfc
}

// SetType sets the "type" field.
func (sfc *SampleFileCreate) SetType(s string) *SampleFileCreate {
	sfc.mutation.SetType(s)
	return sfc
}

// SetIsDisabled sets the "is_disabled" field.
func (sfc *SampleFileCreate) SetIsDisabled(b bool) *SampleFileCreate {
	sfc.mutation.SetIsDisabled(b)
	return sfc
}

// SetNillableIsDisabled sets the "is_disabled" field if the given value is not nil.
func (sfc *SampleFileCreate) SetNillableIsDisabled(b *bool) *SampleFileCreate {
	if b != nil {
		sfc.SetIsDisabled(*b)
	}
	return sfc
}

// SetCreatedTime sets the "created_time" field.
func (sfc *SampleFileCreate) SetCreatedTime(t time.Time) *SampleFileCreate {
	sfc.mutation.SetCreatedTime(t)
	return sfc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (sfc *SampleFileCreate) SetNillableCreatedTime(t *time.Time) *SampleFileCreate {
	if t != nil {
		sfc.SetCreatedTime(*t)
	}
	return sfc
}

// SetDeletedTime sets the "deleted_time" field.
func (sfc *SampleFileCreate) SetDeletedTime(t time.Time) *SampleFileCreate {
	sfc.mutation.SetDeletedTime(t)
	return sfc
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (sfc *SampleFileCreate) SetNillableDeletedTime(t *time.Time) *SampleFileCreate {
	if t != nil {
		sfc.SetDeletedTime(*t)
	}
	return sfc
}

// SetModifiedTime sets the "modified_time" field.
func (sfc *SampleFileCreate) SetModifiedTime(t time.Time) *SampleFileCreate {
	sfc.mutation.SetModifiedTime(t)
	return sfc
}

// SetNillableModifiedTime sets the "modified_time" field if the given value is not nil.
func (sfc *SampleFileCreate) SetNillableModifiedTime(t *time.Time) *SampleFileCreate {
	if t != nil {
		sfc.SetModifiedTime(*t)
	}
	return sfc
}

// SetID sets the "id" field.
func (sfc *SampleFileCreate) SetID(u uint8) *SampleFileCreate {
	sfc.mutation.SetID(u)
	return sfc
}

// SetFileID sets the "file" edge to the File entity by ID.
func (sfc *SampleFileCreate) SetFileID(id uint32) *SampleFileCreate {
	sfc.mutation.SetFileID(id)
	return sfc
}

// SetFile sets the "file" edge to the File entity.
func (sfc *SampleFileCreate) SetFile(f *File) *SampleFileCreate {
	return sfc.SetFileID(f.ID)
}

// Mutation returns the SampleFileMutation object of the builder.
func (sfc *SampleFileCreate) Mutation() *SampleFileMutation {
	return sfc.mutation
}

// Save creates the SampleFile in the database.
func (sfc *SampleFileCreate) Save(ctx context.Context) (*SampleFile, error) {
	sfc.defaults()
	return withHooks[*SampleFile, SampleFileMutation](ctx, sfc.sqlSave, sfc.mutation, sfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sfc *SampleFileCreate) SaveX(ctx context.Context) *SampleFile {
	v, err := sfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sfc *SampleFileCreate) Exec(ctx context.Context) error {
	_, err := sfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfc *SampleFileCreate) ExecX(ctx context.Context) {
	if err := sfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sfc *SampleFileCreate) defaults() {
	if _, ok := sfc.mutation.IsDisabled(); !ok {
		v := samplefile.DefaultIsDisabled
		sfc.mutation.SetIsDisabled(v)
	}
	if _, ok := sfc.mutation.CreatedTime(); !ok {
		v := samplefile.DefaultCreatedTime()
		sfc.mutation.SetCreatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sfc *SampleFileCreate) check() error {
	if _, ok := sfc.mutation.Fid(); !ok {
		return &ValidationError{Name: "fid", err: errors.New(`ent: missing required field "SampleFile.fid"`)}
	}
	if _, ok := sfc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "SampleFile.type"`)}
	}
	if _, ok := sfc.mutation.IsDisabled(); !ok {
		return &ValidationError{Name: "is_disabled", err: errors.New(`ent: missing required field "SampleFile.is_disabled"`)}
	}
	if _, ok := sfc.mutation.CreatedTime(); !ok {
		return &ValidationError{Name: "created_time", err: errors.New(`ent: missing required field "SampleFile.created_time"`)}
	}
	if _, ok := sfc.mutation.FileID(); !ok {
		return &ValidationError{Name: "file", err: errors.New(`ent: missing required edge "SampleFile.file"`)}
	}
	return nil
}

func (sfc *SampleFileCreate) sqlSave(ctx context.Context) (*SampleFile, error) {
	if err := sfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint8(id)
	}
	sfc.mutation.id = &_node.ID
	sfc.mutation.done = true
	return _node, nil
}

func (sfc *SampleFileCreate) createSpec() (*SampleFile, *sqlgraph.CreateSpec) {
	var (
		_node = &SampleFile{config: sfc.config}
		_spec = sqlgraph.NewCreateSpec(samplefile.Table, sqlgraph.NewFieldSpec(samplefile.FieldID, field.TypeUint8))
	)
	if id, ok := sfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sfc.mutation.GetType(); ok {
		_spec.SetField(samplefile.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := sfc.mutation.IsDisabled(); ok {
		_spec.SetField(samplefile.FieldIsDisabled, field.TypeBool, value)
		_node.IsDisabled = value
	}
	if value, ok := sfc.mutation.CreatedTime(); ok {
		_spec.SetField(samplefile.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = &value
	}
	if value, ok := sfc.mutation.DeletedTime(); ok {
		_spec.SetField(samplefile.FieldDeletedTime, field.TypeTime, value)
		_node.DeletedTime = &value
	}
	if value, ok := sfc.mutation.ModifiedTime(); ok {
		_spec.SetField(samplefile.FieldModifiedTime, field.TypeTime, value)
		_node.ModifiedTime = &value
	}
	if nodes := sfc.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   samplefile.FileTable,
			Columns: []string{samplefile.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Fid = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SampleFileCreateBulk is the builder for creating many SampleFile entities in bulk.
type SampleFileCreateBulk struct {
	config
	builders []*SampleFileCreate
}

// Save creates the SampleFile entities in the database.
func (sfcb *SampleFileCreateBulk) Save(ctx context.Context) ([]*SampleFile, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sfcb.builders))
	nodes := make([]*SampleFile, len(sfcb.builders))
	mutators := make([]Mutator, len(sfcb.builders))
	for i := range sfcb.builders {
		func(i int, root context.Context) {
			builder := sfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SampleFileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint8(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sfcb *SampleFileCreateBulk) SaveX(ctx context.Context) []*SampleFile {
	v, err := sfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sfcb *SampleFileCreateBulk) Exec(ctx context.Context) error {
	_, err := sfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfcb *SampleFileCreateBulk) ExecX(ctx context.Context) {
	if err := sfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
