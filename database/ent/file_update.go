// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DemoonLXW/up_learning/database/ent/file"
	"github.com/DemoonLXW/up_learning/database/ent/predicate"
	"github.com/DemoonLXW/up_learning/database/ent/project"
	"github.com/DemoonLXW/up_learning/database/ent/projectfile"
	"github.com/DemoonLXW/up_learning/database/ent/samplefile"
	"github.com/DemoonLXW/up_learning/database/ent/user"
)

// FileUpdate is the builder for updating File entities.
type FileUpdate struct {
	config
	hooks    []Hook
	mutation *FileMutation
}

// Where appends a list predicates to the FileUpdate builder.
func (fu *FileUpdate) Where(ps ...predicate.File) *FileUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUID sets the "uid" field.
func (fu *FileUpdate) SetUID(u uint32) *FileUpdate {
	fu.mutation.SetUID(u)
	return fu
}

// SetName sets the "name" field.
func (fu *FileUpdate) SetName(s string) *FileUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetPath sets the "path" field.
func (fu *FileUpdate) SetPath(s string) *FileUpdate {
	fu.mutation.SetPath(s)
	return fu
}

// SetSize sets the "size" field.
func (fu *FileUpdate) SetSize(i int64) *FileUpdate {
	fu.mutation.ResetSize()
	fu.mutation.SetSize(i)
	return fu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (fu *FileUpdate) SetNillableSize(i *int64) *FileUpdate {
	if i != nil {
		fu.SetSize(*i)
	}
	return fu
}

// AddSize adds i to the "size" field.
func (fu *FileUpdate) AddSize(i int64) *FileUpdate {
	fu.mutation.AddSize(i)
	return fu
}

// ClearSize clears the value of the "size" field.
func (fu *FileUpdate) ClearSize() *FileUpdate {
	fu.mutation.ClearSize()
	return fu
}

// SetIsDisabled sets the "is_disabled" field.
func (fu *FileUpdate) SetIsDisabled(b bool) *FileUpdate {
	fu.mutation.SetIsDisabled(b)
	return fu
}

// SetNillableIsDisabled sets the "is_disabled" field if the given value is not nil.
func (fu *FileUpdate) SetNillableIsDisabled(b *bool) *FileUpdate {
	if b != nil {
		fu.SetIsDisabled(*b)
	}
	return fu
}

// SetCreatedTime sets the "created_time" field.
func (fu *FileUpdate) SetCreatedTime(t time.Time) *FileUpdate {
	fu.mutation.SetCreatedTime(t)
	return fu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fu *FileUpdate) SetNillableCreatedTime(t *time.Time) *FileUpdate {
	if t != nil {
		fu.SetCreatedTime(*t)
	}
	return fu
}

// SetDeletedTime sets the "deleted_time" field.
func (fu *FileUpdate) SetDeletedTime(t time.Time) *FileUpdate {
	fu.mutation.SetDeletedTime(t)
	return fu
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (fu *FileUpdate) SetNillableDeletedTime(t *time.Time) *FileUpdate {
	if t != nil {
		fu.SetDeletedTime(*t)
	}
	return fu
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (fu *FileUpdate) ClearDeletedTime() *FileUpdate {
	fu.mutation.ClearDeletedTime()
	return fu
}

// SetModifiedTime sets the "modified_time" field.
func (fu *FileUpdate) SetModifiedTime(t time.Time) *FileUpdate {
	fu.mutation.SetModifiedTime(t)
	return fu
}

// SetNillableModifiedTime sets the "modified_time" field if the given value is not nil.
func (fu *FileUpdate) SetNillableModifiedTime(t *time.Time) *FileUpdate {
	if t != nil {
		fu.SetModifiedTime(*t)
	}
	return fu
}

// ClearModifiedTime clears the value of the "modified_time" field.
func (fu *FileUpdate) ClearModifiedTime() *FileUpdate {
	fu.mutation.ClearModifiedTime()
	return fu
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (fu *FileUpdate) SetCreatorID(id uint32) *FileUpdate {
	fu.mutation.SetCreatorID(id)
	return fu
}

// SetCreator sets the "creator" edge to the User entity.
func (fu *FileUpdate) SetCreator(u *User) *FileUpdate {
	return fu.SetCreatorID(u.ID)
}

// AddProjectIDs adds the "project" edge to the Project entity by IDs.
func (fu *FileUpdate) AddProjectIDs(ids ...uint32) *FileUpdate {
	fu.mutation.AddProjectIDs(ids...)
	return fu
}

// AddProject adds the "project" edges to the Project entity.
func (fu *FileUpdate) AddProject(p ...*Project) *FileUpdate {
	ids := make([]uint32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fu.AddProjectIDs(ids...)
}

// SetSampleID sets the "sample" edge to the SampleFile entity by ID.
func (fu *FileUpdate) SetSampleID(id uint8) *FileUpdate {
	fu.mutation.SetSampleID(id)
	return fu
}

// SetNillableSampleID sets the "sample" edge to the SampleFile entity by ID if the given value is not nil.
func (fu *FileUpdate) SetNillableSampleID(id *uint8) *FileUpdate {
	if id != nil {
		fu = fu.SetSampleID(*id)
	}
	return fu
}

// SetSample sets the "sample" edge to the SampleFile entity.
func (fu *FileUpdate) SetSample(s *SampleFile) *FileUpdate {
	return fu.SetSampleID(s.ID)
}

// AddProjectFileIDs adds the "project_file" edge to the ProjectFile entity by IDs.
func (fu *FileUpdate) AddProjectFileIDs(ids ...int) *FileUpdate {
	fu.mutation.AddProjectFileIDs(ids...)
	return fu
}

// AddProjectFile adds the "project_file" edges to the ProjectFile entity.
func (fu *FileUpdate) AddProjectFile(p ...*ProjectFile) *FileUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fu.AddProjectFileIDs(ids...)
}

// Mutation returns the FileMutation object of the builder.
func (fu *FileUpdate) Mutation() *FileMutation {
	return fu.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (fu *FileUpdate) ClearCreator() *FileUpdate {
	fu.mutation.ClearCreator()
	return fu
}

// ClearProject clears all "project" edges to the Project entity.
func (fu *FileUpdate) ClearProject() *FileUpdate {
	fu.mutation.ClearProject()
	return fu
}

// RemoveProjectIDs removes the "project" edge to Project entities by IDs.
func (fu *FileUpdate) RemoveProjectIDs(ids ...uint32) *FileUpdate {
	fu.mutation.RemoveProjectIDs(ids...)
	return fu
}

// RemoveProject removes "project" edges to Project entities.
func (fu *FileUpdate) RemoveProject(p ...*Project) *FileUpdate {
	ids := make([]uint32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fu.RemoveProjectIDs(ids...)
}

// ClearSample clears the "sample" edge to the SampleFile entity.
func (fu *FileUpdate) ClearSample() *FileUpdate {
	fu.mutation.ClearSample()
	return fu
}

// ClearProjectFile clears all "project_file" edges to the ProjectFile entity.
func (fu *FileUpdate) ClearProjectFile() *FileUpdate {
	fu.mutation.ClearProjectFile()
	return fu
}

// RemoveProjectFileIDs removes the "project_file" edge to ProjectFile entities by IDs.
func (fu *FileUpdate) RemoveProjectFileIDs(ids ...int) *FileUpdate {
	fu.mutation.RemoveProjectFileIDs(ids...)
	return fu
}

// RemoveProjectFile removes "project_file" edges to ProjectFile entities.
func (fu *FileUpdate) RemoveProjectFile(p ...*ProjectFile) *FileUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fu.RemoveProjectFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FileUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FileUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FileUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FileUpdate) check() error {
	if v, ok := fu.mutation.Name(); ok {
		if err := file.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "File.name": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Path(); ok {
		if err := file.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "File.path": %w`, err)}
		}
	}
	if _, ok := fu.mutation.CreatorID(); fu.mutation.CreatorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "File.creator"`)
	}
	return nil
}

func (fu *FileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint32))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.SetField(file.FieldName, field.TypeString, value)
	}
	if value, ok := fu.mutation.Path(); ok {
		_spec.SetField(file.FieldPath, field.TypeString, value)
	}
	if value, ok := fu.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.AddedSize(); ok {
		_spec.AddField(file.FieldSize, field.TypeInt64, value)
	}
	if fu.mutation.SizeCleared() {
		_spec.ClearField(file.FieldSize, field.TypeInt64)
	}
	if value, ok := fu.mutation.IsDisabled(); ok {
		_spec.SetField(file.FieldIsDisabled, field.TypeBool, value)
	}
	if value, ok := fu.mutation.CreatedTime(); ok {
		_spec.SetField(file.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := fu.mutation.DeletedTime(); ok {
		_spec.SetField(file.FieldDeletedTime, field.TypeTime, value)
	}
	if fu.mutation.DeletedTimeCleared() {
		_spec.ClearField(file.FieldDeletedTime, field.TypeTime)
	}
	if value, ok := fu.mutation.ModifiedTime(); ok {
		_spec.SetField(file.FieldModifiedTime, field.TypeTime, value)
	}
	if fu.mutation.ModifiedTimeCleared() {
		_spec.ClearField(file.FieldModifiedTime, field.TypeTime)
	}
	if fu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.CreatorTable,
			Columns: []string{file.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.CreatorTable,
			Columns: []string{file.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ProjectTable,
			Columns: file.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUint32),
			},
		}
		createE := &ProjectFileCreate{config: fu.config, mutation: newProjectFileMutation(fu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedProjectIDs(); len(nodes) > 0 && !fu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ProjectTable,
			Columns: file.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ProjectFileCreate{config: fu.config, mutation: newProjectFileMutation(fu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ProjectTable,
			Columns: file.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ProjectFileCreate{config: fu.config, mutation: newProjectFileMutation(fu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.SampleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   file.SampleTable,
			Columns: []string{file.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(samplefile.FieldID, field.TypeUint8),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.SampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   file.SampleTable,
			Columns: []string{file.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(samplefile.FieldID, field.TypeUint8),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.ProjectFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   file.ProjectFileTable,
			Columns: []string{file.ProjectFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectfile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedProjectFileIDs(); len(nodes) > 0 && !fu.mutation.ProjectFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   file.ProjectFileTable,
			Columns: []string{file.ProjectFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ProjectFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   file.ProjectFileTable,
			Columns: []string{file.ProjectFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FileUpdateOne is the builder for updating a single File entity.
type FileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileMutation
}

// SetUID sets the "uid" field.
func (fuo *FileUpdateOne) SetUID(u uint32) *FileUpdateOne {
	fuo.mutation.SetUID(u)
	return fuo
}

// SetName sets the "name" field.
func (fuo *FileUpdateOne) SetName(s string) *FileUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetPath sets the "path" field.
func (fuo *FileUpdateOne) SetPath(s string) *FileUpdateOne {
	fuo.mutation.SetPath(s)
	return fuo
}

// SetSize sets the "size" field.
func (fuo *FileUpdateOne) SetSize(i int64) *FileUpdateOne {
	fuo.mutation.ResetSize()
	fuo.mutation.SetSize(i)
	return fuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableSize(i *int64) *FileUpdateOne {
	if i != nil {
		fuo.SetSize(*i)
	}
	return fuo
}

// AddSize adds i to the "size" field.
func (fuo *FileUpdateOne) AddSize(i int64) *FileUpdateOne {
	fuo.mutation.AddSize(i)
	return fuo
}

// ClearSize clears the value of the "size" field.
func (fuo *FileUpdateOne) ClearSize() *FileUpdateOne {
	fuo.mutation.ClearSize()
	return fuo
}

// SetIsDisabled sets the "is_disabled" field.
func (fuo *FileUpdateOne) SetIsDisabled(b bool) *FileUpdateOne {
	fuo.mutation.SetIsDisabled(b)
	return fuo
}

// SetNillableIsDisabled sets the "is_disabled" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableIsDisabled(b *bool) *FileUpdateOne {
	if b != nil {
		fuo.SetIsDisabled(*b)
	}
	return fuo
}

// SetCreatedTime sets the "created_time" field.
func (fuo *FileUpdateOne) SetCreatedTime(t time.Time) *FileUpdateOne {
	fuo.mutation.SetCreatedTime(t)
	return fuo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableCreatedTime(t *time.Time) *FileUpdateOne {
	if t != nil {
		fuo.SetCreatedTime(*t)
	}
	return fuo
}

// SetDeletedTime sets the "deleted_time" field.
func (fuo *FileUpdateOne) SetDeletedTime(t time.Time) *FileUpdateOne {
	fuo.mutation.SetDeletedTime(t)
	return fuo
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableDeletedTime(t *time.Time) *FileUpdateOne {
	if t != nil {
		fuo.SetDeletedTime(*t)
	}
	return fuo
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (fuo *FileUpdateOne) ClearDeletedTime() *FileUpdateOne {
	fuo.mutation.ClearDeletedTime()
	return fuo
}

// SetModifiedTime sets the "modified_time" field.
func (fuo *FileUpdateOne) SetModifiedTime(t time.Time) *FileUpdateOne {
	fuo.mutation.SetModifiedTime(t)
	return fuo
}

// SetNillableModifiedTime sets the "modified_time" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableModifiedTime(t *time.Time) *FileUpdateOne {
	if t != nil {
		fuo.SetModifiedTime(*t)
	}
	return fuo
}

// ClearModifiedTime clears the value of the "modified_time" field.
func (fuo *FileUpdateOne) ClearModifiedTime() *FileUpdateOne {
	fuo.mutation.ClearModifiedTime()
	return fuo
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (fuo *FileUpdateOne) SetCreatorID(id uint32) *FileUpdateOne {
	fuo.mutation.SetCreatorID(id)
	return fuo
}

// SetCreator sets the "creator" edge to the User entity.
func (fuo *FileUpdateOne) SetCreator(u *User) *FileUpdateOne {
	return fuo.SetCreatorID(u.ID)
}

// AddProjectIDs adds the "project" edge to the Project entity by IDs.
func (fuo *FileUpdateOne) AddProjectIDs(ids ...uint32) *FileUpdateOne {
	fuo.mutation.AddProjectIDs(ids...)
	return fuo
}

// AddProject adds the "project" edges to the Project entity.
func (fuo *FileUpdateOne) AddProject(p ...*Project) *FileUpdateOne {
	ids := make([]uint32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fuo.AddProjectIDs(ids...)
}

// SetSampleID sets the "sample" edge to the SampleFile entity by ID.
func (fuo *FileUpdateOne) SetSampleID(id uint8) *FileUpdateOne {
	fuo.mutation.SetSampleID(id)
	return fuo
}

// SetNillableSampleID sets the "sample" edge to the SampleFile entity by ID if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableSampleID(id *uint8) *FileUpdateOne {
	if id != nil {
		fuo = fuo.SetSampleID(*id)
	}
	return fuo
}

// SetSample sets the "sample" edge to the SampleFile entity.
func (fuo *FileUpdateOne) SetSample(s *SampleFile) *FileUpdateOne {
	return fuo.SetSampleID(s.ID)
}

// AddProjectFileIDs adds the "project_file" edge to the ProjectFile entity by IDs.
func (fuo *FileUpdateOne) AddProjectFileIDs(ids ...int) *FileUpdateOne {
	fuo.mutation.AddProjectFileIDs(ids...)
	return fuo
}

// AddProjectFile adds the "project_file" edges to the ProjectFile entity.
func (fuo *FileUpdateOne) AddProjectFile(p ...*ProjectFile) *FileUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fuo.AddProjectFileIDs(ids...)
}

// Mutation returns the FileMutation object of the builder.
func (fuo *FileUpdateOne) Mutation() *FileMutation {
	return fuo.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (fuo *FileUpdateOne) ClearCreator() *FileUpdateOne {
	fuo.mutation.ClearCreator()
	return fuo
}

// ClearProject clears all "project" edges to the Project entity.
func (fuo *FileUpdateOne) ClearProject() *FileUpdateOne {
	fuo.mutation.ClearProject()
	return fuo
}

// RemoveProjectIDs removes the "project" edge to Project entities by IDs.
func (fuo *FileUpdateOne) RemoveProjectIDs(ids ...uint32) *FileUpdateOne {
	fuo.mutation.RemoveProjectIDs(ids...)
	return fuo
}

// RemoveProject removes "project" edges to Project entities.
func (fuo *FileUpdateOne) RemoveProject(p ...*Project) *FileUpdateOne {
	ids := make([]uint32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fuo.RemoveProjectIDs(ids...)
}

// ClearSample clears the "sample" edge to the SampleFile entity.
func (fuo *FileUpdateOne) ClearSample() *FileUpdateOne {
	fuo.mutation.ClearSample()
	return fuo
}

// ClearProjectFile clears all "project_file" edges to the ProjectFile entity.
func (fuo *FileUpdateOne) ClearProjectFile() *FileUpdateOne {
	fuo.mutation.ClearProjectFile()
	return fuo
}

// RemoveProjectFileIDs removes the "project_file" edge to ProjectFile entities by IDs.
func (fuo *FileUpdateOne) RemoveProjectFileIDs(ids ...int) *FileUpdateOne {
	fuo.mutation.RemoveProjectFileIDs(ids...)
	return fuo
}

// RemoveProjectFile removes "project_file" edges to ProjectFile entities.
func (fuo *FileUpdateOne) RemoveProjectFile(p ...*ProjectFile) *FileUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fuo.RemoveProjectFileIDs(ids...)
}

// Where appends a list predicates to the FileUpdate builder.
func (fuo *FileUpdateOne) Where(ps ...predicate.File) *FileUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FileUpdateOne) Select(field string, fields ...string) *FileUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated File entity.
func (fuo *FileUpdateOne) Save(ctx context.Context) (*File, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FileUpdateOne) SaveX(ctx context.Context) *File {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FileUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FileUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FileUpdateOne) check() error {
	if v, ok := fuo.mutation.Name(); ok {
		if err := file.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "File.name": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Path(); ok {
		if err := file.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "File.path": %w`, err)}
		}
	}
	if _, ok := fuo.mutation.CreatorID(); fuo.mutation.CreatorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "File.creator"`)
	}
	return nil
}

func (fuo *FileUpdateOne) sqlSave(ctx context.Context) (_node *File, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint32))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "File.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, file.FieldID)
		for _, f := range fields {
			if !file.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != file.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.SetField(file.FieldName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Path(); ok {
		_spec.SetField(file.FieldPath, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.AddedSize(); ok {
		_spec.AddField(file.FieldSize, field.TypeInt64, value)
	}
	if fuo.mutation.SizeCleared() {
		_spec.ClearField(file.FieldSize, field.TypeInt64)
	}
	if value, ok := fuo.mutation.IsDisabled(); ok {
		_spec.SetField(file.FieldIsDisabled, field.TypeBool, value)
	}
	if value, ok := fuo.mutation.CreatedTime(); ok {
		_spec.SetField(file.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.DeletedTime(); ok {
		_spec.SetField(file.FieldDeletedTime, field.TypeTime, value)
	}
	if fuo.mutation.DeletedTimeCleared() {
		_spec.ClearField(file.FieldDeletedTime, field.TypeTime)
	}
	if value, ok := fuo.mutation.ModifiedTime(); ok {
		_spec.SetField(file.FieldModifiedTime, field.TypeTime, value)
	}
	if fuo.mutation.ModifiedTimeCleared() {
		_spec.ClearField(file.FieldModifiedTime, field.TypeTime)
	}
	if fuo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.CreatorTable,
			Columns: []string{file.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.CreatorTable,
			Columns: []string{file.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ProjectTable,
			Columns: file.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUint32),
			},
		}
		createE := &ProjectFileCreate{config: fuo.config, mutation: newProjectFileMutation(fuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedProjectIDs(); len(nodes) > 0 && !fuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ProjectTable,
			Columns: file.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ProjectFileCreate{config: fuo.config, mutation: newProjectFileMutation(fuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ProjectTable,
			Columns: file.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ProjectFileCreate{config: fuo.config, mutation: newProjectFileMutation(fuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.SampleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   file.SampleTable,
			Columns: []string{file.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(samplefile.FieldID, field.TypeUint8),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.SampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   file.SampleTable,
			Columns: []string{file.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(samplefile.FieldID, field.TypeUint8),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.ProjectFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   file.ProjectFileTable,
			Columns: []string{file.ProjectFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectfile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedProjectFileIDs(); len(nodes) > 0 && !fuo.mutation.ProjectFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   file.ProjectFileTable,
			Columns: []string{file.ProjectFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ProjectFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   file.ProjectFileTable,
			Columns: []string{file.ProjectFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &File{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
