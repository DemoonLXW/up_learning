// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/DemoonLXW/up_learning/database/ent/file"
	"github.com/DemoonLXW/up_learning/database/ent/samplefile"
)

// SampleFile is the model entity for the SampleFile schema.
type SampleFile struct {
	config `json:"-"`
	// ID of the ent.
	ID uint8 `json:"id,omitempty"`
	// Fid holds the value of the "fid" field.
	Fid uint32 `json:"fid,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// IsDisabled holds the value of the "is_disabled" field.
	IsDisabled bool `json:"is_disabled,omitempty"`
	// CreatedTime holds the value of the "created_time" field.
	CreatedTime time.Time `json:"created_time,omitempty"`
	// DeletedTime holds the value of the "deleted_time" field.
	DeletedTime time.Time `json:"deleted_time,omitempty"`
	// ModifiedTime holds the value of the "modified_time" field.
	ModifiedTime time.Time `json:"modified_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SampleFileQuery when eager-loading is set.
	Edges        SampleFileEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SampleFileEdges holds the relations/edges for other nodes in the graph.
type SampleFileEdges struct {
	// File holds the value of the file edge.
	File *File `json:"file,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FileOrErr returns the File value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SampleFileEdges) FileOrErr() (*File, error) {
	if e.loadedTypes[0] {
		if e.File == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: file.Label}
		}
		return e.File, nil
	}
	return nil, &NotLoadedError{edge: "file"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SampleFile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case samplefile.FieldIsDisabled:
			values[i] = new(sql.NullBool)
		case samplefile.FieldID, samplefile.FieldFid:
			values[i] = new(sql.NullInt64)
		case samplefile.FieldType:
			values[i] = new(sql.NullString)
		case samplefile.FieldCreatedTime, samplefile.FieldDeletedTime, samplefile.FieldModifiedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SampleFile fields.
func (sf *SampleFile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case samplefile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sf.ID = uint8(value.Int64)
		case samplefile.FieldFid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fid", values[i])
			} else if value.Valid {
				sf.Fid = uint32(value.Int64)
			}
		case samplefile.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				sf.Type = value.String
			}
		case samplefile.FieldIsDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_disabled", values[i])
			} else if value.Valid {
				sf.IsDisabled = value.Bool
			}
		case samplefile.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				sf.CreatedTime = value.Time
			}
		case samplefile.FieldDeletedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_time", values[i])
			} else if value.Valid {
				sf.DeletedTime = value.Time
			}
		case samplefile.FieldModifiedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modified_time", values[i])
			} else if value.Valid {
				sf.ModifiedTime = value.Time
			}
		default:
			sf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SampleFile.
// This includes values selected through modifiers, order, etc.
func (sf *SampleFile) Value(name string) (ent.Value, error) {
	return sf.selectValues.Get(name)
}

// QueryFile queries the "file" edge of the SampleFile entity.
func (sf *SampleFile) QueryFile() *FileQuery {
	return NewSampleFileClient(sf.config).QueryFile(sf)
}

// Update returns a builder for updating this SampleFile.
// Note that you need to call SampleFile.Unwrap() before calling this method if this SampleFile
// was returned from a transaction, and the transaction was committed or rolled back.
func (sf *SampleFile) Update() *SampleFileUpdateOne {
	return NewSampleFileClient(sf.config).UpdateOne(sf)
}

// Unwrap unwraps the SampleFile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sf *SampleFile) Unwrap() *SampleFile {
	_tx, ok := sf.config.driver.(*txDriver)
	if !ok {
		panic("ent: SampleFile is not a transactional entity")
	}
	sf.config.driver = _tx.drv
	return sf
}

// String implements the fmt.Stringer.
func (sf *SampleFile) String() string {
	var builder strings.Builder
	builder.WriteString("SampleFile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sf.ID))
	builder.WriteString("fid=")
	builder.WriteString(fmt.Sprintf("%v", sf.Fid))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(sf.Type)
	builder.WriteString(", ")
	builder.WriteString("is_disabled=")
	builder.WriteString(fmt.Sprintf("%v", sf.IsDisabled))
	builder.WriteString(", ")
	builder.WriteString("created_time=")
	builder.WriteString(sf.CreatedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_time=")
	builder.WriteString(sf.DeletedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("modified_time=")
	builder.WriteString(sf.ModifiedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SampleFiles is a parsable slice of SampleFile.
type SampleFiles []*SampleFile
