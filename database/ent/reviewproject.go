// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/DemoonLXW/up_learning/database/ent/project"
	"github.com/DemoonLXW/up_learning/database/ent/reviewproject"
	"github.com/DemoonLXW/up_learning/database/ent/user"
)

// ReviewProject is the model entity for the ReviewProject schema.
type ReviewProject struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID uint32 `json:"project_id,omitempty"`
	// WorkflowID holds the value of the "workflow_id" field.
	WorkflowID string `json:"workflow_id,omitempty"`
	// RunID holds the value of the "run_id" field.
	RunID string `json:"run_id,omitempty"`
	// ApplicantID holds the value of the "applicant_id" field.
	ApplicantID uint32 `json:"applicant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status uint8 `json:"status,omitempty"`
	// CreatedTime holds the value of the "created_time" field.
	CreatedTime *time.Time `json:"created_time,omitempty"`
	// DeletedTime holds the value of the "deleted_time" field.
	DeletedTime *time.Time `json:"deleted_time,omitempty"`
	// ModifiedTime holds the value of the "modified_time" field.
	ModifiedTime *time.Time `json:"modified_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReviewProjectQuery when eager-loading is set.
	Edges        ReviewProjectEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ReviewProjectEdges holds the relations/edges for other nodes in the graph.
type ReviewProjectEdges struct {
	// Applicant holds the value of the applicant edge.
	Applicant *User `json:"applicant,omitempty"`
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// ReviewProjectDetail holds the value of the review_project_detail edge.
	ReviewProjectDetail []*ReviewProjectDetail `json:"review_project_detail,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ApplicantOrErr returns the Applicant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReviewProjectEdges) ApplicantOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Applicant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Applicant, nil
	}
	return nil, &NotLoadedError{edge: "applicant"}
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReviewProjectEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[1] {
		if e.Project == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// ReviewProjectDetailOrErr returns the ReviewProjectDetail value or an error if the edge
// was not loaded in eager-loading.
func (e ReviewProjectEdges) ReviewProjectDetailOrErr() ([]*ReviewProjectDetail, error) {
	if e.loadedTypes[2] {
		return e.ReviewProjectDetail, nil
	}
	return nil, &NotLoadedError{edge: "review_project_detail"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReviewProject) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reviewproject.FieldID, reviewproject.FieldProjectID, reviewproject.FieldApplicantID, reviewproject.FieldStatus:
			values[i] = new(sql.NullInt64)
		case reviewproject.FieldWorkflowID, reviewproject.FieldRunID:
			values[i] = new(sql.NullString)
		case reviewproject.FieldCreatedTime, reviewproject.FieldDeletedTime, reviewproject.FieldModifiedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReviewProject fields.
func (rp *ReviewProject) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reviewproject.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rp.ID = uint32(value.Int64)
		case reviewproject.FieldProjectID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value.Valid {
				rp.ProjectID = uint32(value.Int64)
			}
		case reviewproject.FieldWorkflowID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_id", values[i])
			} else if value.Valid {
				rp.WorkflowID = value.String
			}
		case reviewproject.FieldRunID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field run_id", values[i])
			} else if value.Valid {
				rp.RunID = value.String
			}
		case reviewproject.FieldApplicantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field applicant_id", values[i])
			} else if value.Valid {
				rp.ApplicantID = uint32(value.Int64)
			}
		case reviewproject.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				rp.Status = uint8(value.Int64)
			}
		case reviewproject.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				rp.CreatedTime = new(time.Time)
				*rp.CreatedTime = value.Time
			}
		case reviewproject.FieldDeletedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_time", values[i])
			} else if value.Valid {
				rp.DeletedTime = new(time.Time)
				*rp.DeletedTime = value.Time
			}
		case reviewproject.FieldModifiedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modified_time", values[i])
			} else if value.Valid {
				rp.ModifiedTime = new(time.Time)
				*rp.ModifiedTime = value.Time
			}
		default:
			rp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ReviewProject.
// This includes values selected through modifiers, order, etc.
func (rp *ReviewProject) Value(name string) (ent.Value, error) {
	return rp.selectValues.Get(name)
}

// QueryApplicant queries the "applicant" edge of the ReviewProject entity.
func (rp *ReviewProject) QueryApplicant() *UserQuery {
	return NewReviewProjectClient(rp.config).QueryApplicant(rp)
}

// QueryProject queries the "project" edge of the ReviewProject entity.
func (rp *ReviewProject) QueryProject() *ProjectQuery {
	return NewReviewProjectClient(rp.config).QueryProject(rp)
}

// QueryReviewProjectDetail queries the "review_project_detail" edge of the ReviewProject entity.
func (rp *ReviewProject) QueryReviewProjectDetail() *ReviewProjectDetailQuery {
	return NewReviewProjectClient(rp.config).QueryReviewProjectDetail(rp)
}

// Update returns a builder for updating this ReviewProject.
// Note that you need to call ReviewProject.Unwrap() before calling this method if this ReviewProject
// was returned from a transaction, and the transaction was committed or rolled back.
func (rp *ReviewProject) Update() *ReviewProjectUpdateOne {
	return NewReviewProjectClient(rp.config).UpdateOne(rp)
}

// Unwrap unwraps the ReviewProject entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rp *ReviewProject) Unwrap() *ReviewProject {
	_tx, ok := rp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReviewProject is not a transactional entity")
	}
	rp.config.driver = _tx.drv
	return rp
}

// String implements the fmt.Stringer.
func (rp *ReviewProject) String() string {
	var builder strings.Builder
	builder.WriteString("ReviewProject(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rp.ID))
	builder.WriteString("project_id=")
	builder.WriteString(fmt.Sprintf("%v", rp.ProjectID))
	builder.WriteString(", ")
	builder.WriteString("workflow_id=")
	builder.WriteString(rp.WorkflowID)
	builder.WriteString(", ")
	builder.WriteString("run_id=")
	builder.WriteString(rp.RunID)
	builder.WriteString(", ")
	builder.WriteString("applicant_id=")
	builder.WriteString(fmt.Sprintf("%v", rp.ApplicantID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", rp.Status))
	builder.WriteString(", ")
	if v := rp.CreatedTime; v != nil {
		builder.WriteString("created_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := rp.DeletedTime; v != nil {
		builder.WriteString("deleted_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := rp.ModifiedTime; v != nil {
		builder.WriteString("modified_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ReviewProjects is a parsable slice of ReviewProject.
type ReviewProjects []*ReviewProject
