// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DemoonLXW/up_learning/database/ent/predicate"
	"github.com/DemoonLXW/up_learning/database/ent/project"
	"github.com/DemoonLXW/up_learning/database/ent/reviewproject"
	"github.com/DemoonLXW/up_learning/database/ent/reviewprojectdetail"
	"github.com/DemoonLXW/up_learning/database/ent/user"
)

// ReviewProjectQuery is the builder for querying ReviewProject entities.
type ReviewProjectQuery struct {
	config
	ctx                     *QueryContext
	order                   []reviewproject.OrderOption
	inters                  []Interceptor
	predicates              []predicate.ReviewProject
	withApplicant           *UserQuery
	withProject             *ProjectQuery
	withReviewProjectDetail *ReviewProjectDetailQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ReviewProjectQuery builder.
func (rpq *ReviewProjectQuery) Where(ps ...predicate.ReviewProject) *ReviewProjectQuery {
	rpq.predicates = append(rpq.predicates, ps...)
	return rpq
}

// Limit the number of records to be returned by this query.
func (rpq *ReviewProjectQuery) Limit(limit int) *ReviewProjectQuery {
	rpq.ctx.Limit = &limit
	return rpq
}

// Offset to start from.
func (rpq *ReviewProjectQuery) Offset(offset int) *ReviewProjectQuery {
	rpq.ctx.Offset = &offset
	return rpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rpq *ReviewProjectQuery) Unique(unique bool) *ReviewProjectQuery {
	rpq.ctx.Unique = &unique
	return rpq
}

// Order specifies how the records should be ordered.
func (rpq *ReviewProjectQuery) Order(o ...reviewproject.OrderOption) *ReviewProjectQuery {
	rpq.order = append(rpq.order, o...)
	return rpq
}

// QueryApplicant chains the current query on the "applicant" edge.
func (rpq *ReviewProjectQuery) QueryApplicant() *UserQuery {
	query := (&UserClient{config: rpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(reviewproject.Table, reviewproject.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, reviewproject.ApplicantTable, reviewproject.ApplicantColumn),
		)
		fromU = sqlgraph.SetNeighbors(rpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProject chains the current query on the "project" edge.
func (rpq *ReviewProjectQuery) QueryProject() *ProjectQuery {
	query := (&ProjectClient{config: rpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(reviewproject.Table, reviewproject.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, reviewproject.ProjectTable, reviewproject.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(rpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReviewProjectDetail chains the current query on the "review_project_detail" edge.
func (rpq *ReviewProjectQuery) QueryReviewProjectDetail() *ReviewProjectDetailQuery {
	query := (&ReviewProjectDetailClient{config: rpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(reviewproject.Table, reviewproject.FieldID, selector),
			sqlgraph.To(reviewprojectdetail.Table, reviewprojectdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, reviewproject.ReviewProjectDetailTable, reviewproject.ReviewProjectDetailColumn),
		)
		fromU = sqlgraph.SetNeighbors(rpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ReviewProject entity from the query.
// Returns a *NotFoundError when no ReviewProject was found.
func (rpq *ReviewProjectQuery) First(ctx context.Context) (*ReviewProject, error) {
	nodes, err := rpq.Limit(1).All(setContextOp(ctx, rpq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{reviewproject.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rpq *ReviewProjectQuery) FirstX(ctx context.Context) *ReviewProject {
	node, err := rpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ReviewProject ID from the query.
// Returns a *NotFoundError when no ReviewProject ID was found.
func (rpq *ReviewProjectQuery) FirstID(ctx context.Context) (id uint32, err error) {
	var ids []uint32
	if ids, err = rpq.Limit(1).IDs(setContextOp(ctx, rpq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{reviewproject.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rpq *ReviewProjectQuery) FirstIDX(ctx context.Context) uint32 {
	id, err := rpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ReviewProject entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ReviewProject entity is found.
// Returns a *NotFoundError when no ReviewProject entities are found.
func (rpq *ReviewProjectQuery) Only(ctx context.Context) (*ReviewProject, error) {
	nodes, err := rpq.Limit(2).All(setContextOp(ctx, rpq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{reviewproject.Label}
	default:
		return nil, &NotSingularError{reviewproject.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rpq *ReviewProjectQuery) OnlyX(ctx context.Context) *ReviewProject {
	node, err := rpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ReviewProject ID in the query.
// Returns a *NotSingularError when more than one ReviewProject ID is found.
// Returns a *NotFoundError when no entities are found.
func (rpq *ReviewProjectQuery) OnlyID(ctx context.Context) (id uint32, err error) {
	var ids []uint32
	if ids, err = rpq.Limit(2).IDs(setContextOp(ctx, rpq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{reviewproject.Label}
	default:
		err = &NotSingularError{reviewproject.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rpq *ReviewProjectQuery) OnlyIDX(ctx context.Context) uint32 {
	id, err := rpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ReviewProjects.
func (rpq *ReviewProjectQuery) All(ctx context.Context) ([]*ReviewProject, error) {
	ctx = setContextOp(ctx, rpq.ctx, "All")
	if err := rpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ReviewProject, *ReviewProjectQuery]()
	return withInterceptors[[]*ReviewProject](ctx, rpq, qr, rpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rpq *ReviewProjectQuery) AllX(ctx context.Context) []*ReviewProject {
	nodes, err := rpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ReviewProject IDs.
func (rpq *ReviewProjectQuery) IDs(ctx context.Context) (ids []uint32, err error) {
	if rpq.ctx.Unique == nil && rpq.path != nil {
		rpq.Unique(true)
	}
	ctx = setContextOp(ctx, rpq.ctx, "IDs")
	if err = rpq.Select(reviewproject.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rpq *ReviewProjectQuery) IDsX(ctx context.Context) []uint32 {
	ids, err := rpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rpq *ReviewProjectQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rpq.ctx, "Count")
	if err := rpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rpq, querierCount[*ReviewProjectQuery](), rpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rpq *ReviewProjectQuery) CountX(ctx context.Context) int {
	count, err := rpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rpq *ReviewProjectQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rpq.ctx, "Exist")
	switch _, err := rpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rpq *ReviewProjectQuery) ExistX(ctx context.Context) bool {
	exist, err := rpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ReviewProjectQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rpq *ReviewProjectQuery) Clone() *ReviewProjectQuery {
	if rpq == nil {
		return nil
	}
	return &ReviewProjectQuery{
		config:                  rpq.config,
		ctx:                     rpq.ctx.Clone(),
		order:                   append([]reviewproject.OrderOption{}, rpq.order...),
		inters:                  append([]Interceptor{}, rpq.inters...),
		predicates:              append([]predicate.ReviewProject{}, rpq.predicates...),
		withApplicant:           rpq.withApplicant.Clone(),
		withProject:             rpq.withProject.Clone(),
		withReviewProjectDetail: rpq.withReviewProjectDetail.Clone(),
		// clone intermediate query.
		sql:  rpq.sql.Clone(),
		path: rpq.path,
	}
}

// WithApplicant tells the query-builder to eager-load the nodes that are connected to
// the "applicant" edge. The optional arguments are used to configure the query builder of the edge.
func (rpq *ReviewProjectQuery) WithApplicant(opts ...func(*UserQuery)) *ReviewProjectQuery {
	query := (&UserClient{config: rpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rpq.withApplicant = query
	return rpq
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (rpq *ReviewProjectQuery) WithProject(opts ...func(*ProjectQuery)) *ReviewProjectQuery {
	query := (&ProjectClient{config: rpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rpq.withProject = query
	return rpq
}

// WithReviewProjectDetail tells the query-builder to eager-load the nodes that are connected to
// the "review_project_detail" edge. The optional arguments are used to configure the query builder of the edge.
func (rpq *ReviewProjectQuery) WithReviewProjectDetail(opts ...func(*ReviewProjectDetailQuery)) *ReviewProjectQuery {
	query := (&ReviewProjectDetailClient{config: rpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rpq.withReviewProjectDetail = query
	return rpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ProjectID uint32 `json:"project_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ReviewProject.Query().
//		GroupBy(reviewproject.FieldProjectID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rpq *ReviewProjectQuery) GroupBy(field string, fields ...string) *ReviewProjectGroupBy {
	rpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ReviewProjectGroupBy{build: rpq}
	grbuild.flds = &rpq.ctx.Fields
	grbuild.label = reviewproject.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ProjectID uint32 `json:"project_id,omitempty"`
//	}
//
//	client.ReviewProject.Query().
//		Select(reviewproject.FieldProjectID).
//		Scan(ctx, &v)
func (rpq *ReviewProjectQuery) Select(fields ...string) *ReviewProjectSelect {
	rpq.ctx.Fields = append(rpq.ctx.Fields, fields...)
	sbuild := &ReviewProjectSelect{ReviewProjectQuery: rpq}
	sbuild.label = reviewproject.Label
	sbuild.flds, sbuild.scan = &rpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ReviewProjectSelect configured with the given aggregations.
func (rpq *ReviewProjectQuery) Aggregate(fns ...AggregateFunc) *ReviewProjectSelect {
	return rpq.Select().Aggregate(fns...)
}

func (rpq *ReviewProjectQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rpq); err != nil {
				return err
			}
		}
	}
	for _, f := range rpq.ctx.Fields {
		if !reviewproject.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rpq.path != nil {
		prev, err := rpq.path(ctx)
		if err != nil {
			return err
		}
		rpq.sql = prev
	}
	return nil
}

func (rpq *ReviewProjectQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ReviewProject, error) {
	var (
		nodes       = []*ReviewProject{}
		_spec       = rpq.querySpec()
		loadedTypes = [3]bool{
			rpq.withApplicant != nil,
			rpq.withProject != nil,
			rpq.withReviewProjectDetail != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ReviewProject).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ReviewProject{config: rpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rpq.withApplicant; query != nil {
		if err := rpq.loadApplicant(ctx, query, nodes, nil,
			func(n *ReviewProject, e *User) { n.Edges.Applicant = e }); err != nil {
			return nil, err
		}
	}
	if query := rpq.withProject; query != nil {
		if err := rpq.loadProject(ctx, query, nodes, nil,
			func(n *ReviewProject, e *Project) { n.Edges.Project = e }); err != nil {
			return nil, err
		}
	}
	if query := rpq.withReviewProjectDetail; query != nil {
		if err := rpq.loadReviewProjectDetail(ctx, query, nodes,
			func(n *ReviewProject) { n.Edges.ReviewProjectDetail = []*ReviewProjectDetail{} },
			func(n *ReviewProject, e *ReviewProjectDetail) {
				n.Edges.ReviewProjectDetail = append(n.Edges.ReviewProjectDetail, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rpq *ReviewProjectQuery) loadApplicant(ctx context.Context, query *UserQuery, nodes []*ReviewProject, init func(*ReviewProject), assign func(*ReviewProject, *User)) error {
	ids := make([]uint32, 0, len(nodes))
	nodeids := make(map[uint32][]*ReviewProject)
	for i := range nodes {
		fk := nodes[i].ApplicantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "applicant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rpq *ReviewProjectQuery) loadProject(ctx context.Context, query *ProjectQuery, nodes []*ReviewProject, init func(*ReviewProject), assign func(*ReviewProject, *Project)) error {
	ids := make([]uint32, 0, len(nodes))
	nodeids := make(map[uint32][]*ReviewProject)
	for i := range nodes {
		fk := nodes[i].ProjectID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(project.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rpq *ReviewProjectQuery) loadReviewProjectDetail(ctx context.Context, query *ReviewProjectDetailQuery, nodes []*ReviewProject, init func(*ReviewProject), assign func(*ReviewProject, *ReviewProjectDetail)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint32]*ReviewProject)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(reviewprojectdetail.FieldReviewProjectID)
	}
	query.Where(predicate.ReviewProjectDetail(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(reviewproject.ReviewProjectDetailColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ReviewProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "review_project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (rpq *ReviewProjectQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rpq.querySpec()
	_spec.Node.Columns = rpq.ctx.Fields
	if len(rpq.ctx.Fields) > 0 {
		_spec.Unique = rpq.ctx.Unique != nil && *rpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rpq.driver, _spec)
}

func (rpq *ReviewProjectQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(reviewproject.Table, reviewproject.Columns, sqlgraph.NewFieldSpec(reviewproject.FieldID, field.TypeUint32))
	_spec.From = rpq.sql
	if unique := rpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rpq.path != nil {
		_spec.Unique = true
	}
	if fields := rpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reviewproject.FieldID)
		for i := range fields {
			if fields[i] != reviewproject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if rpq.withApplicant != nil {
			_spec.Node.AddColumnOnce(reviewproject.FieldApplicantID)
		}
		if rpq.withProject != nil {
			_spec.Node.AddColumnOnce(reviewproject.FieldProjectID)
		}
	}
	if ps := rpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rpq *ReviewProjectQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rpq.driver.Dialect())
	t1 := builder.Table(reviewproject.Table)
	columns := rpq.ctx.Fields
	if len(columns) == 0 {
		columns = reviewproject.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rpq.sql != nil {
		selector = rpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rpq.ctx.Unique != nil && *rpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rpq.predicates {
		p(selector)
	}
	for _, p := range rpq.order {
		p(selector)
	}
	if offset := rpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ReviewProjectGroupBy is the group-by builder for ReviewProject entities.
type ReviewProjectGroupBy struct {
	selector
	build *ReviewProjectQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rpgb *ReviewProjectGroupBy) Aggregate(fns ...AggregateFunc) *ReviewProjectGroupBy {
	rpgb.fns = append(rpgb.fns, fns...)
	return rpgb
}

// Scan applies the selector query and scans the result into the given value.
func (rpgb *ReviewProjectGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rpgb.build.ctx, "GroupBy")
	if err := rpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ReviewProjectQuery, *ReviewProjectGroupBy](ctx, rpgb.build, rpgb, rpgb.build.inters, v)
}

func (rpgb *ReviewProjectGroupBy) sqlScan(ctx context.Context, root *ReviewProjectQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rpgb.fns))
	for _, fn := range rpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rpgb.flds)+len(rpgb.fns))
		for _, f := range *rpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ReviewProjectSelect is the builder for selecting fields of ReviewProject entities.
type ReviewProjectSelect struct {
	*ReviewProjectQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rps *ReviewProjectSelect) Aggregate(fns ...AggregateFunc) *ReviewProjectSelect {
	rps.fns = append(rps.fns, fns...)
	return rps
}

// Scan applies the selector query and scans the result into the given value.
func (rps *ReviewProjectSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rps.ctx, "Select")
	if err := rps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ReviewProjectQuery, *ReviewProjectSelect](ctx, rps.ReviewProjectQuery, rps, rps.inters, v)
}

func (rps *ReviewProjectSelect) sqlScan(ctx context.Context, root *ReviewProjectQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rps.fns))
	for _, fn := range rps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
