// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DemoonLXW/up_learning/database/ent/file"
	"github.com/DemoonLXW/up_learning/database/ent/predicate"
	"github.com/DemoonLXW/up_learning/database/ent/project"
	"github.com/DemoonLXW/up_learning/database/ent/projectfile"
)

// ProjectFileUpdate is the builder for updating ProjectFile entities.
type ProjectFileUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectFileMutation
}

// Where appends a list predicates to the ProjectFileUpdate builder.
func (pfu *ProjectFileUpdate) Where(ps ...predicate.ProjectFile) *ProjectFileUpdate {
	pfu.mutation.Where(ps...)
	return pfu
}

// SetPid sets the "pid" field.
func (pfu *ProjectFileUpdate) SetPid(u uint32) *ProjectFileUpdate {
	pfu.mutation.SetPid(u)
	return pfu
}

// SetFid sets the "fid" field.
func (pfu *ProjectFileUpdate) SetFid(u uint32) *ProjectFileUpdate {
	pfu.mutation.SetFid(u)
	return pfu
}

// SetCreatedTime sets the "created_time" field.
func (pfu *ProjectFileUpdate) SetCreatedTime(t time.Time) *ProjectFileUpdate {
	pfu.mutation.SetCreatedTime(t)
	return pfu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (pfu *ProjectFileUpdate) SetNillableCreatedTime(t *time.Time) *ProjectFileUpdate {
	if t != nil {
		pfu.SetCreatedTime(*t)
	}
	return pfu
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (pfu *ProjectFileUpdate) SetProjectID(id uint32) *ProjectFileUpdate {
	pfu.mutation.SetProjectID(id)
	return pfu
}

// SetProject sets the "project" edge to the Project entity.
func (pfu *ProjectFileUpdate) SetProject(p *Project) *ProjectFileUpdate {
	return pfu.SetProjectID(p.ID)
}

// SetFilesID sets the "files" edge to the File entity by ID.
func (pfu *ProjectFileUpdate) SetFilesID(id uint32) *ProjectFileUpdate {
	pfu.mutation.SetFilesID(id)
	return pfu
}

// SetFiles sets the "files" edge to the File entity.
func (pfu *ProjectFileUpdate) SetFiles(f *File) *ProjectFileUpdate {
	return pfu.SetFilesID(f.ID)
}

// Mutation returns the ProjectFileMutation object of the builder.
func (pfu *ProjectFileUpdate) Mutation() *ProjectFileMutation {
	return pfu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (pfu *ProjectFileUpdate) ClearProject() *ProjectFileUpdate {
	pfu.mutation.ClearProject()
	return pfu
}

// ClearFiles clears the "files" edge to the File entity.
func (pfu *ProjectFileUpdate) ClearFiles() *ProjectFileUpdate {
	pfu.mutation.ClearFiles()
	return pfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pfu *ProjectFileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pfu.sqlSave, pfu.mutation, pfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pfu *ProjectFileUpdate) SaveX(ctx context.Context) int {
	affected, err := pfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pfu *ProjectFileUpdate) Exec(ctx context.Context) error {
	_, err := pfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfu *ProjectFileUpdate) ExecX(ctx context.Context) {
	if err := pfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfu *ProjectFileUpdate) check() error {
	if _, ok := pfu.mutation.ProjectID(); pfu.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProjectFile.project"`)
	}
	if _, ok := pfu.mutation.FilesID(); pfu.mutation.FilesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProjectFile.files"`)
	}
	return nil
}

func (pfu *ProjectFileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectfile.Table, projectfile.Columns, sqlgraph.NewFieldSpec(projectfile.FieldID, field.TypeInt))
	if ps := pfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfu.mutation.CreatedTime(); ok {
		_spec.SetField(projectfile.FieldCreatedTime, field.TypeTime, value)
	}
	if pfu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectfile.ProjectTable,
			Columns: []string{projectfile.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectfile.ProjectTable,
			Columns: []string{projectfile.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectfile.FilesTable,
			Columns: []string{projectfile.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfu.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectfile.FilesTable,
			Columns: []string{projectfile.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pfu.mutation.done = true
	return n, nil
}

// ProjectFileUpdateOne is the builder for updating a single ProjectFile entity.
type ProjectFileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectFileMutation
}

// SetPid sets the "pid" field.
func (pfuo *ProjectFileUpdateOne) SetPid(u uint32) *ProjectFileUpdateOne {
	pfuo.mutation.SetPid(u)
	return pfuo
}

// SetFid sets the "fid" field.
func (pfuo *ProjectFileUpdateOne) SetFid(u uint32) *ProjectFileUpdateOne {
	pfuo.mutation.SetFid(u)
	return pfuo
}

// SetCreatedTime sets the "created_time" field.
func (pfuo *ProjectFileUpdateOne) SetCreatedTime(t time.Time) *ProjectFileUpdateOne {
	pfuo.mutation.SetCreatedTime(t)
	return pfuo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (pfuo *ProjectFileUpdateOne) SetNillableCreatedTime(t *time.Time) *ProjectFileUpdateOne {
	if t != nil {
		pfuo.SetCreatedTime(*t)
	}
	return pfuo
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (pfuo *ProjectFileUpdateOne) SetProjectID(id uint32) *ProjectFileUpdateOne {
	pfuo.mutation.SetProjectID(id)
	return pfuo
}

// SetProject sets the "project" edge to the Project entity.
func (pfuo *ProjectFileUpdateOne) SetProject(p *Project) *ProjectFileUpdateOne {
	return pfuo.SetProjectID(p.ID)
}

// SetFilesID sets the "files" edge to the File entity by ID.
func (pfuo *ProjectFileUpdateOne) SetFilesID(id uint32) *ProjectFileUpdateOne {
	pfuo.mutation.SetFilesID(id)
	return pfuo
}

// SetFiles sets the "files" edge to the File entity.
func (pfuo *ProjectFileUpdateOne) SetFiles(f *File) *ProjectFileUpdateOne {
	return pfuo.SetFilesID(f.ID)
}

// Mutation returns the ProjectFileMutation object of the builder.
func (pfuo *ProjectFileUpdateOne) Mutation() *ProjectFileMutation {
	return pfuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (pfuo *ProjectFileUpdateOne) ClearProject() *ProjectFileUpdateOne {
	pfuo.mutation.ClearProject()
	return pfuo
}

// ClearFiles clears the "files" edge to the File entity.
func (pfuo *ProjectFileUpdateOne) ClearFiles() *ProjectFileUpdateOne {
	pfuo.mutation.ClearFiles()
	return pfuo
}

// Where appends a list predicates to the ProjectFileUpdate builder.
func (pfuo *ProjectFileUpdateOne) Where(ps ...predicate.ProjectFile) *ProjectFileUpdateOne {
	pfuo.mutation.Where(ps...)
	return pfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pfuo *ProjectFileUpdateOne) Select(field string, fields ...string) *ProjectFileUpdateOne {
	pfuo.fields = append([]string{field}, fields...)
	return pfuo
}

// Save executes the query and returns the updated ProjectFile entity.
func (pfuo *ProjectFileUpdateOne) Save(ctx context.Context) (*ProjectFile, error) {
	return withHooks(ctx, pfuo.sqlSave, pfuo.mutation, pfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pfuo *ProjectFileUpdateOne) SaveX(ctx context.Context) *ProjectFile {
	node, err := pfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pfuo *ProjectFileUpdateOne) Exec(ctx context.Context) error {
	_, err := pfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfuo *ProjectFileUpdateOne) ExecX(ctx context.Context) {
	if err := pfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfuo *ProjectFileUpdateOne) check() error {
	if _, ok := pfuo.mutation.ProjectID(); pfuo.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProjectFile.project"`)
	}
	if _, ok := pfuo.mutation.FilesID(); pfuo.mutation.FilesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProjectFile.files"`)
	}
	return nil
}

func (pfuo *ProjectFileUpdateOne) sqlSave(ctx context.Context) (_node *ProjectFile, err error) {
	if err := pfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectfile.Table, projectfile.Columns, sqlgraph.NewFieldSpec(projectfile.FieldID, field.TypeInt))
	id, ok := pfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProjectFile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectfile.FieldID)
		for _, f := range fields {
			if !projectfile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projectfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfuo.mutation.CreatedTime(); ok {
		_spec.SetField(projectfile.FieldCreatedTime, field.TypeTime, value)
	}
	if pfuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectfile.ProjectTable,
			Columns: []string{projectfile.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectfile.ProjectTable,
			Columns: []string{projectfile.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectfile.FilesTable,
			Columns: []string{projectfile.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfuo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectfile.FilesTable,
			Columns: []string{projectfile.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectFile{config: pfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pfuo.mutation.done = true
	return _node, nil
}
