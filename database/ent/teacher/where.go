// Code generated by ent, DO NOT EDIT.

package teacher

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/DemoonLXW/up_learning/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Teacher {
	return predicate.Teacher(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Teacher {
	return predicate.Teacher(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Teacher {
	return predicate.Teacher(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Teacher {
	return predicate.Teacher(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Teacher {
	return predicate.Teacher(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Teacher {
	return predicate.Teacher(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Teacher {
	return predicate.Teacher(sql.FieldLTE(FieldID, id))
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v uint32) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldUID, v))
}

// Cid applies equality check predicate on the "cid" field. It's identical to CidEQ.
func Cid(v uint8) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldCid, v))
}

// TeacherID applies equality check predicate on the "teacher_id" field. It's identical to TeacherIDEQ.
func TeacherID(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldTeacherID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldName, v))
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v uint8) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldGender, v))
}

// IsDisabled applies equality check predicate on the "is_disabled" field. It's identical to IsDisabledEQ.
func IsDisabled(v bool) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldIsDisabled, v))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldCreatedTime, v))
}

// DeletedTime applies equality check predicate on the "deleted_time" field. It's identical to DeletedTimeEQ.
func DeletedTime(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldDeletedTime, v))
}

// ModifiedTime applies equality check predicate on the "modified_time" field. It's identical to ModifiedTimeEQ.
func ModifiedTime(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldModifiedTime, v))
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v uint32) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldUID, v))
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v uint32) predicate.Teacher {
	return predicate.Teacher(sql.FieldNEQ(FieldUID, v))
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...uint32) predicate.Teacher {
	return predicate.Teacher(sql.FieldIn(FieldUID, vs...))
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...uint32) predicate.Teacher {
	return predicate.Teacher(sql.FieldNotIn(FieldUID, vs...))
}

// UIDIsNil applies the IsNil predicate on the "uid" field.
func UIDIsNil() predicate.Teacher {
	return predicate.Teacher(sql.FieldIsNull(FieldUID))
}

// UIDNotNil applies the NotNil predicate on the "uid" field.
func UIDNotNil() predicate.Teacher {
	return predicate.Teacher(sql.FieldNotNull(FieldUID))
}

// CidEQ applies the EQ predicate on the "cid" field.
func CidEQ(v uint8) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldCid, v))
}

// CidNEQ applies the NEQ predicate on the "cid" field.
func CidNEQ(v uint8) predicate.Teacher {
	return predicate.Teacher(sql.FieldNEQ(FieldCid, v))
}

// CidIn applies the In predicate on the "cid" field.
func CidIn(vs ...uint8) predicate.Teacher {
	return predicate.Teacher(sql.FieldIn(FieldCid, vs...))
}

// CidNotIn applies the NotIn predicate on the "cid" field.
func CidNotIn(vs ...uint8) predicate.Teacher {
	return predicate.Teacher(sql.FieldNotIn(FieldCid, vs...))
}

// TeacherIDEQ applies the EQ predicate on the "teacher_id" field.
func TeacherIDEQ(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldTeacherID, v))
}

// TeacherIDNEQ applies the NEQ predicate on the "teacher_id" field.
func TeacherIDNEQ(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldNEQ(FieldTeacherID, v))
}

// TeacherIDIn applies the In predicate on the "teacher_id" field.
func TeacherIDIn(vs ...string) predicate.Teacher {
	return predicate.Teacher(sql.FieldIn(FieldTeacherID, vs...))
}

// TeacherIDNotIn applies the NotIn predicate on the "teacher_id" field.
func TeacherIDNotIn(vs ...string) predicate.Teacher {
	return predicate.Teacher(sql.FieldNotIn(FieldTeacherID, vs...))
}

// TeacherIDGT applies the GT predicate on the "teacher_id" field.
func TeacherIDGT(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldGT(FieldTeacherID, v))
}

// TeacherIDGTE applies the GTE predicate on the "teacher_id" field.
func TeacherIDGTE(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldGTE(FieldTeacherID, v))
}

// TeacherIDLT applies the LT predicate on the "teacher_id" field.
func TeacherIDLT(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldLT(FieldTeacherID, v))
}

// TeacherIDLTE applies the LTE predicate on the "teacher_id" field.
func TeacherIDLTE(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldLTE(FieldTeacherID, v))
}

// TeacherIDContains applies the Contains predicate on the "teacher_id" field.
func TeacherIDContains(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldContains(FieldTeacherID, v))
}

// TeacherIDHasPrefix applies the HasPrefix predicate on the "teacher_id" field.
func TeacherIDHasPrefix(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldHasPrefix(FieldTeacherID, v))
}

// TeacherIDHasSuffix applies the HasSuffix predicate on the "teacher_id" field.
func TeacherIDHasSuffix(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldHasSuffix(FieldTeacherID, v))
}

// TeacherIDEqualFold applies the EqualFold predicate on the "teacher_id" field.
func TeacherIDEqualFold(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEqualFold(FieldTeacherID, v))
}

// TeacherIDContainsFold applies the ContainsFold predicate on the "teacher_id" field.
func TeacherIDContainsFold(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldContainsFold(FieldTeacherID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Teacher {
	return predicate.Teacher(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Teacher {
	return predicate.Teacher(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Teacher {
	return predicate.Teacher(sql.FieldContainsFold(FieldName, v))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v uint8) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v uint8) predicate.Teacher {
	return predicate.Teacher(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...uint8) predicate.Teacher {
	return predicate.Teacher(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...uint8) predicate.Teacher {
	return predicate.Teacher(sql.FieldNotIn(FieldGender, vs...))
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v uint8) predicate.Teacher {
	return predicate.Teacher(sql.FieldGT(FieldGender, v))
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v uint8) predicate.Teacher {
	return predicate.Teacher(sql.FieldGTE(FieldGender, v))
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v uint8) predicate.Teacher {
	return predicate.Teacher(sql.FieldLT(FieldGender, v))
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v uint8) predicate.Teacher {
	return predicate.Teacher(sql.FieldLTE(FieldGender, v))
}

// IsDisabledEQ applies the EQ predicate on the "is_disabled" field.
func IsDisabledEQ(v bool) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldIsDisabled, v))
}

// IsDisabledNEQ applies the NEQ predicate on the "is_disabled" field.
func IsDisabledNEQ(v bool) predicate.Teacher {
	return predicate.Teacher(sql.FieldNEQ(FieldIsDisabled, v))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldLTE(FieldCreatedTime, v))
}

// DeletedTimeEQ applies the EQ predicate on the "deleted_time" field.
func DeletedTimeEQ(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldDeletedTime, v))
}

// DeletedTimeNEQ applies the NEQ predicate on the "deleted_time" field.
func DeletedTimeNEQ(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldNEQ(FieldDeletedTime, v))
}

// DeletedTimeIn applies the In predicate on the "deleted_time" field.
func DeletedTimeIn(vs ...time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldIn(FieldDeletedTime, vs...))
}

// DeletedTimeNotIn applies the NotIn predicate on the "deleted_time" field.
func DeletedTimeNotIn(vs ...time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldNotIn(FieldDeletedTime, vs...))
}

// DeletedTimeGT applies the GT predicate on the "deleted_time" field.
func DeletedTimeGT(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldGT(FieldDeletedTime, v))
}

// DeletedTimeGTE applies the GTE predicate on the "deleted_time" field.
func DeletedTimeGTE(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldGTE(FieldDeletedTime, v))
}

// DeletedTimeLT applies the LT predicate on the "deleted_time" field.
func DeletedTimeLT(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldLT(FieldDeletedTime, v))
}

// DeletedTimeLTE applies the LTE predicate on the "deleted_time" field.
func DeletedTimeLTE(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldLTE(FieldDeletedTime, v))
}

// DeletedTimeIsNil applies the IsNil predicate on the "deleted_time" field.
func DeletedTimeIsNil() predicate.Teacher {
	return predicate.Teacher(sql.FieldIsNull(FieldDeletedTime))
}

// DeletedTimeNotNil applies the NotNil predicate on the "deleted_time" field.
func DeletedTimeNotNil() predicate.Teacher {
	return predicate.Teacher(sql.FieldNotNull(FieldDeletedTime))
}

// ModifiedTimeEQ applies the EQ predicate on the "modified_time" field.
func ModifiedTimeEQ(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldEQ(FieldModifiedTime, v))
}

// ModifiedTimeNEQ applies the NEQ predicate on the "modified_time" field.
func ModifiedTimeNEQ(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldNEQ(FieldModifiedTime, v))
}

// ModifiedTimeIn applies the In predicate on the "modified_time" field.
func ModifiedTimeIn(vs ...time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldIn(FieldModifiedTime, vs...))
}

// ModifiedTimeNotIn applies the NotIn predicate on the "modified_time" field.
func ModifiedTimeNotIn(vs ...time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldNotIn(FieldModifiedTime, vs...))
}

// ModifiedTimeGT applies the GT predicate on the "modified_time" field.
func ModifiedTimeGT(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldGT(FieldModifiedTime, v))
}

// ModifiedTimeGTE applies the GTE predicate on the "modified_time" field.
func ModifiedTimeGTE(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldGTE(FieldModifiedTime, v))
}

// ModifiedTimeLT applies the LT predicate on the "modified_time" field.
func ModifiedTimeLT(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldLT(FieldModifiedTime, v))
}

// ModifiedTimeLTE applies the LTE predicate on the "modified_time" field.
func ModifiedTimeLTE(v time.Time) predicate.Teacher {
	return predicate.Teacher(sql.FieldLTE(FieldModifiedTime, v))
}

// ModifiedTimeIsNil applies the IsNil predicate on the "modified_time" field.
func ModifiedTimeIsNil() predicate.Teacher {
	return predicate.Teacher(sql.FieldIsNull(FieldModifiedTime))
}

// ModifiedTimeNotNil applies the NotNil predicate on the "modified_time" field.
func ModifiedTimeNotNil() predicate.Teacher {
	return predicate.Teacher(sql.FieldNotNull(FieldModifiedTime))
}

// HasCollege applies the HasEdge predicate on the "college" edge.
func HasCollege() predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CollegeTable, CollegeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCollegeWith applies the HasEdge predicate on the "college" edge with a given conditions (other predicates).
func HasCollegeWith(preds ...predicate.College) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		step := newCollegeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Teacher) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Teacher) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Teacher) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		p(s.Not())
	})
}
