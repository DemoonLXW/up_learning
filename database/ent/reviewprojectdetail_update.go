// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DemoonLXW/up_learning/database/ent/predicate"
	"github.com/DemoonLXW/up_learning/database/ent/reviewproject"
	"github.com/DemoonLXW/up_learning/database/ent/reviewprojectdetail"
	"github.com/DemoonLXW/up_learning/entity"
)

// ReviewProjectDetailUpdate is the builder for updating ReviewProjectDetail entities.
type ReviewProjectDetailUpdate struct {
	config
	hooks    []Hook
	mutation *ReviewProjectDetailMutation
}

// Where appends a list predicates to the ReviewProjectDetailUpdate builder.
func (rpdu *ReviewProjectDetailUpdate) Where(ps ...predicate.ReviewProjectDetail) *ReviewProjectDetailUpdate {
	rpdu.mutation.Where(ps...)
	return rpdu
}

// SetReviewProjectID sets the "review_project_id" field.
func (rpdu *ReviewProjectDetailUpdate) SetReviewProjectID(u uint32) *ReviewProjectDetailUpdate {
	rpdu.mutation.SetReviewProjectID(u)
	return rpdu
}

// SetOrder sets the "order" field.
func (rpdu *ReviewProjectDetailUpdate) SetOrder(u uint8) *ReviewProjectDetailUpdate {
	rpdu.mutation.ResetOrder()
	rpdu.mutation.SetOrder(u)
	return rpdu
}

// AddOrder adds u to the "order" field.
func (rpdu *ReviewProjectDetailUpdate) AddOrder(u int8) *ReviewProjectDetailUpdate {
	rpdu.mutation.AddOrder(u)
	return rpdu
}

// SetReviewer sets the "reviewer" field.
func (rpdu *ReviewProjectDetailUpdate) SetReviewer(e *entity.Reviewer) *ReviewProjectDetailUpdate {
	rpdu.mutation.SetReviewer(e)
	return rpdu
}

// SetExecutor sets the "executor" field.
func (rpdu *ReviewProjectDetailUpdate) SetExecutor(e *entity.Executor) *ReviewProjectDetailUpdate {
	rpdu.mutation.SetExecutor(e)
	return rpdu
}

// SetNodeType sets the "node_type" field.
func (rpdu *ReviewProjectDetailUpdate) SetNodeType(u uint8) *ReviewProjectDetailUpdate {
	rpdu.mutation.ResetNodeType()
	rpdu.mutation.SetNodeType(u)
	return rpdu
}

// AddNodeType adds u to the "node_type" field.
func (rpdu *ReviewProjectDetailUpdate) AddNodeType(u int8) *ReviewProjectDetailUpdate {
	rpdu.mutation.AddNodeType(u)
	return rpdu
}

// SetOpinion sets the "opinion" field.
func (rpdu *ReviewProjectDetailUpdate) SetOpinion(s string) *ReviewProjectDetailUpdate {
	rpdu.mutation.SetOpinion(s)
	return rpdu
}

// SetStatus sets the "status" field.
func (rpdu *ReviewProjectDetailUpdate) SetStatus(u uint8) *ReviewProjectDetailUpdate {
	rpdu.mutation.ResetStatus()
	rpdu.mutation.SetStatus(u)
	return rpdu
}

// AddStatus adds u to the "status" field.
func (rpdu *ReviewProjectDetailUpdate) AddStatus(u int8) *ReviewProjectDetailUpdate {
	rpdu.mutation.AddStatus(u)
	return rpdu
}

// SetCreatedTime sets the "created_time" field.
func (rpdu *ReviewProjectDetailUpdate) SetCreatedTime(t time.Time) *ReviewProjectDetailUpdate {
	rpdu.mutation.SetCreatedTime(t)
	return rpdu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (rpdu *ReviewProjectDetailUpdate) SetNillableCreatedTime(t *time.Time) *ReviewProjectDetailUpdate {
	if t != nil {
		rpdu.SetCreatedTime(*t)
	}
	return rpdu
}

// SetDeletedTime sets the "deleted_time" field.
func (rpdu *ReviewProjectDetailUpdate) SetDeletedTime(t time.Time) *ReviewProjectDetailUpdate {
	rpdu.mutation.SetDeletedTime(t)
	return rpdu
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (rpdu *ReviewProjectDetailUpdate) SetNillableDeletedTime(t *time.Time) *ReviewProjectDetailUpdate {
	if t != nil {
		rpdu.SetDeletedTime(*t)
	}
	return rpdu
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (rpdu *ReviewProjectDetailUpdate) ClearDeletedTime() *ReviewProjectDetailUpdate {
	rpdu.mutation.ClearDeletedTime()
	return rpdu
}

// SetModifiedTime sets the "modified_time" field.
func (rpdu *ReviewProjectDetailUpdate) SetModifiedTime(t time.Time) *ReviewProjectDetailUpdate {
	rpdu.mutation.SetModifiedTime(t)
	return rpdu
}

// SetNillableModifiedTime sets the "modified_time" field if the given value is not nil.
func (rpdu *ReviewProjectDetailUpdate) SetNillableModifiedTime(t *time.Time) *ReviewProjectDetailUpdate {
	if t != nil {
		rpdu.SetModifiedTime(*t)
	}
	return rpdu
}

// ClearModifiedTime clears the value of the "modified_time" field.
func (rpdu *ReviewProjectDetailUpdate) ClearModifiedTime() *ReviewProjectDetailUpdate {
	rpdu.mutation.ClearModifiedTime()
	return rpdu
}

// SetReviewProject sets the "review_project" edge to the ReviewProject entity.
func (rpdu *ReviewProjectDetailUpdate) SetReviewProject(r *ReviewProject) *ReviewProjectDetailUpdate {
	return rpdu.SetReviewProjectID(r.ID)
}

// Mutation returns the ReviewProjectDetailMutation object of the builder.
func (rpdu *ReviewProjectDetailUpdate) Mutation() *ReviewProjectDetailMutation {
	return rpdu.mutation
}

// ClearReviewProject clears the "review_project" edge to the ReviewProject entity.
func (rpdu *ReviewProjectDetailUpdate) ClearReviewProject() *ReviewProjectDetailUpdate {
	rpdu.mutation.ClearReviewProject()
	return rpdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpdu *ReviewProjectDetailUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ReviewProjectDetailMutation](ctx, rpdu.sqlSave, rpdu.mutation, rpdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpdu *ReviewProjectDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := rpdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpdu *ReviewProjectDetailUpdate) Exec(ctx context.Context) error {
	_, err := rpdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpdu *ReviewProjectDetailUpdate) ExecX(ctx context.Context) {
	if err := rpdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpdu *ReviewProjectDetailUpdate) check() error {
	if _, ok := rpdu.mutation.ReviewProjectID(); rpdu.mutation.ReviewProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ReviewProjectDetail.review_project"`)
	}
	return nil
}

func (rpdu *ReviewProjectDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rpdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(reviewprojectdetail.Table, reviewprojectdetail.Columns, sqlgraph.NewFieldSpec(reviewprojectdetail.FieldID, field.TypeInt))
	if ps := rpdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpdu.mutation.Order(); ok {
		_spec.SetField(reviewprojectdetail.FieldOrder, field.TypeUint8, value)
	}
	if value, ok := rpdu.mutation.AddedOrder(); ok {
		_spec.AddField(reviewprojectdetail.FieldOrder, field.TypeUint8, value)
	}
	if value, ok := rpdu.mutation.Reviewer(); ok {
		_spec.SetField(reviewprojectdetail.FieldReviewer, field.TypeJSON, value)
	}
	if value, ok := rpdu.mutation.Executor(); ok {
		_spec.SetField(reviewprojectdetail.FieldExecutor, field.TypeJSON, value)
	}
	if value, ok := rpdu.mutation.NodeType(); ok {
		_spec.SetField(reviewprojectdetail.FieldNodeType, field.TypeUint8, value)
	}
	if value, ok := rpdu.mutation.AddedNodeType(); ok {
		_spec.AddField(reviewprojectdetail.FieldNodeType, field.TypeUint8, value)
	}
	if value, ok := rpdu.mutation.Opinion(); ok {
		_spec.SetField(reviewprojectdetail.FieldOpinion, field.TypeString, value)
	}
	if value, ok := rpdu.mutation.Status(); ok {
		_spec.SetField(reviewprojectdetail.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := rpdu.mutation.AddedStatus(); ok {
		_spec.AddField(reviewprojectdetail.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := rpdu.mutation.CreatedTime(); ok {
		_spec.SetField(reviewprojectdetail.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := rpdu.mutation.DeletedTime(); ok {
		_spec.SetField(reviewprojectdetail.FieldDeletedTime, field.TypeTime, value)
	}
	if rpdu.mutation.DeletedTimeCleared() {
		_spec.ClearField(reviewprojectdetail.FieldDeletedTime, field.TypeTime)
	}
	if value, ok := rpdu.mutation.ModifiedTime(); ok {
		_spec.SetField(reviewprojectdetail.FieldModifiedTime, field.TypeTime, value)
	}
	if rpdu.mutation.ModifiedTimeCleared() {
		_spec.ClearField(reviewprojectdetail.FieldModifiedTime, field.TypeTime)
	}
	if rpdu.mutation.ReviewProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reviewprojectdetail.ReviewProjectTable,
			Columns: []string{reviewprojectdetail.ReviewProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reviewproject.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpdu.mutation.ReviewProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reviewprojectdetail.ReviewProjectTable,
			Columns: []string{reviewprojectdetail.ReviewProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reviewproject.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reviewprojectdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rpdu.mutation.done = true
	return n, nil
}

// ReviewProjectDetailUpdateOne is the builder for updating a single ReviewProjectDetail entity.
type ReviewProjectDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReviewProjectDetailMutation
}

// SetReviewProjectID sets the "review_project_id" field.
func (rpduo *ReviewProjectDetailUpdateOne) SetReviewProjectID(u uint32) *ReviewProjectDetailUpdateOne {
	rpduo.mutation.SetReviewProjectID(u)
	return rpduo
}

// SetOrder sets the "order" field.
func (rpduo *ReviewProjectDetailUpdateOne) SetOrder(u uint8) *ReviewProjectDetailUpdateOne {
	rpduo.mutation.ResetOrder()
	rpduo.mutation.SetOrder(u)
	return rpduo
}

// AddOrder adds u to the "order" field.
func (rpduo *ReviewProjectDetailUpdateOne) AddOrder(u int8) *ReviewProjectDetailUpdateOne {
	rpduo.mutation.AddOrder(u)
	return rpduo
}

// SetReviewer sets the "reviewer" field.
func (rpduo *ReviewProjectDetailUpdateOne) SetReviewer(e *entity.Reviewer) *ReviewProjectDetailUpdateOne {
	rpduo.mutation.SetReviewer(e)
	return rpduo
}

// SetExecutor sets the "executor" field.
func (rpduo *ReviewProjectDetailUpdateOne) SetExecutor(e *entity.Executor) *ReviewProjectDetailUpdateOne {
	rpduo.mutation.SetExecutor(e)
	return rpduo
}

// SetNodeType sets the "node_type" field.
func (rpduo *ReviewProjectDetailUpdateOne) SetNodeType(u uint8) *ReviewProjectDetailUpdateOne {
	rpduo.mutation.ResetNodeType()
	rpduo.mutation.SetNodeType(u)
	return rpduo
}

// AddNodeType adds u to the "node_type" field.
func (rpduo *ReviewProjectDetailUpdateOne) AddNodeType(u int8) *ReviewProjectDetailUpdateOne {
	rpduo.mutation.AddNodeType(u)
	return rpduo
}

// SetOpinion sets the "opinion" field.
func (rpduo *ReviewProjectDetailUpdateOne) SetOpinion(s string) *ReviewProjectDetailUpdateOne {
	rpduo.mutation.SetOpinion(s)
	return rpduo
}

// SetStatus sets the "status" field.
func (rpduo *ReviewProjectDetailUpdateOne) SetStatus(u uint8) *ReviewProjectDetailUpdateOne {
	rpduo.mutation.ResetStatus()
	rpduo.mutation.SetStatus(u)
	return rpduo
}

// AddStatus adds u to the "status" field.
func (rpduo *ReviewProjectDetailUpdateOne) AddStatus(u int8) *ReviewProjectDetailUpdateOne {
	rpduo.mutation.AddStatus(u)
	return rpduo
}

// SetCreatedTime sets the "created_time" field.
func (rpduo *ReviewProjectDetailUpdateOne) SetCreatedTime(t time.Time) *ReviewProjectDetailUpdateOne {
	rpduo.mutation.SetCreatedTime(t)
	return rpduo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (rpduo *ReviewProjectDetailUpdateOne) SetNillableCreatedTime(t *time.Time) *ReviewProjectDetailUpdateOne {
	if t != nil {
		rpduo.SetCreatedTime(*t)
	}
	return rpduo
}

// SetDeletedTime sets the "deleted_time" field.
func (rpduo *ReviewProjectDetailUpdateOne) SetDeletedTime(t time.Time) *ReviewProjectDetailUpdateOne {
	rpduo.mutation.SetDeletedTime(t)
	return rpduo
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (rpduo *ReviewProjectDetailUpdateOne) SetNillableDeletedTime(t *time.Time) *ReviewProjectDetailUpdateOne {
	if t != nil {
		rpduo.SetDeletedTime(*t)
	}
	return rpduo
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (rpduo *ReviewProjectDetailUpdateOne) ClearDeletedTime() *ReviewProjectDetailUpdateOne {
	rpduo.mutation.ClearDeletedTime()
	return rpduo
}

// SetModifiedTime sets the "modified_time" field.
func (rpduo *ReviewProjectDetailUpdateOne) SetModifiedTime(t time.Time) *ReviewProjectDetailUpdateOne {
	rpduo.mutation.SetModifiedTime(t)
	return rpduo
}

// SetNillableModifiedTime sets the "modified_time" field if the given value is not nil.
func (rpduo *ReviewProjectDetailUpdateOne) SetNillableModifiedTime(t *time.Time) *ReviewProjectDetailUpdateOne {
	if t != nil {
		rpduo.SetModifiedTime(*t)
	}
	return rpduo
}

// ClearModifiedTime clears the value of the "modified_time" field.
func (rpduo *ReviewProjectDetailUpdateOne) ClearModifiedTime() *ReviewProjectDetailUpdateOne {
	rpduo.mutation.ClearModifiedTime()
	return rpduo
}

// SetReviewProject sets the "review_project" edge to the ReviewProject entity.
func (rpduo *ReviewProjectDetailUpdateOne) SetReviewProject(r *ReviewProject) *ReviewProjectDetailUpdateOne {
	return rpduo.SetReviewProjectID(r.ID)
}

// Mutation returns the ReviewProjectDetailMutation object of the builder.
func (rpduo *ReviewProjectDetailUpdateOne) Mutation() *ReviewProjectDetailMutation {
	return rpduo.mutation
}

// ClearReviewProject clears the "review_project" edge to the ReviewProject entity.
func (rpduo *ReviewProjectDetailUpdateOne) ClearReviewProject() *ReviewProjectDetailUpdateOne {
	rpduo.mutation.ClearReviewProject()
	return rpduo
}

// Where appends a list predicates to the ReviewProjectDetailUpdate builder.
func (rpduo *ReviewProjectDetailUpdateOne) Where(ps ...predicate.ReviewProjectDetail) *ReviewProjectDetailUpdateOne {
	rpduo.mutation.Where(ps...)
	return rpduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpduo *ReviewProjectDetailUpdateOne) Select(field string, fields ...string) *ReviewProjectDetailUpdateOne {
	rpduo.fields = append([]string{field}, fields...)
	return rpduo
}

// Save executes the query and returns the updated ReviewProjectDetail entity.
func (rpduo *ReviewProjectDetailUpdateOne) Save(ctx context.Context) (*ReviewProjectDetail, error) {
	return withHooks[*ReviewProjectDetail, ReviewProjectDetailMutation](ctx, rpduo.sqlSave, rpduo.mutation, rpduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpduo *ReviewProjectDetailUpdateOne) SaveX(ctx context.Context) *ReviewProjectDetail {
	node, err := rpduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpduo *ReviewProjectDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := rpduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpduo *ReviewProjectDetailUpdateOne) ExecX(ctx context.Context) {
	if err := rpduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpduo *ReviewProjectDetailUpdateOne) check() error {
	if _, ok := rpduo.mutation.ReviewProjectID(); rpduo.mutation.ReviewProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ReviewProjectDetail.review_project"`)
	}
	return nil
}

func (rpduo *ReviewProjectDetailUpdateOne) sqlSave(ctx context.Context) (_node *ReviewProjectDetail, err error) {
	if err := rpduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(reviewprojectdetail.Table, reviewprojectdetail.Columns, sqlgraph.NewFieldSpec(reviewprojectdetail.FieldID, field.TypeInt))
	id, ok := rpduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReviewProjectDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reviewprojectdetail.FieldID)
		for _, f := range fields {
			if !reviewprojectdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reviewprojectdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpduo.mutation.Order(); ok {
		_spec.SetField(reviewprojectdetail.FieldOrder, field.TypeUint8, value)
	}
	if value, ok := rpduo.mutation.AddedOrder(); ok {
		_spec.AddField(reviewprojectdetail.FieldOrder, field.TypeUint8, value)
	}
	if value, ok := rpduo.mutation.Reviewer(); ok {
		_spec.SetField(reviewprojectdetail.FieldReviewer, field.TypeJSON, value)
	}
	if value, ok := rpduo.mutation.Executor(); ok {
		_spec.SetField(reviewprojectdetail.FieldExecutor, field.TypeJSON, value)
	}
	if value, ok := rpduo.mutation.NodeType(); ok {
		_spec.SetField(reviewprojectdetail.FieldNodeType, field.TypeUint8, value)
	}
	if value, ok := rpduo.mutation.AddedNodeType(); ok {
		_spec.AddField(reviewprojectdetail.FieldNodeType, field.TypeUint8, value)
	}
	if value, ok := rpduo.mutation.Opinion(); ok {
		_spec.SetField(reviewprojectdetail.FieldOpinion, field.TypeString, value)
	}
	if value, ok := rpduo.mutation.Status(); ok {
		_spec.SetField(reviewprojectdetail.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := rpduo.mutation.AddedStatus(); ok {
		_spec.AddField(reviewprojectdetail.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := rpduo.mutation.CreatedTime(); ok {
		_spec.SetField(reviewprojectdetail.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := rpduo.mutation.DeletedTime(); ok {
		_spec.SetField(reviewprojectdetail.FieldDeletedTime, field.TypeTime, value)
	}
	if rpduo.mutation.DeletedTimeCleared() {
		_spec.ClearField(reviewprojectdetail.FieldDeletedTime, field.TypeTime)
	}
	if value, ok := rpduo.mutation.ModifiedTime(); ok {
		_spec.SetField(reviewprojectdetail.FieldModifiedTime, field.TypeTime, value)
	}
	if rpduo.mutation.ModifiedTimeCleared() {
		_spec.ClearField(reviewprojectdetail.FieldModifiedTime, field.TypeTime)
	}
	if rpduo.mutation.ReviewProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reviewprojectdetail.ReviewProjectTable,
			Columns: []string{reviewprojectdetail.ReviewProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reviewproject.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpduo.mutation.ReviewProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reviewprojectdetail.ReviewProjectTable,
			Columns: []string{reviewprojectdetail.ReviewProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reviewproject.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReviewProjectDetail{config: rpduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reviewprojectdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rpduo.mutation.done = true
	return _node, nil
}
