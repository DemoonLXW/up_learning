// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/DemoonLXW/up_learning/database/ent/file"
	"github.com/DemoonLXW/up_learning/database/ent/project"
	"github.com/DemoonLXW/up_learning/database/ent/projectfile"
)

// ProjectFile is the model entity for the ProjectFile schema.
type ProjectFile struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Pid holds the value of the "pid" field.
	Pid uint32 `json:"pid,omitempty"`
	// Fid holds the value of the "fid" field.
	Fid uint32 `json:"fid,omitempty"`
	// CreatedTime holds the value of the "created_time" field.
	CreatedTime *time.Time `json:"created_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectFileQuery when eager-loading is set.
	Edges        ProjectFileEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProjectFileEdges holds the relations/edges for other nodes in the graph.
type ProjectFileEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// Files holds the value of the files edge.
	Files *File `json:"files,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectFileEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[0] {
		if e.Project == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectFileEdges) FilesOrErr() (*File, error) {
	if e.loadedTypes[1] {
		if e.Files == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: file.Label}
		}
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectFile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectfile.FieldID, projectfile.FieldPid, projectfile.FieldFid:
			values[i] = new(sql.NullInt64)
		case projectfile.FieldCreatedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectFile fields.
func (pf *ProjectFile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectfile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pf.ID = int(value.Int64)
		case projectfile.FieldPid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pid", values[i])
			} else if value.Valid {
				pf.Pid = uint32(value.Int64)
			}
		case projectfile.FieldFid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fid", values[i])
			} else if value.Valid {
				pf.Fid = uint32(value.Int64)
			}
		case projectfile.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				pf.CreatedTime = new(time.Time)
				*pf.CreatedTime = value.Time
			}
		default:
			pf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProjectFile.
// This includes values selected through modifiers, order, etc.
func (pf *ProjectFile) Value(name string) (ent.Value, error) {
	return pf.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the ProjectFile entity.
func (pf *ProjectFile) QueryProject() *ProjectQuery {
	return NewProjectFileClient(pf.config).QueryProject(pf)
}

// QueryFiles queries the "files" edge of the ProjectFile entity.
func (pf *ProjectFile) QueryFiles() *FileQuery {
	return NewProjectFileClient(pf.config).QueryFiles(pf)
}

// Update returns a builder for updating this ProjectFile.
// Note that you need to call ProjectFile.Unwrap() before calling this method if this ProjectFile
// was returned from a transaction, and the transaction was committed or rolled back.
func (pf *ProjectFile) Update() *ProjectFileUpdateOne {
	return NewProjectFileClient(pf.config).UpdateOne(pf)
}

// Unwrap unwraps the ProjectFile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pf *ProjectFile) Unwrap() *ProjectFile {
	_tx, ok := pf.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectFile is not a transactional entity")
	}
	pf.config.driver = _tx.drv
	return pf
}

// String implements the fmt.Stringer.
func (pf *ProjectFile) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectFile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pf.ID))
	builder.WriteString("pid=")
	builder.WriteString(fmt.Sprintf("%v", pf.Pid))
	builder.WriteString(", ")
	builder.WriteString("fid=")
	builder.WriteString(fmt.Sprintf("%v", pf.Fid))
	builder.WriteString(", ")
	if v := pf.CreatedTime; v != nil {
		builder.WriteString("created_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ProjectFiles is a parsable slice of ProjectFile.
type ProjectFiles []*ProjectFile
