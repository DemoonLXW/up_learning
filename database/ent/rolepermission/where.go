// Code generated by ent, DO NOT EDIT.

package rolepermission

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/DemoonLXW/up_learning/database/ent/predicate"
)

// Rid applies equality check predicate on the "rid" field. It's identical to RidEQ.
func Rid(v uint8) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldEQ(FieldRid, v))
}

// Pid applies equality check predicate on the "pid" field. It's identical to PidEQ.
func Pid(v uint16) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldEQ(FieldPid, v))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldEQ(FieldCreatedTime, v))
}

// RidEQ applies the EQ predicate on the "rid" field.
func RidEQ(v uint8) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldEQ(FieldRid, v))
}

// RidNEQ applies the NEQ predicate on the "rid" field.
func RidNEQ(v uint8) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldNEQ(FieldRid, v))
}

// RidIn applies the In predicate on the "rid" field.
func RidIn(vs ...uint8) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldIn(FieldRid, vs...))
}

// RidNotIn applies the NotIn predicate on the "rid" field.
func RidNotIn(vs ...uint8) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldNotIn(FieldRid, vs...))
}

// PidEQ applies the EQ predicate on the "pid" field.
func PidEQ(v uint16) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldEQ(FieldPid, v))
}

// PidNEQ applies the NEQ predicate on the "pid" field.
func PidNEQ(v uint16) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldNEQ(FieldPid, v))
}

// PidIn applies the In predicate on the "pid" field.
func PidIn(vs ...uint16) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldIn(FieldPid, vs...))
}

// PidNotIn applies the NotIn predicate on the "pid" field.
func PidNotIn(vs ...uint16) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldNotIn(FieldPid, vs...))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.RolePermission {
	return predicate.RolePermission(sql.FieldLTE(FieldCreatedTime, v))
}

// HasRole applies the HasEdge predicate on the "role" edge.
func HasRole() predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, RoleColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, RoleTable, RoleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleWith applies the HasEdge predicate on the "role" edge with a given conditions (other predicates).
func HasRoleWith(preds ...predicate.Role) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		step := newRoleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPermission applies the HasEdge predicate on the "permission" edge.
func HasPermission() predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, PermissionColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, PermissionTable, PermissionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPermissionWith applies the HasEdge predicate on the "permission" edge with a given conditions (other predicates).
func HasPermissionWith(preds ...predicate.Permission) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		step := newPermissionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RolePermission) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RolePermission) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RolePermission) predicate.RolePermission {
	return predicate.RolePermission(func(s *sql.Selector) {
		p(s.Not())
	})
}
