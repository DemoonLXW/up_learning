// Code generated by ent, DO NOT EDIT.

package school

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/DemoonLXW/up_learning/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint16) predicate.School {
	return predicate.School(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint16) predicate.School {
	return predicate.School(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint16) predicate.School {
	return predicate.School(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint16) predicate.School {
	return predicate.School(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint16) predicate.School {
	return predicate.School(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint16) predicate.School {
	return predicate.School(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint16) predicate.School {
	return predicate.School(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint16) predicate.School {
	return predicate.School(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint16) predicate.School {
	return predicate.School(sql.FieldLTE(FieldID, id))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.School {
	return predicate.School(sql.FieldEQ(FieldCode, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.School {
	return predicate.School(sql.FieldEQ(FieldName, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.School {
	return predicate.School(sql.FieldEQ(FieldLocation, v))
}

// CompetentDepartment applies equality check predicate on the "competent_department" field. It's identical to CompetentDepartmentEQ.
func CompetentDepartment(v string) predicate.School {
	return predicate.School(sql.FieldEQ(FieldCompetentDepartment, v))
}

// EducationLevel applies equality check predicate on the "education_level" field. It's identical to EducationLevelEQ.
func EducationLevel(v uint8) predicate.School {
	return predicate.School(sql.FieldEQ(FieldEducationLevel, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.School {
	return predicate.School(sql.FieldEQ(FieldRemark, v))
}

// IsDisabled applies equality check predicate on the "is_disabled" field. It's identical to IsDisabledEQ.
func IsDisabled(v bool) predicate.School {
	return predicate.School(sql.FieldEQ(FieldIsDisabled, v))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.School {
	return predicate.School(sql.FieldEQ(FieldCreatedTime, v))
}

// DeletedTime applies equality check predicate on the "deleted_time" field. It's identical to DeletedTimeEQ.
func DeletedTime(v time.Time) predicate.School {
	return predicate.School(sql.FieldEQ(FieldDeletedTime, v))
}

// ModifiedTime applies equality check predicate on the "modified_time" field. It's identical to ModifiedTimeEQ.
func ModifiedTime(v time.Time) predicate.School {
	return predicate.School(sql.FieldEQ(FieldModifiedTime, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.School {
	return predicate.School(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.School {
	return predicate.School(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.School {
	return predicate.School(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.School {
	return predicate.School(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.School {
	return predicate.School(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.School {
	return predicate.School(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.School {
	return predicate.School(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.School {
	return predicate.School(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.School {
	return predicate.School(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.School {
	return predicate.School(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.School {
	return predicate.School(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.School {
	return predicate.School(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.School {
	return predicate.School(sql.FieldContainsFold(FieldCode, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.School {
	return predicate.School(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.School {
	return predicate.School(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.School {
	return predicate.School(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.School {
	return predicate.School(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.School {
	return predicate.School(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.School {
	return predicate.School(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.School {
	return predicate.School(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.School {
	return predicate.School(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.School {
	return predicate.School(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.School {
	return predicate.School(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.School {
	return predicate.School(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.School {
	return predicate.School(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.School {
	return predicate.School(sql.FieldContainsFold(FieldName, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.School {
	return predicate.School(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.School {
	return predicate.School(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.School {
	return predicate.School(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.School {
	return predicate.School(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.School {
	return predicate.School(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.School {
	return predicate.School(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.School {
	return predicate.School(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.School {
	return predicate.School(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.School {
	return predicate.School(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.School {
	return predicate.School(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.School {
	return predicate.School(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.School {
	return predicate.School(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.School {
	return predicate.School(sql.FieldContainsFold(FieldLocation, v))
}

// CompetentDepartmentEQ applies the EQ predicate on the "competent_department" field.
func CompetentDepartmentEQ(v string) predicate.School {
	return predicate.School(sql.FieldEQ(FieldCompetentDepartment, v))
}

// CompetentDepartmentNEQ applies the NEQ predicate on the "competent_department" field.
func CompetentDepartmentNEQ(v string) predicate.School {
	return predicate.School(sql.FieldNEQ(FieldCompetentDepartment, v))
}

// CompetentDepartmentIn applies the In predicate on the "competent_department" field.
func CompetentDepartmentIn(vs ...string) predicate.School {
	return predicate.School(sql.FieldIn(FieldCompetentDepartment, vs...))
}

// CompetentDepartmentNotIn applies the NotIn predicate on the "competent_department" field.
func CompetentDepartmentNotIn(vs ...string) predicate.School {
	return predicate.School(sql.FieldNotIn(FieldCompetentDepartment, vs...))
}

// CompetentDepartmentGT applies the GT predicate on the "competent_department" field.
func CompetentDepartmentGT(v string) predicate.School {
	return predicate.School(sql.FieldGT(FieldCompetentDepartment, v))
}

// CompetentDepartmentGTE applies the GTE predicate on the "competent_department" field.
func CompetentDepartmentGTE(v string) predicate.School {
	return predicate.School(sql.FieldGTE(FieldCompetentDepartment, v))
}

// CompetentDepartmentLT applies the LT predicate on the "competent_department" field.
func CompetentDepartmentLT(v string) predicate.School {
	return predicate.School(sql.FieldLT(FieldCompetentDepartment, v))
}

// CompetentDepartmentLTE applies the LTE predicate on the "competent_department" field.
func CompetentDepartmentLTE(v string) predicate.School {
	return predicate.School(sql.FieldLTE(FieldCompetentDepartment, v))
}

// CompetentDepartmentContains applies the Contains predicate on the "competent_department" field.
func CompetentDepartmentContains(v string) predicate.School {
	return predicate.School(sql.FieldContains(FieldCompetentDepartment, v))
}

// CompetentDepartmentHasPrefix applies the HasPrefix predicate on the "competent_department" field.
func CompetentDepartmentHasPrefix(v string) predicate.School {
	return predicate.School(sql.FieldHasPrefix(FieldCompetentDepartment, v))
}

// CompetentDepartmentHasSuffix applies the HasSuffix predicate on the "competent_department" field.
func CompetentDepartmentHasSuffix(v string) predicate.School {
	return predicate.School(sql.FieldHasSuffix(FieldCompetentDepartment, v))
}

// CompetentDepartmentEqualFold applies the EqualFold predicate on the "competent_department" field.
func CompetentDepartmentEqualFold(v string) predicate.School {
	return predicate.School(sql.FieldEqualFold(FieldCompetentDepartment, v))
}

// CompetentDepartmentContainsFold applies the ContainsFold predicate on the "competent_department" field.
func CompetentDepartmentContainsFold(v string) predicate.School {
	return predicate.School(sql.FieldContainsFold(FieldCompetentDepartment, v))
}

// EducationLevelEQ applies the EQ predicate on the "education_level" field.
func EducationLevelEQ(v uint8) predicate.School {
	return predicate.School(sql.FieldEQ(FieldEducationLevel, v))
}

// EducationLevelNEQ applies the NEQ predicate on the "education_level" field.
func EducationLevelNEQ(v uint8) predicate.School {
	return predicate.School(sql.FieldNEQ(FieldEducationLevel, v))
}

// EducationLevelIn applies the In predicate on the "education_level" field.
func EducationLevelIn(vs ...uint8) predicate.School {
	return predicate.School(sql.FieldIn(FieldEducationLevel, vs...))
}

// EducationLevelNotIn applies the NotIn predicate on the "education_level" field.
func EducationLevelNotIn(vs ...uint8) predicate.School {
	return predicate.School(sql.FieldNotIn(FieldEducationLevel, vs...))
}

// EducationLevelGT applies the GT predicate on the "education_level" field.
func EducationLevelGT(v uint8) predicate.School {
	return predicate.School(sql.FieldGT(FieldEducationLevel, v))
}

// EducationLevelGTE applies the GTE predicate on the "education_level" field.
func EducationLevelGTE(v uint8) predicate.School {
	return predicate.School(sql.FieldGTE(FieldEducationLevel, v))
}

// EducationLevelLT applies the LT predicate on the "education_level" field.
func EducationLevelLT(v uint8) predicate.School {
	return predicate.School(sql.FieldLT(FieldEducationLevel, v))
}

// EducationLevelLTE applies the LTE predicate on the "education_level" field.
func EducationLevelLTE(v uint8) predicate.School {
	return predicate.School(sql.FieldLTE(FieldEducationLevel, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.School {
	return predicate.School(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.School {
	return predicate.School(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.School {
	return predicate.School(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.School {
	return predicate.School(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.School {
	return predicate.School(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.School {
	return predicate.School(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.School {
	return predicate.School(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.School {
	return predicate.School(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.School {
	return predicate.School(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.School {
	return predicate.School(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.School {
	return predicate.School(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.School {
	return predicate.School(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.School {
	return predicate.School(sql.FieldContainsFold(FieldRemark, v))
}

// IsDisabledEQ applies the EQ predicate on the "is_disabled" field.
func IsDisabledEQ(v bool) predicate.School {
	return predicate.School(sql.FieldEQ(FieldIsDisabled, v))
}

// IsDisabledNEQ applies the NEQ predicate on the "is_disabled" field.
func IsDisabledNEQ(v bool) predicate.School {
	return predicate.School(sql.FieldNEQ(FieldIsDisabled, v))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.School {
	return predicate.School(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.School {
	return predicate.School(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.School {
	return predicate.School(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.School {
	return predicate.School(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.School {
	return predicate.School(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.School {
	return predicate.School(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.School {
	return predicate.School(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.School {
	return predicate.School(sql.FieldLTE(FieldCreatedTime, v))
}

// DeletedTimeEQ applies the EQ predicate on the "deleted_time" field.
func DeletedTimeEQ(v time.Time) predicate.School {
	return predicate.School(sql.FieldEQ(FieldDeletedTime, v))
}

// DeletedTimeNEQ applies the NEQ predicate on the "deleted_time" field.
func DeletedTimeNEQ(v time.Time) predicate.School {
	return predicate.School(sql.FieldNEQ(FieldDeletedTime, v))
}

// DeletedTimeIn applies the In predicate on the "deleted_time" field.
func DeletedTimeIn(vs ...time.Time) predicate.School {
	return predicate.School(sql.FieldIn(FieldDeletedTime, vs...))
}

// DeletedTimeNotIn applies the NotIn predicate on the "deleted_time" field.
func DeletedTimeNotIn(vs ...time.Time) predicate.School {
	return predicate.School(sql.FieldNotIn(FieldDeletedTime, vs...))
}

// DeletedTimeGT applies the GT predicate on the "deleted_time" field.
func DeletedTimeGT(v time.Time) predicate.School {
	return predicate.School(sql.FieldGT(FieldDeletedTime, v))
}

// DeletedTimeGTE applies the GTE predicate on the "deleted_time" field.
func DeletedTimeGTE(v time.Time) predicate.School {
	return predicate.School(sql.FieldGTE(FieldDeletedTime, v))
}

// DeletedTimeLT applies the LT predicate on the "deleted_time" field.
func DeletedTimeLT(v time.Time) predicate.School {
	return predicate.School(sql.FieldLT(FieldDeletedTime, v))
}

// DeletedTimeLTE applies the LTE predicate on the "deleted_time" field.
func DeletedTimeLTE(v time.Time) predicate.School {
	return predicate.School(sql.FieldLTE(FieldDeletedTime, v))
}

// DeletedTimeIsNil applies the IsNil predicate on the "deleted_time" field.
func DeletedTimeIsNil() predicate.School {
	return predicate.School(sql.FieldIsNull(FieldDeletedTime))
}

// DeletedTimeNotNil applies the NotNil predicate on the "deleted_time" field.
func DeletedTimeNotNil() predicate.School {
	return predicate.School(sql.FieldNotNull(FieldDeletedTime))
}

// ModifiedTimeEQ applies the EQ predicate on the "modified_time" field.
func ModifiedTimeEQ(v time.Time) predicate.School {
	return predicate.School(sql.FieldEQ(FieldModifiedTime, v))
}

// ModifiedTimeNEQ applies the NEQ predicate on the "modified_time" field.
func ModifiedTimeNEQ(v time.Time) predicate.School {
	return predicate.School(sql.FieldNEQ(FieldModifiedTime, v))
}

// ModifiedTimeIn applies the In predicate on the "modified_time" field.
func ModifiedTimeIn(vs ...time.Time) predicate.School {
	return predicate.School(sql.FieldIn(FieldModifiedTime, vs...))
}

// ModifiedTimeNotIn applies the NotIn predicate on the "modified_time" field.
func ModifiedTimeNotIn(vs ...time.Time) predicate.School {
	return predicate.School(sql.FieldNotIn(FieldModifiedTime, vs...))
}

// ModifiedTimeGT applies the GT predicate on the "modified_time" field.
func ModifiedTimeGT(v time.Time) predicate.School {
	return predicate.School(sql.FieldGT(FieldModifiedTime, v))
}

// ModifiedTimeGTE applies the GTE predicate on the "modified_time" field.
func ModifiedTimeGTE(v time.Time) predicate.School {
	return predicate.School(sql.FieldGTE(FieldModifiedTime, v))
}

// ModifiedTimeLT applies the LT predicate on the "modified_time" field.
func ModifiedTimeLT(v time.Time) predicate.School {
	return predicate.School(sql.FieldLT(FieldModifiedTime, v))
}

// ModifiedTimeLTE applies the LTE predicate on the "modified_time" field.
func ModifiedTimeLTE(v time.Time) predicate.School {
	return predicate.School(sql.FieldLTE(FieldModifiedTime, v))
}

// ModifiedTimeIsNil applies the IsNil predicate on the "modified_time" field.
func ModifiedTimeIsNil() predicate.School {
	return predicate.School(sql.FieldIsNull(FieldModifiedTime))
}

// ModifiedTimeNotNil applies the NotNil predicate on the "modified_time" field.
func ModifiedTimeNotNil() predicate.School {
	return predicate.School(sql.FieldNotNull(FieldModifiedTime))
}

// HasStudents applies the HasEdge predicate on the "students" edge.
func HasStudents() predicate.School {
	return predicate.School(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StudentsTable, StudentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStudentsWith applies the HasEdge predicate on the "students" edge with a given conditions (other predicates).
func HasStudentsWith(preds ...predicate.Student) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		step := newStudentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.School) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.School) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.School) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		p(s.Not())
	})
}
