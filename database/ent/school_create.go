// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DemoonLXW/up_learning/database/ent/school"
	"github.com/DemoonLXW/up_learning/database/ent/student"
)

// SchoolCreate is the builder for creating a School entity.
type SchoolCreate struct {
	config
	mutation *SchoolMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (sc *SchoolCreate) SetCode(s string) *SchoolCreate {
	sc.mutation.SetCode(s)
	return sc
}

// SetName sets the "name" field.
func (sc *SchoolCreate) SetName(s string) *SchoolCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetLocation sets the "location" field.
func (sc *SchoolCreate) SetLocation(s string) *SchoolCreate {
	sc.mutation.SetLocation(s)
	return sc
}

// SetCompetentDepartment sets the "competent_department" field.
func (sc *SchoolCreate) SetCompetentDepartment(s string) *SchoolCreate {
	sc.mutation.SetCompetentDepartment(s)
	return sc
}

// SetEducationLevel sets the "education_level" field.
func (sc *SchoolCreate) SetEducationLevel(u uint8) *SchoolCreate {
	sc.mutation.SetEducationLevel(u)
	return sc
}

// SetRemark sets the "remark" field.
func (sc *SchoolCreate) SetRemark(s string) *SchoolCreate {
	sc.mutation.SetRemark(s)
	return sc
}

// SetIsDisabled sets the "is_disabled" field.
func (sc *SchoolCreate) SetIsDisabled(b bool) *SchoolCreate {
	sc.mutation.SetIsDisabled(b)
	return sc
}

// SetNillableIsDisabled sets the "is_disabled" field if the given value is not nil.
func (sc *SchoolCreate) SetNillableIsDisabled(b *bool) *SchoolCreate {
	if b != nil {
		sc.SetIsDisabled(*b)
	}
	return sc
}

// SetCreatedTime sets the "created_time" field.
func (sc *SchoolCreate) SetCreatedTime(t time.Time) *SchoolCreate {
	sc.mutation.SetCreatedTime(t)
	return sc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (sc *SchoolCreate) SetNillableCreatedTime(t *time.Time) *SchoolCreate {
	if t != nil {
		sc.SetCreatedTime(*t)
	}
	return sc
}

// SetDeletedTime sets the "deleted_time" field.
func (sc *SchoolCreate) SetDeletedTime(t time.Time) *SchoolCreate {
	sc.mutation.SetDeletedTime(t)
	return sc
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (sc *SchoolCreate) SetNillableDeletedTime(t *time.Time) *SchoolCreate {
	if t != nil {
		sc.SetDeletedTime(*t)
	}
	return sc
}

// SetModifiedTime sets the "modified_time" field.
func (sc *SchoolCreate) SetModifiedTime(t time.Time) *SchoolCreate {
	sc.mutation.SetModifiedTime(t)
	return sc
}

// SetNillableModifiedTime sets the "modified_time" field if the given value is not nil.
func (sc *SchoolCreate) SetNillableModifiedTime(t *time.Time) *SchoolCreate {
	if t != nil {
		sc.SetModifiedTime(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SchoolCreate) SetID(u uint16) *SchoolCreate {
	sc.mutation.SetID(u)
	return sc
}

// AddStudentIDs adds the "students" edge to the Student entity by IDs.
func (sc *SchoolCreate) AddStudentIDs(ids ...uint32) *SchoolCreate {
	sc.mutation.AddStudentIDs(ids...)
	return sc
}

// AddStudents adds the "students" edges to the Student entity.
func (sc *SchoolCreate) AddStudents(s ...*Student) *SchoolCreate {
	ids := make([]uint32, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddStudentIDs(ids...)
}

// Mutation returns the SchoolMutation object of the builder.
func (sc *SchoolCreate) Mutation() *SchoolMutation {
	return sc.mutation
}

// Save creates the School in the database.
func (sc *SchoolCreate) Save(ctx context.Context) (*School, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SchoolCreate) SaveX(ctx context.Context) *School {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SchoolCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SchoolCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SchoolCreate) defaults() {
	if _, ok := sc.mutation.IsDisabled(); !ok {
		v := school.DefaultIsDisabled
		sc.mutation.SetIsDisabled(v)
	}
	if _, ok := sc.mutation.CreatedTime(); !ok {
		v := school.DefaultCreatedTime()
		sc.mutation.SetCreatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SchoolCreate) check() error {
	if _, ok := sc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "School.code"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "School.name"`)}
	}
	if _, ok := sc.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "School.location"`)}
	}
	if _, ok := sc.mutation.CompetentDepartment(); !ok {
		return &ValidationError{Name: "competent_department", err: errors.New(`ent: missing required field "School.competent_department"`)}
	}
	if _, ok := sc.mutation.EducationLevel(); !ok {
		return &ValidationError{Name: "education_level", err: errors.New(`ent: missing required field "School.education_level"`)}
	}
	if _, ok := sc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "School.remark"`)}
	}
	if _, ok := sc.mutation.IsDisabled(); !ok {
		return &ValidationError{Name: "is_disabled", err: errors.New(`ent: missing required field "School.is_disabled"`)}
	}
	if _, ok := sc.mutation.CreatedTime(); !ok {
		return &ValidationError{Name: "created_time", err: errors.New(`ent: missing required field "School.created_time"`)}
	}
	return nil
}

func (sc *SchoolCreate) sqlSave(ctx context.Context) (*School, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint16(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SchoolCreate) createSpec() (*School, *sqlgraph.CreateSpec) {
	var (
		_node = &School{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(school.Table, sqlgraph.NewFieldSpec(school.FieldID, field.TypeUint16))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Code(); ok {
		_spec.SetField(school.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(school.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Location(); ok {
		_spec.SetField(school.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := sc.mutation.CompetentDepartment(); ok {
		_spec.SetField(school.FieldCompetentDepartment, field.TypeString, value)
		_node.CompetentDepartment = value
	}
	if value, ok := sc.mutation.EducationLevel(); ok {
		_spec.SetField(school.FieldEducationLevel, field.TypeUint8, value)
		_node.EducationLevel = value
	}
	if value, ok := sc.mutation.Remark(); ok {
		_spec.SetField(school.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := sc.mutation.IsDisabled(); ok {
		_spec.SetField(school.FieldIsDisabled, field.TypeBool, value)
		_node.IsDisabled = value
	}
	if value, ok := sc.mutation.CreatedTime(); ok {
		_spec.SetField(school.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = &value
	}
	if value, ok := sc.mutation.DeletedTime(); ok {
		_spec.SetField(school.FieldDeletedTime, field.TypeTime, value)
		_node.DeletedTime = &value
	}
	if value, ok := sc.mutation.ModifiedTime(); ok {
		_spec.SetField(school.FieldModifiedTime, field.TypeTime, value)
		_node.ModifiedTime = &value
	}
	if nodes := sc.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   school.StudentsTable,
			Columns: []string{school.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SchoolCreateBulk is the builder for creating many School entities in bulk.
type SchoolCreateBulk struct {
	config
	builders []*SchoolCreate
}

// Save creates the School entities in the database.
func (scb *SchoolCreateBulk) Save(ctx context.Context) ([]*School, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*School, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SchoolMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint16(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SchoolCreateBulk) SaveX(ctx context.Context) []*School {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SchoolCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SchoolCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
