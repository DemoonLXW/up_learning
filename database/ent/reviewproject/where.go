// Code generated by ent, DO NOT EDIT.

package reviewproject

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/DemoonLXW/up_learning/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldLTE(FieldID, id))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v uint32) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldEQ(FieldProjectID, v))
}

// WorkflowID applies equality check predicate on the "workflow_id" field. It's identical to WorkflowIDEQ.
func WorkflowID(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldEQ(FieldWorkflowID, v))
}

// RunID applies equality check predicate on the "run_id" field. It's identical to RunIDEQ.
func RunID(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldEQ(FieldRunID, v))
}

// ApplicantID applies equality check predicate on the "applicant_id" field. It's identical to ApplicantIDEQ.
func ApplicantID(v uint32) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldEQ(FieldApplicantID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldEQ(FieldStatus, v))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldEQ(FieldCreatedTime, v))
}

// DeletedTime applies equality check predicate on the "deleted_time" field. It's identical to DeletedTimeEQ.
func DeletedTime(v time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldEQ(FieldDeletedTime, v))
}

// ModifiedTime applies equality check predicate on the "modified_time" field. It's identical to ModifiedTimeEQ.
func ModifiedTime(v time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldEQ(FieldModifiedTime, v))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v uint32) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v uint32) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...uint32) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...uint32) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldNotIn(FieldProjectID, vs...))
}

// WorkflowIDEQ applies the EQ predicate on the "workflow_id" field.
func WorkflowIDEQ(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldEQ(FieldWorkflowID, v))
}

// WorkflowIDNEQ applies the NEQ predicate on the "workflow_id" field.
func WorkflowIDNEQ(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldNEQ(FieldWorkflowID, v))
}

// WorkflowIDIn applies the In predicate on the "workflow_id" field.
func WorkflowIDIn(vs ...string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldIn(FieldWorkflowID, vs...))
}

// WorkflowIDNotIn applies the NotIn predicate on the "workflow_id" field.
func WorkflowIDNotIn(vs ...string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldNotIn(FieldWorkflowID, vs...))
}

// WorkflowIDGT applies the GT predicate on the "workflow_id" field.
func WorkflowIDGT(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldGT(FieldWorkflowID, v))
}

// WorkflowIDGTE applies the GTE predicate on the "workflow_id" field.
func WorkflowIDGTE(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldGTE(FieldWorkflowID, v))
}

// WorkflowIDLT applies the LT predicate on the "workflow_id" field.
func WorkflowIDLT(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldLT(FieldWorkflowID, v))
}

// WorkflowIDLTE applies the LTE predicate on the "workflow_id" field.
func WorkflowIDLTE(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldLTE(FieldWorkflowID, v))
}

// WorkflowIDContains applies the Contains predicate on the "workflow_id" field.
func WorkflowIDContains(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldContains(FieldWorkflowID, v))
}

// WorkflowIDHasPrefix applies the HasPrefix predicate on the "workflow_id" field.
func WorkflowIDHasPrefix(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldHasPrefix(FieldWorkflowID, v))
}

// WorkflowIDHasSuffix applies the HasSuffix predicate on the "workflow_id" field.
func WorkflowIDHasSuffix(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldHasSuffix(FieldWorkflowID, v))
}

// WorkflowIDEqualFold applies the EqualFold predicate on the "workflow_id" field.
func WorkflowIDEqualFold(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldEqualFold(FieldWorkflowID, v))
}

// WorkflowIDContainsFold applies the ContainsFold predicate on the "workflow_id" field.
func WorkflowIDContainsFold(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldContainsFold(FieldWorkflowID, v))
}

// RunIDEQ applies the EQ predicate on the "run_id" field.
func RunIDEQ(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldEQ(FieldRunID, v))
}

// RunIDNEQ applies the NEQ predicate on the "run_id" field.
func RunIDNEQ(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldNEQ(FieldRunID, v))
}

// RunIDIn applies the In predicate on the "run_id" field.
func RunIDIn(vs ...string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldIn(FieldRunID, vs...))
}

// RunIDNotIn applies the NotIn predicate on the "run_id" field.
func RunIDNotIn(vs ...string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldNotIn(FieldRunID, vs...))
}

// RunIDGT applies the GT predicate on the "run_id" field.
func RunIDGT(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldGT(FieldRunID, v))
}

// RunIDGTE applies the GTE predicate on the "run_id" field.
func RunIDGTE(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldGTE(FieldRunID, v))
}

// RunIDLT applies the LT predicate on the "run_id" field.
func RunIDLT(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldLT(FieldRunID, v))
}

// RunIDLTE applies the LTE predicate on the "run_id" field.
func RunIDLTE(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldLTE(FieldRunID, v))
}

// RunIDContains applies the Contains predicate on the "run_id" field.
func RunIDContains(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldContains(FieldRunID, v))
}

// RunIDHasPrefix applies the HasPrefix predicate on the "run_id" field.
func RunIDHasPrefix(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldHasPrefix(FieldRunID, v))
}

// RunIDHasSuffix applies the HasSuffix predicate on the "run_id" field.
func RunIDHasSuffix(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldHasSuffix(FieldRunID, v))
}

// RunIDEqualFold applies the EqualFold predicate on the "run_id" field.
func RunIDEqualFold(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldEqualFold(FieldRunID, v))
}

// RunIDContainsFold applies the ContainsFold predicate on the "run_id" field.
func RunIDContainsFold(v string) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldContainsFold(FieldRunID, v))
}

// ApplicantIDEQ applies the EQ predicate on the "applicant_id" field.
func ApplicantIDEQ(v uint32) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldEQ(FieldApplicantID, v))
}

// ApplicantIDNEQ applies the NEQ predicate on the "applicant_id" field.
func ApplicantIDNEQ(v uint32) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldNEQ(FieldApplicantID, v))
}

// ApplicantIDIn applies the In predicate on the "applicant_id" field.
func ApplicantIDIn(vs ...uint32) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldIn(FieldApplicantID, vs...))
}

// ApplicantIDNotIn applies the NotIn predicate on the "applicant_id" field.
func ApplicantIDNotIn(vs ...uint32) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldNotIn(FieldApplicantID, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldLTE(FieldStatus, v))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldLTE(FieldCreatedTime, v))
}

// DeletedTimeEQ applies the EQ predicate on the "deleted_time" field.
func DeletedTimeEQ(v time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldEQ(FieldDeletedTime, v))
}

// DeletedTimeNEQ applies the NEQ predicate on the "deleted_time" field.
func DeletedTimeNEQ(v time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldNEQ(FieldDeletedTime, v))
}

// DeletedTimeIn applies the In predicate on the "deleted_time" field.
func DeletedTimeIn(vs ...time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldIn(FieldDeletedTime, vs...))
}

// DeletedTimeNotIn applies the NotIn predicate on the "deleted_time" field.
func DeletedTimeNotIn(vs ...time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldNotIn(FieldDeletedTime, vs...))
}

// DeletedTimeGT applies the GT predicate on the "deleted_time" field.
func DeletedTimeGT(v time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldGT(FieldDeletedTime, v))
}

// DeletedTimeGTE applies the GTE predicate on the "deleted_time" field.
func DeletedTimeGTE(v time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldGTE(FieldDeletedTime, v))
}

// DeletedTimeLT applies the LT predicate on the "deleted_time" field.
func DeletedTimeLT(v time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldLT(FieldDeletedTime, v))
}

// DeletedTimeLTE applies the LTE predicate on the "deleted_time" field.
func DeletedTimeLTE(v time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldLTE(FieldDeletedTime, v))
}

// DeletedTimeIsNil applies the IsNil predicate on the "deleted_time" field.
func DeletedTimeIsNil() predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldIsNull(FieldDeletedTime))
}

// DeletedTimeNotNil applies the NotNil predicate on the "deleted_time" field.
func DeletedTimeNotNil() predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldNotNull(FieldDeletedTime))
}

// ModifiedTimeEQ applies the EQ predicate on the "modified_time" field.
func ModifiedTimeEQ(v time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldEQ(FieldModifiedTime, v))
}

// ModifiedTimeNEQ applies the NEQ predicate on the "modified_time" field.
func ModifiedTimeNEQ(v time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldNEQ(FieldModifiedTime, v))
}

// ModifiedTimeIn applies the In predicate on the "modified_time" field.
func ModifiedTimeIn(vs ...time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldIn(FieldModifiedTime, vs...))
}

// ModifiedTimeNotIn applies the NotIn predicate on the "modified_time" field.
func ModifiedTimeNotIn(vs ...time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldNotIn(FieldModifiedTime, vs...))
}

// ModifiedTimeGT applies the GT predicate on the "modified_time" field.
func ModifiedTimeGT(v time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldGT(FieldModifiedTime, v))
}

// ModifiedTimeGTE applies the GTE predicate on the "modified_time" field.
func ModifiedTimeGTE(v time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldGTE(FieldModifiedTime, v))
}

// ModifiedTimeLT applies the LT predicate on the "modified_time" field.
func ModifiedTimeLT(v time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldLT(FieldModifiedTime, v))
}

// ModifiedTimeLTE applies the LTE predicate on the "modified_time" field.
func ModifiedTimeLTE(v time.Time) predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldLTE(FieldModifiedTime, v))
}

// ModifiedTimeIsNil applies the IsNil predicate on the "modified_time" field.
func ModifiedTimeIsNil() predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldIsNull(FieldModifiedTime))
}

// ModifiedTimeNotNil applies the NotNil predicate on the "modified_time" field.
func ModifiedTimeNotNil() predicate.ReviewProject {
	return predicate.ReviewProject(sql.FieldNotNull(FieldModifiedTime))
}

// HasApplicant applies the HasEdge predicate on the "applicant" edge.
func HasApplicant() predicate.ReviewProject {
	return predicate.ReviewProject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ApplicantTable, ApplicantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplicantWith applies the HasEdge predicate on the "applicant" edge with a given conditions (other predicates).
func HasApplicantWith(preds ...predicate.User) predicate.ReviewProject {
	return predicate.ReviewProject(func(s *sql.Selector) {
		step := newApplicantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.ReviewProject {
	return predicate.ReviewProject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.ReviewProject {
	return predicate.ReviewProject(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReviewProjectDetail applies the HasEdge predicate on the "review_project_detail" edge.
func HasReviewProjectDetail() predicate.ReviewProject {
	return predicate.ReviewProject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReviewProjectDetailTable, ReviewProjectDetailColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReviewProjectDetailWith applies the HasEdge predicate on the "review_project_detail" edge with a given conditions (other predicates).
func HasReviewProjectDetailWith(preds ...predicate.ReviewProjectDetail) predicate.ReviewProject {
	return predicate.ReviewProject(func(s *sql.Selector) {
		step := newReviewProjectDetailStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ReviewProject) predicate.ReviewProject {
	return predicate.ReviewProject(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ReviewProject) predicate.ReviewProject {
	return predicate.ReviewProject(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReviewProject) predicate.ReviewProject {
	return predicate.ReviewProject(func(s *sql.Selector) {
		p(s.Not())
	})
}
