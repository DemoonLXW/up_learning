// Code generated by ent, DO NOT EDIT.

package reviewproject

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the reviewproject type in the database.
	Label = "review_project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProjectID holds the string denoting the project_id field in the database.
	FieldProjectID = "project_id"
	// FieldWorkflowID holds the string denoting the workflow_id field in the database.
	FieldWorkflowID = "workflow_id"
	// FieldRunID holds the string denoting the run_id field in the database.
	FieldRunID = "run_id"
	// FieldApplicantID holds the string denoting the applicant_id field in the database.
	FieldApplicantID = "applicant_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// FieldDeletedTime holds the string denoting the deleted_time field in the database.
	FieldDeletedTime = "deleted_time"
	// FieldModifiedTime holds the string denoting the modified_time field in the database.
	FieldModifiedTime = "modified_time"
	// EdgeApplicant holds the string denoting the applicant edge name in mutations.
	EdgeApplicant = "applicant"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeReviewProjectDetail holds the string denoting the review_project_detail edge name in mutations.
	EdgeReviewProjectDetail = "review_project_detail"
	// Table holds the table name of the reviewproject in the database.
	Table = "review_project"
	// ApplicantTable is the table that holds the applicant relation/edge.
	ApplicantTable = "review_project"
	// ApplicantInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ApplicantInverseTable = "user"
	// ApplicantColumn is the table column denoting the applicant relation/edge.
	ApplicantColumn = "applicant_id"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "review_project"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "project"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_id"
	// ReviewProjectDetailTable is the table that holds the review_project_detail relation/edge.
	ReviewProjectDetailTable = "review_project_detail"
	// ReviewProjectDetailInverseTable is the table name for the ReviewProjectDetail entity.
	// It exists in this package in order to avoid circular dependency with the "reviewprojectdetail" package.
	ReviewProjectDetailInverseTable = "review_project_detail"
	// ReviewProjectDetailColumn is the table column denoting the review_project_detail relation/edge.
	ReviewProjectDetailColumn = "review_project_id"
)

// Columns holds all SQL columns for reviewproject fields.
var Columns = []string{
	FieldID,
	FieldProjectID,
	FieldWorkflowID,
	FieldRunID,
	FieldApplicantID,
	FieldStatus,
	FieldCreatedTime,
	FieldDeletedTime,
	FieldModifiedTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedTime holds the default value on creation for the "created_time" field.
	DefaultCreatedTime func() time.Time
)

// OrderOption defines the ordering options for the ReviewProject queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProjectID orders the results by the project_id field.
func ByProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectID, opts...).ToFunc()
}

// ByWorkflowID orders the results by the workflow_id field.
func ByWorkflowID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkflowID, opts...).ToFunc()
}

// ByRunID orders the results by the run_id field.
func ByRunID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRunID, opts...).ToFunc()
}

// ByApplicantID orders the results by the applicant_id field.
func ByApplicantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicantID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedTime orders the results by the created_time field.
func ByCreatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTime, opts...).ToFunc()
}

// ByDeletedTime orders the results by the deleted_time field.
func ByDeletedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedTime, opts...).ToFunc()
}

// ByModifiedTime orders the results by the modified_time field.
func ByModifiedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedTime, opts...).ToFunc()
}

// ByApplicantField orders the results by applicant field.
func ByApplicantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicantStep(), sql.OrderByField(field, opts...))
	}
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByReviewProjectDetailCount orders the results by review_project_detail count.
func ByReviewProjectDetailCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReviewProjectDetailStep(), opts...)
	}
}

// ByReviewProjectDetail orders the results by review_project_detail terms.
func ByReviewProjectDetail(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReviewProjectDetailStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newApplicantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ApplicantTable, ApplicantColumn),
	)
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
	)
}
func newReviewProjectDetailStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReviewProjectDetailInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReviewProjectDetailTable, ReviewProjectDetailColumn),
	)
}
