// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/DemoonLXW/up_learning/database/ent/menu"
	"github.com/DemoonLXW/up_learning/database/ent/predicate"
	"github.com/DemoonLXW/up_learning/database/ent/role"
	"github.com/DemoonLXW/up_learning/entity"
)

// MenuUpdate is the builder for updating Menu entities.
type MenuUpdate struct {
	config
	hooks    []Hook
	mutation *MenuMutation
}

// Where appends a list predicates to the MenuUpdate builder.
func (mu *MenuUpdate) Where(ps ...predicate.Menu) *MenuUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetName sets the "name" field.
func (mu *MenuUpdate) SetName(s string) *MenuUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetJSONMenu sets the "json_menu" field.
func (mu *MenuUpdate) SetJSONMenu(e []*entity.Menu) *MenuUpdate {
	mu.mutation.SetJSONMenu(e)
	return mu
}

// AppendJSONMenu appends e to the "json_menu" field.
func (mu *MenuUpdate) AppendJSONMenu(e []*entity.Menu) *MenuUpdate {
	mu.mutation.AppendJSONMenu(e)
	return mu
}

// ClearJSONMenu clears the value of the "json_menu" field.
func (mu *MenuUpdate) ClearJSONMenu() *MenuUpdate {
	mu.mutation.ClearJSONMenu()
	return mu
}

// SetRid sets the "rid" field.
func (mu *MenuUpdate) SetRid(u uint8) *MenuUpdate {
	mu.mutation.SetRid(u)
	return mu
}

// SetCreatedTime sets the "created_time" field.
func (mu *MenuUpdate) SetCreatedTime(t time.Time) *MenuUpdate {
	mu.mutation.SetCreatedTime(t)
	return mu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableCreatedTime(t *time.Time) *MenuUpdate {
	if t != nil {
		mu.SetCreatedTime(*t)
	}
	return mu
}

// SetDeletedTime sets the "deleted_time" field.
func (mu *MenuUpdate) SetDeletedTime(t time.Time) *MenuUpdate {
	mu.mutation.SetDeletedTime(t)
	return mu
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableDeletedTime(t *time.Time) *MenuUpdate {
	if t != nil {
		mu.SetDeletedTime(*t)
	}
	return mu
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (mu *MenuUpdate) ClearDeletedTime() *MenuUpdate {
	mu.mutation.ClearDeletedTime()
	return mu
}

// SetModifiedTime sets the "modified_time" field.
func (mu *MenuUpdate) SetModifiedTime(t time.Time) *MenuUpdate {
	mu.mutation.SetModifiedTime(t)
	return mu
}

// SetNillableModifiedTime sets the "modified_time" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableModifiedTime(t *time.Time) *MenuUpdate {
	if t != nil {
		mu.SetModifiedTime(*t)
	}
	return mu
}

// ClearModifiedTime clears the value of the "modified_time" field.
func (mu *MenuUpdate) ClearModifiedTime() *MenuUpdate {
	mu.mutation.ClearModifiedTime()
	return mu
}

// SetIsDisabled sets the "is_disabled" field.
func (mu *MenuUpdate) SetIsDisabled(b bool) *MenuUpdate {
	mu.mutation.SetIsDisabled(b)
	return mu
}

// SetNillableIsDisabled sets the "is_disabled" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableIsDisabled(b *bool) *MenuUpdate {
	if b != nil {
		mu.SetIsDisabled(*b)
	}
	return mu
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (mu *MenuUpdate) SetRoleID(id uint8) *MenuUpdate {
	mu.mutation.SetRoleID(id)
	return mu
}

// SetRole sets the "role" edge to the Role entity.
func (mu *MenuUpdate) SetRole(r *Role) *MenuUpdate {
	return mu.SetRoleID(r.ID)
}

// Mutation returns the MenuMutation object of the builder.
func (mu *MenuUpdate) Mutation() *MenuMutation {
	return mu.mutation
}

// ClearRole clears the "role" edge to the Role entity.
func (mu *MenuUpdate) ClearRole() *MenuUpdate {
	mu.mutation.ClearRole()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MenuUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MenuUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MenuUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MenuUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MenuUpdate) check() error {
	if v, ok := mu.mutation.Name(); ok {
		if err := menu.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Menu.name": %w`, err)}
		}
	}
	if _, ok := mu.mutation.RoleID(); mu.mutation.RoleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Menu.role"`)
	}
	return nil
}

func (mu *MenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint8))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
	}
	if value, ok := mu.mutation.JSONMenu(); ok {
		_spec.SetField(menu.FieldJSONMenu, field.TypeJSON, value)
	}
	if value, ok := mu.mutation.AppendedJSONMenu(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, menu.FieldJSONMenu, value)
		})
	}
	if mu.mutation.JSONMenuCleared() {
		_spec.ClearField(menu.FieldJSONMenu, field.TypeJSON)
	}
	if value, ok := mu.mutation.CreatedTime(); ok {
		_spec.SetField(menu.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := mu.mutation.DeletedTime(); ok {
		_spec.SetField(menu.FieldDeletedTime, field.TypeTime, value)
	}
	if mu.mutation.DeletedTimeCleared() {
		_spec.ClearField(menu.FieldDeletedTime, field.TypeTime)
	}
	if value, ok := mu.mutation.ModifiedTime(); ok {
		_spec.SetField(menu.FieldModifiedTime, field.TypeTime, value)
	}
	if mu.mutation.ModifiedTimeCleared() {
		_spec.ClearField(menu.FieldModifiedTime, field.TypeTime)
	}
	if value, ok := mu.mutation.IsDisabled(); ok {
		_spec.SetField(menu.FieldIsDisabled, field.TypeBool, value)
	}
	if mu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.RoleTable,
			Columns: []string{menu.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint8),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.RoleTable,
			Columns: []string{menu.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint8),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MenuUpdateOne is the builder for updating a single Menu entity.
type MenuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MenuMutation
}

// SetName sets the "name" field.
func (muo *MenuUpdateOne) SetName(s string) *MenuUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetJSONMenu sets the "json_menu" field.
func (muo *MenuUpdateOne) SetJSONMenu(e []*entity.Menu) *MenuUpdateOne {
	muo.mutation.SetJSONMenu(e)
	return muo
}

// AppendJSONMenu appends e to the "json_menu" field.
func (muo *MenuUpdateOne) AppendJSONMenu(e []*entity.Menu) *MenuUpdateOne {
	muo.mutation.AppendJSONMenu(e)
	return muo
}

// ClearJSONMenu clears the value of the "json_menu" field.
func (muo *MenuUpdateOne) ClearJSONMenu() *MenuUpdateOne {
	muo.mutation.ClearJSONMenu()
	return muo
}

// SetRid sets the "rid" field.
func (muo *MenuUpdateOne) SetRid(u uint8) *MenuUpdateOne {
	muo.mutation.SetRid(u)
	return muo
}

// SetCreatedTime sets the "created_time" field.
func (muo *MenuUpdateOne) SetCreatedTime(t time.Time) *MenuUpdateOne {
	muo.mutation.SetCreatedTime(t)
	return muo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableCreatedTime(t *time.Time) *MenuUpdateOne {
	if t != nil {
		muo.SetCreatedTime(*t)
	}
	return muo
}

// SetDeletedTime sets the "deleted_time" field.
func (muo *MenuUpdateOne) SetDeletedTime(t time.Time) *MenuUpdateOne {
	muo.mutation.SetDeletedTime(t)
	return muo
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableDeletedTime(t *time.Time) *MenuUpdateOne {
	if t != nil {
		muo.SetDeletedTime(*t)
	}
	return muo
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (muo *MenuUpdateOne) ClearDeletedTime() *MenuUpdateOne {
	muo.mutation.ClearDeletedTime()
	return muo
}

// SetModifiedTime sets the "modified_time" field.
func (muo *MenuUpdateOne) SetModifiedTime(t time.Time) *MenuUpdateOne {
	muo.mutation.SetModifiedTime(t)
	return muo
}

// SetNillableModifiedTime sets the "modified_time" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableModifiedTime(t *time.Time) *MenuUpdateOne {
	if t != nil {
		muo.SetModifiedTime(*t)
	}
	return muo
}

// ClearModifiedTime clears the value of the "modified_time" field.
func (muo *MenuUpdateOne) ClearModifiedTime() *MenuUpdateOne {
	muo.mutation.ClearModifiedTime()
	return muo
}

// SetIsDisabled sets the "is_disabled" field.
func (muo *MenuUpdateOne) SetIsDisabled(b bool) *MenuUpdateOne {
	muo.mutation.SetIsDisabled(b)
	return muo
}

// SetNillableIsDisabled sets the "is_disabled" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableIsDisabled(b *bool) *MenuUpdateOne {
	if b != nil {
		muo.SetIsDisabled(*b)
	}
	return muo
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (muo *MenuUpdateOne) SetRoleID(id uint8) *MenuUpdateOne {
	muo.mutation.SetRoleID(id)
	return muo
}

// SetRole sets the "role" edge to the Role entity.
func (muo *MenuUpdateOne) SetRole(r *Role) *MenuUpdateOne {
	return muo.SetRoleID(r.ID)
}

// Mutation returns the MenuMutation object of the builder.
func (muo *MenuUpdateOne) Mutation() *MenuMutation {
	return muo.mutation
}

// ClearRole clears the "role" edge to the Role entity.
func (muo *MenuUpdateOne) ClearRole() *MenuUpdateOne {
	muo.mutation.ClearRole()
	return muo
}

// Where appends a list predicates to the MenuUpdate builder.
func (muo *MenuUpdateOne) Where(ps ...predicate.Menu) *MenuUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MenuUpdateOne) Select(field string, fields ...string) *MenuUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Menu entity.
func (muo *MenuUpdateOne) Save(ctx context.Context) (*Menu, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MenuUpdateOne) SaveX(ctx context.Context) *Menu {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MenuUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MenuUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MenuUpdateOne) check() error {
	if v, ok := muo.mutation.Name(); ok {
		if err := menu.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Menu.name": %w`, err)}
		}
	}
	if _, ok := muo.mutation.RoleID(); muo.mutation.RoleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Menu.role"`)
	}
	return nil
}

func (muo *MenuUpdateOne) sqlSave(ctx context.Context) (_node *Menu, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint8))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Menu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, menu.FieldID)
		for _, f := range fields {
			if !menu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != menu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
	}
	if value, ok := muo.mutation.JSONMenu(); ok {
		_spec.SetField(menu.FieldJSONMenu, field.TypeJSON, value)
	}
	if value, ok := muo.mutation.AppendedJSONMenu(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, menu.FieldJSONMenu, value)
		})
	}
	if muo.mutation.JSONMenuCleared() {
		_spec.ClearField(menu.FieldJSONMenu, field.TypeJSON)
	}
	if value, ok := muo.mutation.CreatedTime(); ok {
		_spec.SetField(menu.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := muo.mutation.DeletedTime(); ok {
		_spec.SetField(menu.FieldDeletedTime, field.TypeTime, value)
	}
	if muo.mutation.DeletedTimeCleared() {
		_spec.ClearField(menu.FieldDeletedTime, field.TypeTime)
	}
	if value, ok := muo.mutation.ModifiedTime(); ok {
		_spec.SetField(menu.FieldModifiedTime, field.TypeTime, value)
	}
	if muo.mutation.ModifiedTimeCleared() {
		_spec.ClearField(menu.FieldModifiedTime, field.TypeTime)
	}
	if value, ok := muo.mutation.IsDisabled(); ok {
		_spec.SetField(menu.FieldIsDisabled, field.TypeBool, value)
	}
	if muo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.RoleTable,
			Columns: []string{menu.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint8),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.RoleTable,
			Columns: []string{menu.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint8),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Menu{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
