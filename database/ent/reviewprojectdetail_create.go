// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DemoonLXW/up_learning/database/ent/reviewproject"
	"github.com/DemoonLXW/up_learning/database/ent/reviewprojectdetail"
	"github.com/DemoonLXW/up_learning/entity"
)

// ReviewProjectDetailCreate is the builder for creating a ReviewProjectDetail entity.
type ReviewProjectDetailCreate struct {
	config
	mutation *ReviewProjectDetailMutation
	hooks    []Hook
}

// SetReviewProjectID sets the "review_project_id" field.
func (rpdc *ReviewProjectDetailCreate) SetReviewProjectID(u uint32) *ReviewProjectDetailCreate {
	rpdc.mutation.SetReviewProjectID(u)
	return rpdc
}

// SetOrder sets the "order" field.
func (rpdc *ReviewProjectDetailCreate) SetOrder(u uint8) *ReviewProjectDetailCreate {
	rpdc.mutation.SetOrder(u)
	return rpdc
}

// SetReviewer sets the "reviewer" field.
func (rpdc *ReviewProjectDetailCreate) SetReviewer(e *entity.Reviewer) *ReviewProjectDetailCreate {
	rpdc.mutation.SetReviewer(e)
	return rpdc
}

// SetExecutor sets the "executor" field.
func (rpdc *ReviewProjectDetailCreate) SetExecutor(e *entity.Executor) *ReviewProjectDetailCreate {
	rpdc.mutation.SetExecutor(e)
	return rpdc
}

// SetTypee sets the "typee" field.
func (rpdc *ReviewProjectDetailCreate) SetTypee(u uint8) *ReviewProjectDetailCreate {
	rpdc.mutation.SetTypee(u)
	return rpdc
}

// SetStatus sets the "status" field.
func (rpdc *ReviewProjectDetailCreate) SetStatus(u uint8) *ReviewProjectDetailCreate {
	rpdc.mutation.SetStatus(u)
	return rpdc
}

// SetCreatedTime sets the "created_time" field.
func (rpdc *ReviewProjectDetailCreate) SetCreatedTime(t time.Time) *ReviewProjectDetailCreate {
	rpdc.mutation.SetCreatedTime(t)
	return rpdc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (rpdc *ReviewProjectDetailCreate) SetNillableCreatedTime(t *time.Time) *ReviewProjectDetailCreate {
	if t != nil {
		rpdc.SetCreatedTime(*t)
	}
	return rpdc
}

// SetDeletedTime sets the "deleted_time" field.
func (rpdc *ReviewProjectDetailCreate) SetDeletedTime(t time.Time) *ReviewProjectDetailCreate {
	rpdc.mutation.SetDeletedTime(t)
	return rpdc
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (rpdc *ReviewProjectDetailCreate) SetNillableDeletedTime(t *time.Time) *ReviewProjectDetailCreate {
	if t != nil {
		rpdc.SetDeletedTime(*t)
	}
	return rpdc
}

// SetModifiedTime sets the "modified_time" field.
func (rpdc *ReviewProjectDetailCreate) SetModifiedTime(t time.Time) *ReviewProjectDetailCreate {
	rpdc.mutation.SetModifiedTime(t)
	return rpdc
}

// SetNillableModifiedTime sets the "modified_time" field if the given value is not nil.
func (rpdc *ReviewProjectDetailCreate) SetNillableModifiedTime(t *time.Time) *ReviewProjectDetailCreate {
	if t != nil {
		rpdc.SetModifiedTime(*t)
	}
	return rpdc
}

// SetReviewProject sets the "review_project" edge to the ReviewProject entity.
func (rpdc *ReviewProjectDetailCreate) SetReviewProject(r *ReviewProject) *ReviewProjectDetailCreate {
	return rpdc.SetReviewProjectID(r.ID)
}

// Mutation returns the ReviewProjectDetailMutation object of the builder.
func (rpdc *ReviewProjectDetailCreate) Mutation() *ReviewProjectDetailMutation {
	return rpdc.mutation
}

// Save creates the ReviewProjectDetail in the database.
func (rpdc *ReviewProjectDetailCreate) Save(ctx context.Context) (*ReviewProjectDetail, error) {
	rpdc.defaults()
	return withHooks(ctx, rpdc.sqlSave, rpdc.mutation, rpdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rpdc *ReviewProjectDetailCreate) SaveX(ctx context.Context) *ReviewProjectDetail {
	v, err := rpdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpdc *ReviewProjectDetailCreate) Exec(ctx context.Context) error {
	_, err := rpdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpdc *ReviewProjectDetailCreate) ExecX(ctx context.Context) {
	if err := rpdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpdc *ReviewProjectDetailCreate) defaults() {
	if _, ok := rpdc.mutation.CreatedTime(); !ok {
		v := reviewprojectdetail.DefaultCreatedTime()
		rpdc.mutation.SetCreatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpdc *ReviewProjectDetailCreate) check() error {
	if _, ok := rpdc.mutation.ReviewProjectID(); !ok {
		return &ValidationError{Name: "review_project_id", err: errors.New(`ent: missing required field "ReviewProjectDetail.review_project_id"`)}
	}
	if _, ok := rpdc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "ReviewProjectDetail.order"`)}
	}
	if _, ok := rpdc.mutation.Reviewer(); !ok {
		return &ValidationError{Name: "reviewer", err: errors.New(`ent: missing required field "ReviewProjectDetail.reviewer"`)}
	}
	if _, ok := rpdc.mutation.Executor(); !ok {
		return &ValidationError{Name: "executor", err: errors.New(`ent: missing required field "ReviewProjectDetail.executor"`)}
	}
	if _, ok := rpdc.mutation.Typee(); !ok {
		return &ValidationError{Name: "typee", err: errors.New(`ent: missing required field "ReviewProjectDetail.typee"`)}
	}
	if _, ok := rpdc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ReviewProjectDetail.status"`)}
	}
	if _, ok := rpdc.mutation.CreatedTime(); !ok {
		return &ValidationError{Name: "created_time", err: errors.New(`ent: missing required field "ReviewProjectDetail.created_time"`)}
	}
	if _, ok := rpdc.mutation.ReviewProjectID(); !ok {
		return &ValidationError{Name: "review_project", err: errors.New(`ent: missing required edge "ReviewProjectDetail.review_project"`)}
	}
	return nil
}

func (rpdc *ReviewProjectDetailCreate) sqlSave(ctx context.Context) (*ReviewProjectDetail, error) {
	if err := rpdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rpdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rpdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rpdc.mutation.id = &_node.ID
	rpdc.mutation.done = true
	return _node, nil
}

func (rpdc *ReviewProjectDetailCreate) createSpec() (*ReviewProjectDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &ReviewProjectDetail{config: rpdc.config}
		_spec = sqlgraph.NewCreateSpec(reviewprojectdetail.Table, sqlgraph.NewFieldSpec(reviewprojectdetail.FieldID, field.TypeInt))
	)
	if value, ok := rpdc.mutation.Order(); ok {
		_spec.SetField(reviewprojectdetail.FieldOrder, field.TypeUint8, value)
		_node.Order = value
	}
	if value, ok := rpdc.mutation.Reviewer(); ok {
		_spec.SetField(reviewprojectdetail.FieldReviewer, field.TypeJSON, value)
		_node.Reviewer = value
	}
	if value, ok := rpdc.mutation.Executor(); ok {
		_spec.SetField(reviewprojectdetail.FieldExecutor, field.TypeJSON, value)
		_node.Executor = value
	}
	if value, ok := rpdc.mutation.Typee(); ok {
		_spec.SetField(reviewprojectdetail.FieldTypee, field.TypeUint8, value)
		_node.Typee = value
	}
	if value, ok := rpdc.mutation.Status(); ok {
		_spec.SetField(reviewprojectdetail.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := rpdc.mutation.CreatedTime(); ok {
		_spec.SetField(reviewprojectdetail.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = &value
	}
	if value, ok := rpdc.mutation.DeletedTime(); ok {
		_spec.SetField(reviewprojectdetail.FieldDeletedTime, field.TypeTime, value)
		_node.DeletedTime = &value
	}
	if value, ok := rpdc.mutation.ModifiedTime(); ok {
		_spec.SetField(reviewprojectdetail.FieldModifiedTime, field.TypeTime, value)
		_node.ModifiedTime = &value
	}
	if nodes := rpdc.mutation.ReviewProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reviewprojectdetail.ReviewProjectTable,
			Columns: []string{reviewprojectdetail.ReviewProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reviewproject.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReviewProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReviewProjectDetailCreateBulk is the builder for creating many ReviewProjectDetail entities in bulk.
type ReviewProjectDetailCreateBulk struct {
	config
	builders []*ReviewProjectDetailCreate
}

// Save creates the ReviewProjectDetail entities in the database.
func (rpdcb *ReviewProjectDetailCreateBulk) Save(ctx context.Context) ([]*ReviewProjectDetail, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rpdcb.builders))
	nodes := make([]*ReviewProjectDetail, len(rpdcb.builders))
	mutators := make([]Mutator, len(rpdcb.builders))
	for i := range rpdcb.builders {
		func(i int, root context.Context) {
			builder := rpdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReviewProjectDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rpdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rpdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rpdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rpdcb *ReviewProjectDetailCreateBulk) SaveX(ctx context.Context) []*ReviewProjectDetail {
	v, err := rpdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpdcb *ReviewProjectDetailCreateBulk) Exec(ctx context.Context) error {
	_, err := rpdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpdcb *ReviewProjectDetailCreateBulk) ExecX(ctx context.Context) {
	if err := rpdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
