// Code generated by ent, DO NOT EDIT.

package project

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUID holds the string denoting the uid field in the database.
	FieldUID = "uid"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldGoal holds the string denoting the goal field in the database.
	FieldGoal = "goal"
	// FieldPrinciple holds the string denoting the principle field in the database.
	FieldPrinciple = "principle"
	// FieldProcessAndMethod holds the string denoting the process_and_method field in the database.
	FieldProcessAndMethod = "process_and_method"
	// FieldStep holds the string denoting the step field in the database.
	FieldStep = "step"
	// FieldResultAndConclusion holds the string denoting the result_and_conclusion field in the database.
	FieldResultAndConclusion = "result_and_conclusion"
	// FieldRequirement holds the string denoting the requirement field in the database.
	FieldRequirement = "requirement"
	// FieldReviewStatus holds the string denoting the review_status field in the database.
	FieldReviewStatus = "review_status"
	// FieldIsDisabled holds the string denoting the is_disabled field in the database.
	FieldIsDisabled = "is_disabled"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// FieldDeletedTime holds the string denoting the deleted_time field in the database.
	FieldDeletedTime = "deleted_time"
	// FieldModifiedTime holds the string denoting the modified_time field in the database.
	FieldModifiedTime = "modified_time"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeAttachments holds the string denoting the attachments edge name in mutations.
	EdgeAttachments = "attachments"
	// EdgeReviewProject holds the string denoting the review_project edge name in mutations.
	EdgeReviewProject = "review_project"
	// EdgeProjectFile holds the string denoting the project_file edge name in mutations.
	EdgeProjectFile = "project_file"
	// Table holds the table name of the project in the database.
	Table = "project"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "project"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "user"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "uid"
	// AttachmentsTable is the table that holds the attachments relation/edge. The primary key declared below.
	AttachmentsTable = "project_file"
	// AttachmentsInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	AttachmentsInverseTable = "file"
	// ReviewProjectTable is the table that holds the review_project relation/edge.
	ReviewProjectTable = "review_project"
	// ReviewProjectInverseTable is the table name for the ReviewProject entity.
	// It exists in this package in order to avoid circular dependency with the "reviewproject" package.
	ReviewProjectInverseTable = "review_project"
	// ReviewProjectColumn is the table column denoting the review_project relation/edge.
	ReviewProjectColumn = "project_id"
	// ProjectFileTable is the table that holds the project_file relation/edge.
	ProjectFileTable = "project_file"
	// ProjectFileInverseTable is the table name for the ProjectFile entity.
	// It exists in this package in order to avoid circular dependency with the "projectfile" package.
	ProjectFileInverseTable = "project_file"
	// ProjectFileColumn is the table column denoting the project_file relation/edge.
	ProjectFileColumn = "pid"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldUID,
	FieldTitle,
	FieldGoal,
	FieldPrinciple,
	FieldProcessAndMethod,
	FieldStep,
	FieldResultAndConclusion,
	FieldRequirement,
	FieldReviewStatus,
	FieldIsDisabled,
	FieldCreatedTime,
	FieldDeletedTime,
	FieldModifiedTime,
}

var (
	// AttachmentsPrimaryKey and AttachmentsColumn2 are the table columns denoting the
	// primary key for the attachments relation (M2M).
	AttachmentsPrimaryKey = []string{"pid", "fid"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultReviewStatus holds the default value on creation for the "review_status" field.
	DefaultReviewStatus uint8
	// DefaultIsDisabled holds the default value on creation for the "is_disabled" field.
	DefaultIsDisabled bool
	// DefaultCreatedTime holds the default value on creation for the "created_time" field.
	DefaultCreatedTime func() time.Time
)

// OrderOption defines the ordering options for the Project queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUID orders the results by the uid field.
func ByUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByGoal orders the results by the goal field.
func ByGoal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoal, opts...).ToFunc()
}

// ByPrinciple orders the results by the principle field.
func ByPrinciple(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrinciple, opts...).ToFunc()
}

// ByProcessAndMethod orders the results by the process_and_method field.
func ByProcessAndMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessAndMethod, opts...).ToFunc()
}

// ByStep orders the results by the step field.
func ByStep(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStep, opts...).ToFunc()
}

// ByResultAndConclusion orders the results by the result_and_conclusion field.
func ByResultAndConclusion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResultAndConclusion, opts...).ToFunc()
}

// ByRequirement orders the results by the requirement field.
func ByRequirement(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequirement, opts...).ToFunc()
}

// ByReviewStatus orders the results by the review_status field.
func ByReviewStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewStatus, opts...).ToFunc()
}

// ByIsDisabled orders the results by the is_disabled field.
func ByIsDisabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDisabled, opts...).ToFunc()
}

// ByCreatedTime orders the results by the created_time field.
func ByCreatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTime, opts...).ToFunc()
}

// ByDeletedTime orders the results by the deleted_time field.
func ByDeletedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedTime, opts...).ToFunc()
}

// ByModifiedTime orders the results by the modified_time field.
func ByModifiedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedTime, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByAttachmentsCount orders the results by attachments count.
func ByAttachmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAttachmentsStep(), opts...)
	}
}

// ByAttachments orders the results by attachments terms.
func ByAttachments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttachmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReviewProjectCount orders the results by review_project count.
func ByReviewProjectCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReviewProjectStep(), opts...)
	}
}

// ByReviewProject orders the results by review_project terms.
func ByReviewProject(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReviewProjectStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProjectFileCount orders the results by project_file count.
func ByProjectFileCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProjectFileStep(), opts...)
	}
}

// ByProjectFile orders the results by project_file terms.
func ByProjectFile(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectFileStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newAttachmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AttachmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, AttachmentsTable, AttachmentsPrimaryKey...),
	)
}
func newReviewProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReviewProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReviewProjectTable, ReviewProjectColumn),
	)
}
func newProjectFileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectFileInverseTable, ProjectFileColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, ProjectFileTable, ProjectFileColumn),
	)
}
