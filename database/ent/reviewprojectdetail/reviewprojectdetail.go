// Code generated by ent, DO NOT EDIT.

package reviewprojectdetail

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the reviewprojectdetail type in the database.
	Label = "review_project_detail"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldReviewProjectID holds the string denoting the review_project_id field in the database.
	FieldReviewProjectID = "review_project_id"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// FieldReviewer holds the string denoting the reviewer field in the database.
	FieldReviewer = "reviewer"
	// FieldExecutor holds the string denoting the executor field in the database.
	FieldExecutor = "executor"
	// FieldNodeType holds the string denoting the node_type field in the database.
	FieldNodeType = "node_type"
	// FieldOpinion holds the string denoting the opinion field in the database.
	FieldOpinion = "opinion"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// FieldDeletedTime holds the string denoting the deleted_time field in the database.
	FieldDeletedTime = "deleted_time"
	// FieldModifiedTime holds the string denoting the modified_time field in the database.
	FieldModifiedTime = "modified_time"
	// EdgeReviewProject holds the string denoting the review_project edge name in mutations.
	EdgeReviewProject = "review_project"
	// Table holds the table name of the reviewprojectdetail in the database.
	Table = "review_project_detail"
	// ReviewProjectTable is the table that holds the review_project relation/edge.
	ReviewProjectTable = "review_project_detail"
	// ReviewProjectInverseTable is the table name for the ReviewProject entity.
	// It exists in this package in order to avoid circular dependency with the "reviewproject" package.
	ReviewProjectInverseTable = "review_project"
	// ReviewProjectColumn is the table column denoting the review_project relation/edge.
	ReviewProjectColumn = "review_project_id"
)

// Columns holds all SQL columns for reviewprojectdetail fields.
var Columns = []string{
	FieldID,
	FieldReviewProjectID,
	FieldOrder,
	FieldReviewer,
	FieldExecutor,
	FieldNodeType,
	FieldOpinion,
	FieldStatus,
	FieldCreatedTime,
	FieldDeletedTime,
	FieldModifiedTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedTime holds the default value on creation for the "created_time" field.
	DefaultCreatedTime func() time.Time
)

// OrderOption defines the ordering options for the ReviewProjectDetail queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByReviewProjectID orders the results by the review_project_id field.
func ByReviewProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewProjectID, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByNodeType orders the results by the node_type field.
func ByNodeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodeType, opts...).ToFunc()
}

// ByOpinion orders the results by the opinion field.
func ByOpinion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpinion, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedTime orders the results by the created_time field.
func ByCreatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTime, opts...).ToFunc()
}

// ByDeletedTime orders the results by the deleted_time field.
func ByDeletedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedTime, opts...).ToFunc()
}

// ByModifiedTime orders the results by the modified_time field.
func ByModifiedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedTime, opts...).ToFunc()
}

// ByReviewProjectField orders the results by review_project field.
func ByReviewProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReviewProjectStep(), sql.OrderByField(field, opts...))
	}
}
func newReviewProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReviewProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ReviewProjectTable, ReviewProjectColumn),
	)
}
