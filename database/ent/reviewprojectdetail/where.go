// Code generated by ent, DO NOT EDIT.

package reviewprojectdetail

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/DemoonLXW/up_learning/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldLTE(FieldID, id))
}

// ReviewProjectID applies equality check predicate on the "review_project_id" field. It's identical to ReviewProjectIDEQ.
func ReviewProjectID(v uint32) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldEQ(FieldReviewProjectID, v))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldEQ(FieldOrder, v))
}

// Typee applies equality check predicate on the "typee" field. It's identical to TypeeEQ.
func Typee(v uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldEQ(FieldTypee, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldEQ(FieldStatus, v))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldEQ(FieldCreatedTime, v))
}

// DeletedTime applies equality check predicate on the "deleted_time" field. It's identical to DeletedTimeEQ.
func DeletedTime(v time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldEQ(FieldDeletedTime, v))
}

// ModifiedTime applies equality check predicate on the "modified_time" field. It's identical to ModifiedTimeEQ.
func ModifiedTime(v time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldEQ(FieldModifiedTime, v))
}

// ReviewProjectIDEQ applies the EQ predicate on the "review_project_id" field.
func ReviewProjectIDEQ(v uint32) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldEQ(FieldReviewProjectID, v))
}

// ReviewProjectIDNEQ applies the NEQ predicate on the "review_project_id" field.
func ReviewProjectIDNEQ(v uint32) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldNEQ(FieldReviewProjectID, v))
}

// ReviewProjectIDIn applies the In predicate on the "review_project_id" field.
func ReviewProjectIDIn(vs ...uint32) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldIn(FieldReviewProjectID, vs...))
}

// ReviewProjectIDNotIn applies the NotIn predicate on the "review_project_id" field.
func ReviewProjectIDNotIn(vs ...uint32) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldNotIn(FieldReviewProjectID, vs...))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldLTE(FieldOrder, v))
}

// TypeeEQ applies the EQ predicate on the "typee" field.
func TypeeEQ(v uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldEQ(FieldTypee, v))
}

// TypeeNEQ applies the NEQ predicate on the "typee" field.
func TypeeNEQ(v uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldNEQ(FieldTypee, v))
}

// TypeeIn applies the In predicate on the "typee" field.
func TypeeIn(vs ...uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldIn(FieldTypee, vs...))
}

// TypeeNotIn applies the NotIn predicate on the "typee" field.
func TypeeNotIn(vs ...uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldNotIn(FieldTypee, vs...))
}

// TypeeGT applies the GT predicate on the "typee" field.
func TypeeGT(v uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldGT(FieldTypee, v))
}

// TypeeGTE applies the GTE predicate on the "typee" field.
func TypeeGTE(v uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldGTE(FieldTypee, v))
}

// TypeeLT applies the LT predicate on the "typee" field.
func TypeeLT(v uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldLT(FieldTypee, v))
}

// TypeeLTE applies the LTE predicate on the "typee" field.
func TypeeLTE(v uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldLTE(FieldTypee, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldLTE(FieldStatus, v))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldLTE(FieldCreatedTime, v))
}

// DeletedTimeEQ applies the EQ predicate on the "deleted_time" field.
func DeletedTimeEQ(v time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldEQ(FieldDeletedTime, v))
}

// DeletedTimeNEQ applies the NEQ predicate on the "deleted_time" field.
func DeletedTimeNEQ(v time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldNEQ(FieldDeletedTime, v))
}

// DeletedTimeIn applies the In predicate on the "deleted_time" field.
func DeletedTimeIn(vs ...time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldIn(FieldDeletedTime, vs...))
}

// DeletedTimeNotIn applies the NotIn predicate on the "deleted_time" field.
func DeletedTimeNotIn(vs ...time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldNotIn(FieldDeletedTime, vs...))
}

// DeletedTimeGT applies the GT predicate on the "deleted_time" field.
func DeletedTimeGT(v time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldGT(FieldDeletedTime, v))
}

// DeletedTimeGTE applies the GTE predicate on the "deleted_time" field.
func DeletedTimeGTE(v time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldGTE(FieldDeletedTime, v))
}

// DeletedTimeLT applies the LT predicate on the "deleted_time" field.
func DeletedTimeLT(v time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldLT(FieldDeletedTime, v))
}

// DeletedTimeLTE applies the LTE predicate on the "deleted_time" field.
func DeletedTimeLTE(v time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldLTE(FieldDeletedTime, v))
}

// DeletedTimeIsNil applies the IsNil predicate on the "deleted_time" field.
func DeletedTimeIsNil() predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldIsNull(FieldDeletedTime))
}

// DeletedTimeNotNil applies the NotNil predicate on the "deleted_time" field.
func DeletedTimeNotNil() predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldNotNull(FieldDeletedTime))
}

// ModifiedTimeEQ applies the EQ predicate on the "modified_time" field.
func ModifiedTimeEQ(v time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldEQ(FieldModifiedTime, v))
}

// ModifiedTimeNEQ applies the NEQ predicate on the "modified_time" field.
func ModifiedTimeNEQ(v time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldNEQ(FieldModifiedTime, v))
}

// ModifiedTimeIn applies the In predicate on the "modified_time" field.
func ModifiedTimeIn(vs ...time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldIn(FieldModifiedTime, vs...))
}

// ModifiedTimeNotIn applies the NotIn predicate on the "modified_time" field.
func ModifiedTimeNotIn(vs ...time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldNotIn(FieldModifiedTime, vs...))
}

// ModifiedTimeGT applies the GT predicate on the "modified_time" field.
func ModifiedTimeGT(v time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldGT(FieldModifiedTime, v))
}

// ModifiedTimeGTE applies the GTE predicate on the "modified_time" field.
func ModifiedTimeGTE(v time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldGTE(FieldModifiedTime, v))
}

// ModifiedTimeLT applies the LT predicate on the "modified_time" field.
func ModifiedTimeLT(v time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldLT(FieldModifiedTime, v))
}

// ModifiedTimeLTE applies the LTE predicate on the "modified_time" field.
func ModifiedTimeLTE(v time.Time) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldLTE(FieldModifiedTime, v))
}

// ModifiedTimeIsNil applies the IsNil predicate on the "modified_time" field.
func ModifiedTimeIsNil() predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldIsNull(FieldModifiedTime))
}

// ModifiedTimeNotNil applies the NotNil predicate on the "modified_time" field.
func ModifiedTimeNotNil() predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(sql.FieldNotNull(FieldModifiedTime))
}

// HasReviewProject applies the HasEdge predicate on the "review_project" edge.
func HasReviewProject() predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReviewProjectTable, ReviewProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReviewProjectWith applies the HasEdge predicate on the "review_project" edge with a given conditions (other predicates).
func HasReviewProjectWith(preds ...predicate.ReviewProject) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(func(s *sql.Selector) {
		step := newReviewProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ReviewProjectDetail) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ReviewProjectDetail) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReviewProjectDetail) predicate.ReviewProjectDetail {
	return predicate.ReviewProjectDetail(func(s *sql.Selector) {
		p(s.Not())
	})
}
