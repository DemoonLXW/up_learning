// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/DemoonLXW/up_learning/database/ent/college"
	"github.com/DemoonLXW/up_learning/database/ent/teacher"
	"github.com/DemoonLXW/up_learning/database/ent/user"
)

// Teacher is the model entity for the Teacher schema.
type Teacher struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID uint32 `json:"uid,omitempty"`
	// Cid holds the value of the "cid" field.
	Cid uint8 `json:"cid,omitempty"`
	// TeacherID holds the value of the "teacher_id" field.
	TeacherID string `json:"teacher_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender uint8 `json:"gender,omitempty"`
	// IsDisabled holds the value of the "is_disabled" field.
	IsDisabled bool `json:"is_disabled,omitempty"`
	// CreatedTime holds the value of the "created_time" field.
	CreatedTime *time.Time `json:"created_time,omitempty"`
	// DeletedTime holds the value of the "deleted_time" field.
	DeletedTime *time.Time `json:"deleted_time,omitempty"`
	// ModifiedTime holds the value of the "modified_time" field.
	ModifiedTime *time.Time `json:"modified_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeacherQuery when eager-loading is set.
	Edges        TeacherEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TeacherEdges holds the relations/edges for other nodes in the graph.
type TeacherEdges struct {
	// College holds the value of the college edge.
	College *College `json:"college,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CollegeOrErr returns the College value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeacherEdges) CollegeOrErr() (*College, error) {
	if e.loadedTypes[0] {
		if e.College == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: college.Label}
		}
		return e.College, nil
	}
	return nil, &NotLoadedError{edge: "college"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeacherEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Teacher) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case teacher.FieldIsDisabled:
			values[i] = new(sql.NullBool)
		case teacher.FieldID, teacher.FieldUID, teacher.FieldCid, teacher.FieldGender:
			values[i] = new(sql.NullInt64)
		case teacher.FieldTeacherID, teacher.FieldName:
			values[i] = new(sql.NullString)
		case teacher.FieldCreatedTime, teacher.FieldDeletedTime, teacher.FieldModifiedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Teacher fields.
func (t *Teacher) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case teacher.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = uint32(value.Int64)
		case teacher.FieldUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				t.UID = uint32(value.Int64)
			}
		case teacher.FieldCid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cid", values[i])
			} else if value.Valid {
				t.Cid = uint8(value.Int64)
			}
		case teacher.FieldTeacherID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field teacher_id", values[i])
			} else if value.Valid {
				t.TeacherID = value.String
			}
		case teacher.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case teacher.FieldGender:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				t.Gender = uint8(value.Int64)
			}
		case teacher.FieldIsDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_disabled", values[i])
			} else if value.Valid {
				t.IsDisabled = value.Bool
			}
		case teacher.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				t.CreatedTime = new(time.Time)
				*t.CreatedTime = value.Time
			}
		case teacher.FieldDeletedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_time", values[i])
			} else if value.Valid {
				t.DeletedTime = new(time.Time)
				*t.DeletedTime = value.Time
			}
		case teacher.FieldModifiedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modified_time", values[i])
			} else if value.Valid {
				t.ModifiedTime = new(time.Time)
				*t.ModifiedTime = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Teacher.
// This includes values selected through modifiers, order, etc.
func (t *Teacher) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryCollege queries the "college" edge of the Teacher entity.
func (t *Teacher) QueryCollege() *CollegeQuery {
	return NewTeacherClient(t.config).QueryCollege(t)
}

// QueryUser queries the "user" edge of the Teacher entity.
func (t *Teacher) QueryUser() *UserQuery {
	return NewTeacherClient(t.config).QueryUser(t)
}

// Update returns a builder for updating this Teacher.
// Note that you need to call Teacher.Unwrap() before calling this method if this Teacher
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Teacher) Update() *TeacherUpdateOne {
	return NewTeacherClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Teacher entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Teacher) Unwrap() *Teacher {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Teacher is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Teacher) String() string {
	var builder strings.Builder
	builder.WriteString("Teacher(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("uid=")
	builder.WriteString(fmt.Sprintf("%v", t.UID))
	builder.WriteString(", ")
	builder.WriteString("cid=")
	builder.WriteString(fmt.Sprintf("%v", t.Cid))
	builder.WriteString(", ")
	builder.WriteString("teacher_id=")
	builder.WriteString(t.TeacherID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", t.Gender))
	builder.WriteString(", ")
	builder.WriteString("is_disabled=")
	builder.WriteString(fmt.Sprintf("%v", t.IsDisabled))
	builder.WriteString(", ")
	if v := t.CreatedTime; v != nil {
		builder.WriteString("created_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := t.DeletedTime; v != nil {
		builder.WriteString("deleted_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := t.ModifiedTime; v != nil {
		builder.WriteString("modified_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Teachers is a parsable slice of Teacher.
type Teachers []*Teacher
