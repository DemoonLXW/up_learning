// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/DemoonLXW/up_learning/database/ent/permission"
	"github.com/DemoonLXW/up_learning/database/ent/role"
	"github.com/DemoonLXW/up_learning/database/ent/rolepermission"
)

// RolePermission is the model entity for the RolePermission schema.
type RolePermission struct {
	config `json:"-"`
	// Rid holds the value of the "rid" field.
	Rid uint8 `json:"rid,omitempty"`
	// Pid holds the value of the "pid" field.
	Pid uint16 `json:"pid,omitempty"`
	// CreatedTime holds the value of the "created_time" field.
	CreatedTime *time.Time `json:"created_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RolePermissionQuery when eager-loading is set.
	Edges        RolePermissionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RolePermissionEdges holds the relations/edges for other nodes in the graph.
type RolePermissionEdges struct {
	// Role holds the value of the role edge.
	Role *Role `json:"role,omitempty"`
	// Permission holds the value of the permission edge.
	Permission *Permission `json:"permission,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RolePermissionEdges) RoleOrErr() (*Role, error) {
	if e.loadedTypes[0] {
		if e.Role == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: role.Label}
		}
		return e.Role, nil
	}
	return nil, &NotLoadedError{edge: "role"}
}

// PermissionOrErr returns the Permission value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RolePermissionEdges) PermissionOrErr() (*Permission, error) {
	if e.loadedTypes[1] {
		if e.Permission == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: permission.Label}
		}
		return e.Permission, nil
	}
	return nil, &NotLoadedError{edge: "permission"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RolePermission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rolepermission.FieldRid, rolepermission.FieldPid:
			values[i] = new(sql.NullInt64)
		case rolepermission.FieldCreatedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RolePermission fields.
func (rp *RolePermission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rolepermission.FieldRid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rid", values[i])
			} else if value.Valid {
				rp.Rid = uint8(value.Int64)
			}
		case rolepermission.FieldPid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pid", values[i])
			} else if value.Valid {
				rp.Pid = uint16(value.Int64)
			}
		case rolepermission.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				rp.CreatedTime = new(time.Time)
				*rp.CreatedTime = value.Time
			}
		default:
			rp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RolePermission.
// This includes values selected through modifiers, order, etc.
func (rp *RolePermission) Value(name string) (ent.Value, error) {
	return rp.selectValues.Get(name)
}

// QueryRole queries the "role" edge of the RolePermission entity.
func (rp *RolePermission) QueryRole() *RoleQuery {
	return NewRolePermissionClient(rp.config).QueryRole(rp)
}

// QueryPermission queries the "permission" edge of the RolePermission entity.
func (rp *RolePermission) QueryPermission() *PermissionQuery {
	return NewRolePermissionClient(rp.config).QueryPermission(rp)
}

// Update returns a builder for updating this RolePermission.
// Note that you need to call RolePermission.Unwrap() before calling this method if this RolePermission
// was returned from a transaction, and the transaction was committed or rolled back.
func (rp *RolePermission) Update() *RolePermissionUpdateOne {
	return NewRolePermissionClient(rp.config).UpdateOne(rp)
}

// Unwrap unwraps the RolePermission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rp *RolePermission) Unwrap() *RolePermission {
	_tx, ok := rp.config.driver.(*txDriver)
	if !ok {
		panic("ent: RolePermission is not a transactional entity")
	}
	rp.config.driver = _tx.drv
	return rp
}

// String implements the fmt.Stringer.
func (rp *RolePermission) String() string {
	var builder strings.Builder
	builder.WriteString("RolePermission(")
	builder.WriteString("rid=")
	builder.WriteString(fmt.Sprintf("%v", rp.Rid))
	builder.WriteString(", ")
	builder.WriteString("pid=")
	builder.WriteString(fmt.Sprintf("%v", rp.Pid))
	builder.WriteString(", ")
	if v := rp.CreatedTime; v != nil {
		builder.WriteString("created_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// RolePermissions is a parsable slice of RolePermission.
type RolePermissions []*RolePermission
