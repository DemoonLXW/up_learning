// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DemoonLXW/up_learning/database/ent/project"
	"github.com/DemoonLXW/up_learning/database/ent/reviewproject"
	"github.com/DemoonLXW/up_learning/database/ent/reviewprojectdetail"
	"github.com/DemoonLXW/up_learning/database/ent/user"
)

// ReviewProjectCreate is the builder for creating a ReviewProject entity.
type ReviewProjectCreate struct {
	config
	mutation *ReviewProjectMutation
	hooks    []Hook
}

// SetProjectID sets the "project_id" field.
func (rpc *ReviewProjectCreate) SetProjectID(u uint32) *ReviewProjectCreate {
	rpc.mutation.SetProjectID(u)
	return rpc
}

// SetWorkflowID sets the "workflow_id" field.
func (rpc *ReviewProjectCreate) SetWorkflowID(s string) *ReviewProjectCreate {
	rpc.mutation.SetWorkflowID(s)
	return rpc
}

// SetRunID sets the "run_id" field.
func (rpc *ReviewProjectCreate) SetRunID(s string) *ReviewProjectCreate {
	rpc.mutation.SetRunID(s)
	return rpc
}

// SetApplicantID sets the "applicant_id" field.
func (rpc *ReviewProjectCreate) SetApplicantID(u uint32) *ReviewProjectCreate {
	rpc.mutation.SetApplicantID(u)
	return rpc
}

// SetStatus sets the "status" field.
func (rpc *ReviewProjectCreate) SetStatus(u uint8) *ReviewProjectCreate {
	rpc.mutation.SetStatus(u)
	return rpc
}

// SetCreatedTime sets the "created_time" field.
func (rpc *ReviewProjectCreate) SetCreatedTime(t time.Time) *ReviewProjectCreate {
	rpc.mutation.SetCreatedTime(t)
	return rpc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (rpc *ReviewProjectCreate) SetNillableCreatedTime(t *time.Time) *ReviewProjectCreate {
	if t != nil {
		rpc.SetCreatedTime(*t)
	}
	return rpc
}

// SetDeletedTime sets the "deleted_time" field.
func (rpc *ReviewProjectCreate) SetDeletedTime(t time.Time) *ReviewProjectCreate {
	rpc.mutation.SetDeletedTime(t)
	return rpc
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (rpc *ReviewProjectCreate) SetNillableDeletedTime(t *time.Time) *ReviewProjectCreate {
	if t != nil {
		rpc.SetDeletedTime(*t)
	}
	return rpc
}

// SetModifiedTime sets the "modified_time" field.
func (rpc *ReviewProjectCreate) SetModifiedTime(t time.Time) *ReviewProjectCreate {
	rpc.mutation.SetModifiedTime(t)
	return rpc
}

// SetNillableModifiedTime sets the "modified_time" field if the given value is not nil.
func (rpc *ReviewProjectCreate) SetNillableModifiedTime(t *time.Time) *ReviewProjectCreate {
	if t != nil {
		rpc.SetModifiedTime(*t)
	}
	return rpc
}

// SetID sets the "id" field.
func (rpc *ReviewProjectCreate) SetID(u uint32) *ReviewProjectCreate {
	rpc.mutation.SetID(u)
	return rpc
}

// SetApplicant sets the "applicant" edge to the User entity.
func (rpc *ReviewProjectCreate) SetApplicant(u *User) *ReviewProjectCreate {
	return rpc.SetApplicantID(u.ID)
}

// SetProject sets the "project" edge to the Project entity.
func (rpc *ReviewProjectCreate) SetProject(p *Project) *ReviewProjectCreate {
	return rpc.SetProjectID(p.ID)
}

// AddReviewProjectDetailIDs adds the "review_project_detail" edge to the ReviewProjectDetail entity by IDs.
func (rpc *ReviewProjectCreate) AddReviewProjectDetailIDs(ids ...int) *ReviewProjectCreate {
	rpc.mutation.AddReviewProjectDetailIDs(ids...)
	return rpc
}

// AddReviewProjectDetail adds the "review_project_detail" edges to the ReviewProjectDetail entity.
func (rpc *ReviewProjectCreate) AddReviewProjectDetail(r ...*ReviewProjectDetail) *ReviewProjectCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpc.AddReviewProjectDetailIDs(ids...)
}

// Mutation returns the ReviewProjectMutation object of the builder.
func (rpc *ReviewProjectCreate) Mutation() *ReviewProjectMutation {
	return rpc.mutation
}

// Save creates the ReviewProject in the database.
func (rpc *ReviewProjectCreate) Save(ctx context.Context) (*ReviewProject, error) {
	rpc.defaults()
	return withHooks(ctx, rpc.sqlSave, rpc.mutation, rpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rpc *ReviewProjectCreate) SaveX(ctx context.Context) *ReviewProject {
	v, err := rpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpc *ReviewProjectCreate) Exec(ctx context.Context) error {
	_, err := rpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpc *ReviewProjectCreate) ExecX(ctx context.Context) {
	if err := rpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpc *ReviewProjectCreate) defaults() {
	if _, ok := rpc.mutation.CreatedTime(); !ok {
		v := reviewproject.DefaultCreatedTime()
		rpc.mutation.SetCreatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpc *ReviewProjectCreate) check() error {
	if _, ok := rpc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "ReviewProject.project_id"`)}
	}
	if _, ok := rpc.mutation.WorkflowID(); !ok {
		return &ValidationError{Name: "workflow_id", err: errors.New(`ent: missing required field "ReviewProject.workflow_id"`)}
	}
	if _, ok := rpc.mutation.RunID(); !ok {
		return &ValidationError{Name: "run_id", err: errors.New(`ent: missing required field "ReviewProject.run_id"`)}
	}
	if _, ok := rpc.mutation.ApplicantID(); !ok {
		return &ValidationError{Name: "applicant_id", err: errors.New(`ent: missing required field "ReviewProject.applicant_id"`)}
	}
	if _, ok := rpc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ReviewProject.status"`)}
	}
	if _, ok := rpc.mutation.CreatedTime(); !ok {
		return &ValidationError{Name: "created_time", err: errors.New(`ent: missing required field "ReviewProject.created_time"`)}
	}
	if _, ok := rpc.mutation.ApplicantID(); !ok {
		return &ValidationError{Name: "applicant", err: errors.New(`ent: missing required edge "ReviewProject.applicant"`)}
	}
	if _, ok := rpc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "ReviewProject.project"`)}
	}
	return nil
}

func (rpc *ReviewProjectCreate) sqlSave(ctx context.Context) (*ReviewProject, error) {
	if err := rpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	rpc.mutation.id = &_node.ID
	rpc.mutation.done = true
	return _node, nil
}

func (rpc *ReviewProjectCreate) createSpec() (*ReviewProject, *sqlgraph.CreateSpec) {
	var (
		_node = &ReviewProject{config: rpc.config}
		_spec = sqlgraph.NewCreateSpec(reviewproject.Table, sqlgraph.NewFieldSpec(reviewproject.FieldID, field.TypeUint32))
	)
	if id, ok := rpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rpc.mutation.WorkflowID(); ok {
		_spec.SetField(reviewproject.FieldWorkflowID, field.TypeString, value)
		_node.WorkflowID = value
	}
	if value, ok := rpc.mutation.RunID(); ok {
		_spec.SetField(reviewproject.FieldRunID, field.TypeString, value)
		_node.RunID = value
	}
	if value, ok := rpc.mutation.Status(); ok {
		_spec.SetField(reviewproject.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := rpc.mutation.CreatedTime(); ok {
		_spec.SetField(reviewproject.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = &value
	}
	if value, ok := rpc.mutation.DeletedTime(); ok {
		_spec.SetField(reviewproject.FieldDeletedTime, field.TypeTime, value)
		_node.DeletedTime = &value
	}
	if value, ok := rpc.mutation.ModifiedTime(); ok {
		_spec.SetField(reviewproject.FieldModifiedTime, field.TypeTime, value)
		_node.ModifiedTime = &value
	}
	if nodes := rpc.mutation.ApplicantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reviewproject.ApplicantTable,
			Columns: []string{reviewproject.ApplicantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ApplicantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rpc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reviewproject.ProjectTable,
			Columns: []string{reviewproject.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rpc.mutation.ReviewProjectDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reviewproject.ReviewProjectDetailTable,
			Columns: []string{reviewproject.ReviewProjectDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reviewprojectdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReviewProjectCreateBulk is the builder for creating many ReviewProject entities in bulk.
type ReviewProjectCreateBulk struct {
	config
	builders []*ReviewProjectCreate
}

// Save creates the ReviewProject entities in the database.
func (rpcb *ReviewProjectCreateBulk) Save(ctx context.Context) ([]*ReviewProject, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rpcb.builders))
	nodes := make([]*ReviewProject, len(rpcb.builders))
	mutators := make([]Mutator, len(rpcb.builders))
	for i := range rpcb.builders {
		func(i int, root context.Context) {
			builder := rpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReviewProjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rpcb *ReviewProjectCreateBulk) SaveX(ctx context.Context) []*ReviewProject {
	v, err := rpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpcb *ReviewProjectCreateBulk) Exec(ctx context.Context) error {
	_, err := rpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpcb *ReviewProjectCreateBulk) ExecX(ctx context.Context) {
	if err := rpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
