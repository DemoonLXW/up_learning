// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/DemoonLXW/up_learning/database/ent/project"
	"github.com/DemoonLXW/up_learning/database/ent/user"
)

// Project is the model entity for the Project schema.
type Project struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID uint32 `json:"uid,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Goal holds the value of the "goal" field.
	Goal string `json:"goal,omitempty"`
	// Principle holds the value of the "principle" field.
	Principle string `json:"principle,omitempty"`
	// ProcessAndMethod holds the value of the "process_and_method" field.
	ProcessAndMethod string `json:"process_and_method,omitempty"`
	// Step holds the value of the "step" field.
	Step string `json:"step,omitempty"`
	// ResultAndConclusion holds the value of the "result_and_conclusion" field.
	ResultAndConclusion string `json:"result_and_conclusion,omitempty"`
	// Requirement holds the value of the "requirement" field.
	Requirement string `json:"requirement,omitempty"`
	// ReviewStatus holds the value of the "review_status" field.
	ReviewStatus uint8 `json:"review_status,omitempty"`
	// IsDisabled holds the value of the "is_disabled" field.
	IsDisabled bool `json:"is_disabled,omitempty"`
	// CreatedTime holds the value of the "created_time" field.
	CreatedTime *time.Time `json:"created_time,omitempty"`
	// DeletedTime holds the value of the "deleted_time" field.
	DeletedTime *time.Time `json:"deleted_time,omitempty"`
	// ModifiedTime holds the value of the "modified_time" field.
	ModifiedTime *time.Time `json:"modified_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectQuery when eager-loading is set.
	Edges        ProjectEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProjectEdges holds the relations/edges for other nodes in the graph.
type ProjectEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Attachments holds the value of the attachments edge.
	Attachments []*File `json:"attachments,omitempty"`
	// ReviewProject holds the value of the review_project edge.
	ReviewProject []*ReviewProject `json:"review_project,omitempty"`
	// ProjectFile holds the value of the project_file edge.
	ProjectFile []*ProjectFile `json:"project_file,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AttachmentsOrErr returns the Attachments value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) AttachmentsOrErr() ([]*File, error) {
	if e.loadedTypes[1] {
		return e.Attachments, nil
	}
	return nil, &NotLoadedError{edge: "attachments"}
}

// ReviewProjectOrErr returns the ReviewProject value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) ReviewProjectOrErr() ([]*ReviewProject, error) {
	if e.loadedTypes[2] {
		return e.ReviewProject, nil
	}
	return nil, &NotLoadedError{edge: "review_project"}
}

// ProjectFileOrErr returns the ProjectFile value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) ProjectFileOrErr() ([]*ProjectFile, error) {
	if e.loadedTypes[3] {
		return e.ProjectFile, nil
	}
	return nil, &NotLoadedError{edge: "project_file"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Project) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case project.FieldIsDisabled:
			values[i] = new(sql.NullBool)
		case project.FieldID, project.FieldUID, project.FieldReviewStatus:
			values[i] = new(sql.NullInt64)
		case project.FieldTitle, project.FieldGoal, project.FieldPrinciple, project.FieldProcessAndMethod, project.FieldStep, project.FieldResultAndConclusion, project.FieldRequirement:
			values[i] = new(sql.NullString)
		case project.FieldCreatedTime, project.FieldDeletedTime, project.FieldModifiedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Project fields.
func (pr *Project) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case project.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = uint32(value.Int64)
		case project.FieldUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				pr.UID = uint32(value.Int64)
			}
		case project.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pr.Title = value.String
			}
		case project.FieldGoal:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field goal", values[i])
			} else if value.Valid {
				pr.Goal = value.String
			}
		case project.FieldPrinciple:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field principle", values[i])
			} else if value.Valid {
				pr.Principle = value.String
			}
		case project.FieldProcessAndMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_and_method", values[i])
			} else if value.Valid {
				pr.ProcessAndMethod = value.String
			}
		case project.FieldStep:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field step", values[i])
			} else if value.Valid {
				pr.Step = value.String
			}
		case project.FieldResultAndConclusion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field result_and_conclusion", values[i])
			} else if value.Valid {
				pr.ResultAndConclusion = value.String
			}
		case project.FieldRequirement:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field requirement", values[i])
			} else if value.Valid {
				pr.Requirement = value.String
			}
		case project.FieldReviewStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field review_status", values[i])
			} else if value.Valid {
				pr.ReviewStatus = uint8(value.Int64)
			}
		case project.FieldIsDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_disabled", values[i])
			} else if value.Valid {
				pr.IsDisabled = value.Bool
			}
		case project.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				pr.CreatedTime = new(time.Time)
				*pr.CreatedTime = value.Time
			}
		case project.FieldDeletedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_time", values[i])
			} else if value.Valid {
				pr.DeletedTime = new(time.Time)
				*pr.DeletedTime = value.Time
			}
		case project.FieldModifiedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modified_time", values[i])
			} else if value.Valid {
				pr.ModifiedTime = new(time.Time)
				*pr.ModifiedTime = value.Time
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Project.
// This includes values selected through modifiers, order, etc.
func (pr *Project) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Project entity.
func (pr *Project) QueryUser() *UserQuery {
	return NewProjectClient(pr.config).QueryUser(pr)
}

// QueryAttachments queries the "attachments" edge of the Project entity.
func (pr *Project) QueryAttachments() *FileQuery {
	return NewProjectClient(pr.config).QueryAttachments(pr)
}

// QueryReviewProject queries the "review_project" edge of the Project entity.
func (pr *Project) QueryReviewProject() *ReviewProjectQuery {
	return NewProjectClient(pr.config).QueryReviewProject(pr)
}

// QueryProjectFile queries the "project_file" edge of the Project entity.
func (pr *Project) QueryProjectFile() *ProjectFileQuery {
	return NewProjectClient(pr.config).QueryProjectFile(pr)
}

// Update returns a builder for updating this Project.
// Note that you need to call Project.Unwrap() before calling this method if this Project
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Project) Update() *ProjectUpdateOne {
	return NewProjectClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Project entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Project) Unwrap() *Project {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Project is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Project) String() string {
	var builder strings.Builder
	builder.WriteString("Project(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("uid=")
	builder.WriteString(fmt.Sprintf("%v", pr.UID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(pr.Title)
	builder.WriteString(", ")
	builder.WriteString("goal=")
	builder.WriteString(pr.Goal)
	builder.WriteString(", ")
	builder.WriteString("principle=")
	builder.WriteString(pr.Principle)
	builder.WriteString(", ")
	builder.WriteString("process_and_method=")
	builder.WriteString(pr.ProcessAndMethod)
	builder.WriteString(", ")
	builder.WriteString("step=")
	builder.WriteString(pr.Step)
	builder.WriteString(", ")
	builder.WriteString("result_and_conclusion=")
	builder.WriteString(pr.ResultAndConclusion)
	builder.WriteString(", ")
	builder.WriteString("requirement=")
	builder.WriteString(pr.Requirement)
	builder.WriteString(", ")
	builder.WriteString("review_status=")
	builder.WriteString(fmt.Sprintf("%v", pr.ReviewStatus))
	builder.WriteString(", ")
	builder.WriteString("is_disabled=")
	builder.WriteString(fmt.Sprintf("%v", pr.IsDisabled))
	builder.WriteString(", ")
	if v := pr.CreatedTime; v != nil {
		builder.WriteString("created_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := pr.DeletedTime; v != nil {
		builder.WriteString("deleted_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := pr.ModifiedTime; v != nil {
		builder.WriteString("modified_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Projects is a parsable slice of Project.
type Projects []*Project
