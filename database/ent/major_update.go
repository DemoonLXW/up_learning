// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DemoonLXW/up_learning/database/ent/class"
	"github.com/DemoonLXW/up_learning/database/ent/college"
	"github.com/DemoonLXW/up_learning/database/ent/major"
	"github.com/DemoonLXW/up_learning/database/ent/predicate"
)

// MajorUpdate is the builder for updating Major entities.
type MajorUpdate struct {
	config
	hooks    []Hook
	mutation *MajorMutation
}

// Where appends a list predicates to the MajorUpdate builder.
func (mu *MajorUpdate) Where(ps ...predicate.Major) *MajorUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetCid sets the "cid" field.
func (mu *MajorUpdate) SetCid(u uint8) *MajorUpdate {
	mu.mutation.SetCid(u)
	return mu
}

// SetName sets the "name" field.
func (mu *MajorUpdate) SetName(s string) *MajorUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetIsDisabled sets the "is_disabled" field.
func (mu *MajorUpdate) SetIsDisabled(b bool) *MajorUpdate {
	mu.mutation.SetIsDisabled(b)
	return mu
}

// SetNillableIsDisabled sets the "is_disabled" field if the given value is not nil.
func (mu *MajorUpdate) SetNillableIsDisabled(b *bool) *MajorUpdate {
	if b != nil {
		mu.SetIsDisabled(*b)
	}
	return mu
}

// SetCreatedTime sets the "created_time" field.
func (mu *MajorUpdate) SetCreatedTime(t time.Time) *MajorUpdate {
	mu.mutation.SetCreatedTime(t)
	return mu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (mu *MajorUpdate) SetNillableCreatedTime(t *time.Time) *MajorUpdate {
	if t != nil {
		mu.SetCreatedTime(*t)
	}
	return mu
}

// SetDeletedTime sets the "deleted_time" field.
func (mu *MajorUpdate) SetDeletedTime(t time.Time) *MajorUpdate {
	mu.mutation.SetDeletedTime(t)
	return mu
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (mu *MajorUpdate) SetNillableDeletedTime(t *time.Time) *MajorUpdate {
	if t != nil {
		mu.SetDeletedTime(*t)
	}
	return mu
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (mu *MajorUpdate) ClearDeletedTime() *MajorUpdate {
	mu.mutation.ClearDeletedTime()
	return mu
}

// SetModifiedTime sets the "modified_time" field.
func (mu *MajorUpdate) SetModifiedTime(t time.Time) *MajorUpdate {
	mu.mutation.SetModifiedTime(t)
	return mu
}

// SetNillableModifiedTime sets the "modified_time" field if the given value is not nil.
func (mu *MajorUpdate) SetNillableModifiedTime(t *time.Time) *MajorUpdate {
	if t != nil {
		mu.SetModifiedTime(*t)
	}
	return mu
}

// ClearModifiedTime clears the value of the "modified_time" field.
func (mu *MajorUpdate) ClearModifiedTime() *MajorUpdate {
	mu.mutation.ClearModifiedTime()
	return mu
}

// SetCollegeID sets the "college" edge to the College entity by ID.
func (mu *MajorUpdate) SetCollegeID(id uint8) *MajorUpdate {
	mu.mutation.SetCollegeID(id)
	return mu
}

// SetCollege sets the "college" edge to the College entity.
func (mu *MajorUpdate) SetCollege(c *College) *MajorUpdate {
	return mu.SetCollegeID(c.ID)
}

// AddClassIDs adds the "classes" edge to the Class entity by IDs.
func (mu *MajorUpdate) AddClassIDs(ids ...uint32) *MajorUpdate {
	mu.mutation.AddClassIDs(ids...)
	return mu
}

// AddClasses adds the "classes" edges to the Class entity.
func (mu *MajorUpdate) AddClasses(c ...*Class) *MajorUpdate {
	ids := make([]uint32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.AddClassIDs(ids...)
}

// Mutation returns the MajorMutation object of the builder.
func (mu *MajorUpdate) Mutation() *MajorMutation {
	return mu.mutation
}

// ClearCollege clears the "college" edge to the College entity.
func (mu *MajorUpdate) ClearCollege() *MajorUpdate {
	mu.mutation.ClearCollege()
	return mu
}

// ClearClasses clears all "classes" edges to the Class entity.
func (mu *MajorUpdate) ClearClasses() *MajorUpdate {
	mu.mutation.ClearClasses()
	return mu
}

// RemoveClassIDs removes the "classes" edge to Class entities by IDs.
func (mu *MajorUpdate) RemoveClassIDs(ids ...uint32) *MajorUpdate {
	mu.mutation.RemoveClassIDs(ids...)
	return mu
}

// RemoveClasses removes "classes" edges to Class entities.
func (mu *MajorUpdate) RemoveClasses(c ...*Class) *MajorUpdate {
	ids := make([]uint32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.RemoveClassIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MajorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MajorUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MajorUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MajorUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MajorUpdate) check() error {
	if _, ok := mu.mutation.CollegeID(); mu.mutation.CollegeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Major.college"`)
	}
	return nil
}

func (mu *MajorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(major.Table, major.Columns, sqlgraph.NewFieldSpec(major.FieldID, field.TypeUint16))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(major.FieldName, field.TypeString, value)
	}
	if value, ok := mu.mutation.IsDisabled(); ok {
		_spec.SetField(major.FieldIsDisabled, field.TypeBool, value)
	}
	if value, ok := mu.mutation.CreatedTime(); ok {
		_spec.SetField(major.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := mu.mutation.DeletedTime(); ok {
		_spec.SetField(major.FieldDeletedTime, field.TypeTime, value)
	}
	if mu.mutation.DeletedTimeCleared() {
		_spec.ClearField(major.FieldDeletedTime, field.TypeTime)
	}
	if value, ok := mu.mutation.ModifiedTime(); ok {
		_spec.SetField(major.FieldModifiedTime, field.TypeTime, value)
	}
	if mu.mutation.ModifiedTimeCleared() {
		_spec.ClearField(major.FieldModifiedTime, field.TypeTime)
	}
	if mu.mutation.CollegeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   major.CollegeTable,
			Columns: []string{major.CollegeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(college.FieldID, field.TypeUint8),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.CollegeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   major.CollegeTable,
			Columns: []string{major.CollegeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(college.FieldID, field.TypeUint8),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   major.ClassesTable,
			Columns: []string{major.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedClassesIDs(); len(nodes) > 0 && !mu.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   major.ClassesTable,
			Columns: []string{major.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   major.ClassesTable,
			Columns: []string{major.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{major.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MajorUpdateOne is the builder for updating a single Major entity.
type MajorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MajorMutation
}

// SetCid sets the "cid" field.
func (muo *MajorUpdateOne) SetCid(u uint8) *MajorUpdateOne {
	muo.mutation.SetCid(u)
	return muo
}

// SetName sets the "name" field.
func (muo *MajorUpdateOne) SetName(s string) *MajorUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetIsDisabled sets the "is_disabled" field.
func (muo *MajorUpdateOne) SetIsDisabled(b bool) *MajorUpdateOne {
	muo.mutation.SetIsDisabled(b)
	return muo
}

// SetNillableIsDisabled sets the "is_disabled" field if the given value is not nil.
func (muo *MajorUpdateOne) SetNillableIsDisabled(b *bool) *MajorUpdateOne {
	if b != nil {
		muo.SetIsDisabled(*b)
	}
	return muo
}

// SetCreatedTime sets the "created_time" field.
func (muo *MajorUpdateOne) SetCreatedTime(t time.Time) *MajorUpdateOne {
	muo.mutation.SetCreatedTime(t)
	return muo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (muo *MajorUpdateOne) SetNillableCreatedTime(t *time.Time) *MajorUpdateOne {
	if t != nil {
		muo.SetCreatedTime(*t)
	}
	return muo
}

// SetDeletedTime sets the "deleted_time" field.
func (muo *MajorUpdateOne) SetDeletedTime(t time.Time) *MajorUpdateOne {
	muo.mutation.SetDeletedTime(t)
	return muo
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (muo *MajorUpdateOne) SetNillableDeletedTime(t *time.Time) *MajorUpdateOne {
	if t != nil {
		muo.SetDeletedTime(*t)
	}
	return muo
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (muo *MajorUpdateOne) ClearDeletedTime() *MajorUpdateOne {
	muo.mutation.ClearDeletedTime()
	return muo
}

// SetModifiedTime sets the "modified_time" field.
func (muo *MajorUpdateOne) SetModifiedTime(t time.Time) *MajorUpdateOne {
	muo.mutation.SetModifiedTime(t)
	return muo
}

// SetNillableModifiedTime sets the "modified_time" field if the given value is not nil.
func (muo *MajorUpdateOne) SetNillableModifiedTime(t *time.Time) *MajorUpdateOne {
	if t != nil {
		muo.SetModifiedTime(*t)
	}
	return muo
}

// ClearModifiedTime clears the value of the "modified_time" field.
func (muo *MajorUpdateOne) ClearModifiedTime() *MajorUpdateOne {
	muo.mutation.ClearModifiedTime()
	return muo
}

// SetCollegeID sets the "college" edge to the College entity by ID.
func (muo *MajorUpdateOne) SetCollegeID(id uint8) *MajorUpdateOne {
	muo.mutation.SetCollegeID(id)
	return muo
}

// SetCollege sets the "college" edge to the College entity.
func (muo *MajorUpdateOne) SetCollege(c *College) *MajorUpdateOne {
	return muo.SetCollegeID(c.ID)
}

// AddClassIDs adds the "classes" edge to the Class entity by IDs.
func (muo *MajorUpdateOne) AddClassIDs(ids ...uint32) *MajorUpdateOne {
	muo.mutation.AddClassIDs(ids...)
	return muo
}

// AddClasses adds the "classes" edges to the Class entity.
func (muo *MajorUpdateOne) AddClasses(c ...*Class) *MajorUpdateOne {
	ids := make([]uint32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.AddClassIDs(ids...)
}

// Mutation returns the MajorMutation object of the builder.
func (muo *MajorUpdateOne) Mutation() *MajorMutation {
	return muo.mutation
}

// ClearCollege clears the "college" edge to the College entity.
func (muo *MajorUpdateOne) ClearCollege() *MajorUpdateOne {
	muo.mutation.ClearCollege()
	return muo
}

// ClearClasses clears all "classes" edges to the Class entity.
func (muo *MajorUpdateOne) ClearClasses() *MajorUpdateOne {
	muo.mutation.ClearClasses()
	return muo
}

// RemoveClassIDs removes the "classes" edge to Class entities by IDs.
func (muo *MajorUpdateOne) RemoveClassIDs(ids ...uint32) *MajorUpdateOne {
	muo.mutation.RemoveClassIDs(ids...)
	return muo
}

// RemoveClasses removes "classes" edges to Class entities.
func (muo *MajorUpdateOne) RemoveClasses(c ...*Class) *MajorUpdateOne {
	ids := make([]uint32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.RemoveClassIDs(ids...)
}

// Where appends a list predicates to the MajorUpdate builder.
func (muo *MajorUpdateOne) Where(ps ...predicate.Major) *MajorUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MajorUpdateOne) Select(field string, fields ...string) *MajorUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Major entity.
func (muo *MajorUpdateOne) Save(ctx context.Context) (*Major, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MajorUpdateOne) SaveX(ctx context.Context) *Major {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MajorUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MajorUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MajorUpdateOne) check() error {
	if _, ok := muo.mutation.CollegeID(); muo.mutation.CollegeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Major.college"`)
	}
	return nil
}

func (muo *MajorUpdateOne) sqlSave(ctx context.Context) (_node *Major, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(major.Table, major.Columns, sqlgraph.NewFieldSpec(major.FieldID, field.TypeUint16))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Major.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, major.FieldID)
		for _, f := range fields {
			if !major.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != major.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(major.FieldName, field.TypeString, value)
	}
	if value, ok := muo.mutation.IsDisabled(); ok {
		_spec.SetField(major.FieldIsDisabled, field.TypeBool, value)
	}
	if value, ok := muo.mutation.CreatedTime(); ok {
		_spec.SetField(major.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := muo.mutation.DeletedTime(); ok {
		_spec.SetField(major.FieldDeletedTime, field.TypeTime, value)
	}
	if muo.mutation.DeletedTimeCleared() {
		_spec.ClearField(major.FieldDeletedTime, field.TypeTime)
	}
	if value, ok := muo.mutation.ModifiedTime(); ok {
		_spec.SetField(major.FieldModifiedTime, field.TypeTime, value)
	}
	if muo.mutation.ModifiedTimeCleared() {
		_spec.ClearField(major.FieldModifiedTime, field.TypeTime)
	}
	if muo.mutation.CollegeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   major.CollegeTable,
			Columns: []string{major.CollegeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(college.FieldID, field.TypeUint8),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.CollegeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   major.CollegeTable,
			Columns: []string{major.CollegeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(college.FieldID, field.TypeUint8),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   major.ClassesTable,
			Columns: []string{major.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedClassesIDs(); len(nodes) > 0 && !muo.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   major.ClassesTable,
			Columns: []string{major.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   major.ClassesTable,
			Columns: []string{major.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Major{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{major.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
