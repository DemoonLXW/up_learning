// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DemoonLXW/up_learning/database/ent/predicate"
	"github.com/DemoonLXW/up_learning/database/ent/project"
	"github.com/DemoonLXW/up_learning/database/ent/reviewproject"
	"github.com/DemoonLXW/up_learning/database/ent/reviewprojectdetail"
	"github.com/DemoonLXW/up_learning/database/ent/user"
)

// ReviewProjectUpdate is the builder for updating ReviewProject entities.
type ReviewProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ReviewProjectMutation
}

// Where appends a list predicates to the ReviewProjectUpdate builder.
func (rpu *ReviewProjectUpdate) Where(ps ...predicate.ReviewProject) *ReviewProjectUpdate {
	rpu.mutation.Where(ps...)
	return rpu
}

// SetProjectID sets the "project_id" field.
func (rpu *ReviewProjectUpdate) SetProjectID(u uint32) *ReviewProjectUpdate {
	rpu.mutation.SetProjectID(u)
	return rpu
}

// SetWorkflowID sets the "workflow_id" field.
func (rpu *ReviewProjectUpdate) SetWorkflowID(s string) *ReviewProjectUpdate {
	rpu.mutation.SetWorkflowID(s)
	return rpu
}

// SetRunID sets the "run_id" field.
func (rpu *ReviewProjectUpdate) SetRunID(s string) *ReviewProjectUpdate {
	rpu.mutation.SetRunID(s)
	return rpu
}

// SetApplicantID sets the "applicant_id" field.
func (rpu *ReviewProjectUpdate) SetApplicantID(u uint32) *ReviewProjectUpdate {
	rpu.mutation.SetApplicantID(u)
	return rpu
}

// SetStatus sets the "status" field.
func (rpu *ReviewProjectUpdate) SetStatus(u uint8) *ReviewProjectUpdate {
	rpu.mutation.ResetStatus()
	rpu.mutation.SetStatus(u)
	return rpu
}

// AddStatus adds u to the "status" field.
func (rpu *ReviewProjectUpdate) AddStatus(u int8) *ReviewProjectUpdate {
	rpu.mutation.AddStatus(u)
	return rpu
}

// SetCreatedTime sets the "created_time" field.
func (rpu *ReviewProjectUpdate) SetCreatedTime(t time.Time) *ReviewProjectUpdate {
	rpu.mutation.SetCreatedTime(t)
	return rpu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (rpu *ReviewProjectUpdate) SetNillableCreatedTime(t *time.Time) *ReviewProjectUpdate {
	if t != nil {
		rpu.SetCreatedTime(*t)
	}
	return rpu
}

// SetDeletedTime sets the "deleted_time" field.
func (rpu *ReviewProjectUpdate) SetDeletedTime(t time.Time) *ReviewProjectUpdate {
	rpu.mutation.SetDeletedTime(t)
	return rpu
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (rpu *ReviewProjectUpdate) SetNillableDeletedTime(t *time.Time) *ReviewProjectUpdate {
	if t != nil {
		rpu.SetDeletedTime(*t)
	}
	return rpu
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (rpu *ReviewProjectUpdate) ClearDeletedTime() *ReviewProjectUpdate {
	rpu.mutation.ClearDeletedTime()
	return rpu
}

// SetModifiedTime sets the "modified_time" field.
func (rpu *ReviewProjectUpdate) SetModifiedTime(t time.Time) *ReviewProjectUpdate {
	rpu.mutation.SetModifiedTime(t)
	return rpu
}

// SetNillableModifiedTime sets the "modified_time" field if the given value is not nil.
func (rpu *ReviewProjectUpdate) SetNillableModifiedTime(t *time.Time) *ReviewProjectUpdate {
	if t != nil {
		rpu.SetModifiedTime(*t)
	}
	return rpu
}

// ClearModifiedTime clears the value of the "modified_time" field.
func (rpu *ReviewProjectUpdate) ClearModifiedTime() *ReviewProjectUpdate {
	rpu.mutation.ClearModifiedTime()
	return rpu
}

// SetApplicant sets the "applicant" edge to the User entity.
func (rpu *ReviewProjectUpdate) SetApplicant(u *User) *ReviewProjectUpdate {
	return rpu.SetApplicantID(u.ID)
}

// SetProject sets the "project" edge to the Project entity.
func (rpu *ReviewProjectUpdate) SetProject(p *Project) *ReviewProjectUpdate {
	return rpu.SetProjectID(p.ID)
}

// AddReviewProjectDetailIDs adds the "review_project_detail" edge to the ReviewProjectDetail entity by IDs.
func (rpu *ReviewProjectUpdate) AddReviewProjectDetailIDs(ids ...int) *ReviewProjectUpdate {
	rpu.mutation.AddReviewProjectDetailIDs(ids...)
	return rpu
}

// AddReviewProjectDetail adds the "review_project_detail" edges to the ReviewProjectDetail entity.
func (rpu *ReviewProjectUpdate) AddReviewProjectDetail(r ...*ReviewProjectDetail) *ReviewProjectUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpu.AddReviewProjectDetailIDs(ids...)
}

// Mutation returns the ReviewProjectMutation object of the builder.
func (rpu *ReviewProjectUpdate) Mutation() *ReviewProjectMutation {
	return rpu.mutation
}

// ClearApplicant clears the "applicant" edge to the User entity.
func (rpu *ReviewProjectUpdate) ClearApplicant() *ReviewProjectUpdate {
	rpu.mutation.ClearApplicant()
	return rpu
}

// ClearProject clears the "project" edge to the Project entity.
func (rpu *ReviewProjectUpdate) ClearProject() *ReviewProjectUpdate {
	rpu.mutation.ClearProject()
	return rpu
}

// ClearReviewProjectDetail clears all "review_project_detail" edges to the ReviewProjectDetail entity.
func (rpu *ReviewProjectUpdate) ClearReviewProjectDetail() *ReviewProjectUpdate {
	rpu.mutation.ClearReviewProjectDetail()
	return rpu
}

// RemoveReviewProjectDetailIDs removes the "review_project_detail" edge to ReviewProjectDetail entities by IDs.
func (rpu *ReviewProjectUpdate) RemoveReviewProjectDetailIDs(ids ...int) *ReviewProjectUpdate {
	rpu.mutation.RemoveReviewProjectDetailIDs(ids...)
	return rpu
}

// RemoveReviewProjectDetail removes "review_project_detail" edges to ReviewProjectDetail entities.
func (rpu *ReviewProjectUpdate) RemoveReviewProjectDetail(r ...*ReviewProjectDetail) *ReviewProjectUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpu.RemoveReviewProjectDetailIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpu *ReviewProjectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ReviewProjectMutation](ctx, rpu.sqlSave, rpu.mutation, rpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpu *ReviewProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := rpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpu *ReviewProjectUpdate) Exec(ctx context.Context) error {
	_, err := rpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpu *ReviewProjectUpdate) ExecX(ctx context.Context) {
	if err := rpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpu *ReviewProjectUpdate) check() error {
	if _, ok := rpu.mutation.ApplicantID(); rpu.mutation.ApplicantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ReviewProject.applicant"`)
	}
	if _, ok := rpu.mutation.ProjectID(); rpu.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ReviewProject.project"`)
	}
	return nil
}

func (rpu *ReviewProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(reviewproject.Table, reviewproject.Columns, sqlgraph.NewFieldSpec(reviewproject.FieldID, field.TypeUint32))
	if ps := rpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpu.mutation.WorkflowID(); ok {
		_spec.SetField(reviewproject.FieldWorkflowID, field.TypeString, value)
	}
	if value, ok := rpu.mutation.RunID(); ok {
		_spec.SetField(reviewproject.FieldRunID, field.TypeString, value)
	}
	if value, ok := rpu.mutation.Status(); ok {
		_spec.SetField(reviewproject.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := rpu.mutation.AddedStatus(); ok {
		_spec.AddField(reviewproject.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := rpu.mutation.CreatedTime(); ok {
		_spec.SetField(reviewproject.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := rpu.mutation.DeletedTime(); ok {
		_spec.SetField(reviewproject.FieldDeletedTime, field.TypeTime, value)
	}
	if rpu.mutation.DeletedTimeCleared() {
		_spec.ClearField(reviewproject.FieldDeletedTime, field.TypeTime)
	}
	if value, ok := rpu.mutation.ModifiedTime(); ok {
		_spec.SetField(reviewproject.FieldModifiedTime, field.TypeTime, value)
	}
	if rpu.mutation.ModifiedTimeCleared() {
		_spec.ClearField(reviewproject.FieldModifiedTime, field.TypeTime)
	}
	if rpu.mutation.ApplicantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reviewproject.ApplicantTable,
			Columns: []string{reviewproject.ApplicantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.ApplicantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reviewproject.ApplicantTable,
			Columns: []string{reviewproject.ApplicantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reviewproject.ProjectTable,
			Columns: []string{reviewproject.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reviewproject.ProjectTable,
			Columns: []string{reviewproject.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.ReviewProjectDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reviewproject.ReviewProjectDetailTable,
			Columns: []string{reviewproject.ReviewProjectDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reviewprojectdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.RemovedReviewProjectDetailIDs(); len(nodes) > 0 && !rpu.mutation.ReviewProjectDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reviewproject.ReviewProjectDetailTable,
			Columns: []string{reviewproject.ReviewProjectDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reviewprojectdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.ReviewProjectDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reviewproject.ReviewProjectDetailTable,
			Columns: []string{reviewproject.ReviewProjectDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reviewprojectdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reviewproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rpu.mutation.done = true
	return n, nil
}

// ReviewProjectUpdateOne is the builder for updating a single ReviewProject entity.
type ReviewProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReviewProjectMutation
}

// SetProjectID sets the "project_id" field.
func (rpuo *ReviewProjectUpdateOne) SetProjectID(u uint32) *ReviewProjectUpdateOne {
	rpuo.mutation.SetProjectID(u)
	return rpuo
}

// SetWorkflowID sets the "workflow_id" field.
func (rpuo *ReviewProjectUpdateOne) SetWorkflowID(s string) *ReviewProjectUpdateOne {
	rpuo.mutation.SetWorkflowID(s)
	return rpuo
}

// SetRunID sets the "run_id" field.
func (rpuo *ReviewProjectUpdateOne) SetRunID(s string) *ReviewProjectUpdateOne {
	rpuo.mutation.SetRunID(s)
	return rpuo
}

// SetApplicantID sets the "applicant_id" field.
func (rpuo *ReviewProjectUpdateOne) SetApplicantID(u uint32) *ReviewProjectUpdateOne {
	rpuo.mutation.SetApplicantID(u)
	return rpuo
}

// SetStatus sets the "status" field.
func (rpuo *ReviewProjectUpdateOne) SetStatus(u uint8) *ReviewProjectUpdateOne {
	rpuo.mutation.ResetStatus()
	rpuo.mutation.SetStatus(u)
	return rpuo
}

// AddStatus adds u to the "status" field.
func (rpuo *ReviewProjectUpdateOne) AddStatus(u int8) *ReviewProjectUpdateOne {
	rpuo.mutation.AddStatus(u)
	return rpuo
}

// SetCreatedTime sets the "created_time" field.
func (rpuo *ReviewProjectUpdateOne) SetCreatedTime(t time.Time) *ReviewProjectUpdateOne {
	rpuo.mutation.SetCreatedTime(t)
	return rpuo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (rpuo *ReviewProjectUpdateOne) SetNillableCreatedTime(t *time.Time) *ReviewProjectUpdateOne {
	if t != nil {
		rpuo.SetCreatedTime(*t)
	}
	return rpuo
}

// SetDeletedTime sets the "deleted_time" field.
func (rpuo *ReviewProjectUpdateOne) SetDeletedTime(t time.Time) *ReviewProjectUpdateOne {
	rpuo.mutation.SetDeletedTime(t)
	return rpuo
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (rpuo *ReviewProjectUpdateOne) SetNillableDeletedTime(t *time.Time) *ReviewProjectUpdateOne {
	if t != nil {
		rpuo.SetDeletedTime(*t)
	}
	return rpuo
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (rpuo *ReviewProjectUpdateOne) ClearDeletedTime() *ReviewProjectUpdateOne {
	rpuo.mutation.ClearDeletedTime()
	return rpuo
}

// SetModifiedTime sets the "modified_time" field.
func (rpuo *ReviewProjectUpdateOne) SetModifiedTime(t time.Time) *ReviewProjectUpdateOne {
	rpuo.mutation.SetModifiedTime(t)
	return rpuo
}

// SetNillableModifiedTime sets the "modified_time" field if the given value is not nil.
func (rpuo *ReviewProjectUpdateOne) SetNillableModifiedTime(t *time.Time) *ReviewProjectUpdateOne {
	if t != nil {
		rpuo.SetModifiedTime(*t)
	}
	return rpuo
}

// ClearModifiedTime clears the value of the "modified_time" field.
func (rpuo *ReviewProjectUpdateOne) ClearModifiedTime() *ReviewProjectUpdateOne {
	rpuo.mutation.ClearModifiedTime()
	return rpuo
}

// SetApplicant sets the "applicant" edge to the User entity.
func (rpuo *ReviewProjectUpdateOne) SetApplicant(u *User) *ReviewProjectUpdateOne {
	return rpuo.SetApplicantID(u.ID)
}

// SetProject sets the "project" edge to the Project entity.
func (rpuo *ReviewProjectUpdateOne) SetProject(p *Project) *ReviewProjectUpdateOne {
	return rpuo.SetProjectID(p.ID)
}

// AddReviewProjectDetailIDs adds the "review_project_detail" edge to the ReviewProjectDetail entity by IDs.
func (rpuo *ReviewProjectUpdateOne) AddReviewProjectDetailIDs(ids ...int) *ReviewProjectUpdateOne {
	rpuo.mutation.AddReviewProjectDetailIDs(ids...)
	return rpuo
}

// AddReviewProjectDetail adds the "review_project_detail" edges to the ReviewProjectDetail entity.
func (rpuo *ReviewProjectUpdateOne) AddReviewProjectDetail(r ...*ReviewProjectDetail) *ReviewProjectUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpuo.AddReviewProjectDetailIDs(ids...)
}

// Mutation returns the ReviewProjectMutation object of the builder.
func (rpuo *ReviewProjectUpdateOne) Mutation() *ReviewProjectMutation {
	return rpuo.mutation
}

// ClearApplicant clears the "applicant" edge to the User entity.
func (rpuo *ReviewProjectUpdateOne) ClearApplicant() *ReviewProjectUpdateOne {
	rpuo.mutation.ClearApplicant()
	return rpuo
}

// ClearProject clears the "project" edge to the Project entity.
func (rpuo *ReviewProjectUpdateOne) ClearProject() *ReviewProjectUpdateOne {
	rpuo.mutation.ClearProject()
	return rpuo
}

// ClearReviewProjectDetail clears all "review_project_detail" edges to the ReviewProjectDetail entity.
func (rpuo *ReviewProjectUpdateOne) ClearReviewProjectDetail() *ReviewProjectUpdateOne {
	rpuo.mutation.ClearReviewProjectDetail()
	return rpuo
}

// RemoveReviewProjectDetailIDs removes the "review_project_detail" edge to ReviewProjectDetail entities by IDs.
func (rpuo *ReviewProjectUpdateOne) RemoveReviewProjectDetailIDs(ids ...int) *ReviewProjectUpdateOne {
	rpuo.mutation.RemoveReviewProjectDetailIDs(ids...)
	return rpuo
}

// RemoveReviewProjectDetail removes "review_project_detail" edges to ReviewProjectDetail entities.
func (rpuo *ReviewProjectUpdateOne) RemoveReviewProjectDetail(r ...*ReviewProjectDetail) *ReviewProjectUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpuo.RemoveReviewProjectDetailIDs(ids...)
}

// Where appends a list predicates to the ReviewProjectUpdate builder.
func (rpuo *ReviewProjectUpdateOne) Where(ps ...predicate.ReviewProject) *ReviewProjectUpdateOne {
	rpuo.mutation.Where(ps...)
	return rpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpuo *ReviewProjectUpdateOne) Select(field string, fields ...string) *ReviewProjectUpdateOne {
	rpuo.fields = append([]string{field}, fields...)
	return rpuo
}

// Save executes the query and returns the updated ReviewProject entity.
func (rpuo *ReviewProjectUpdateOne) Save(ctx context.Context) (*ReviewProject, error) {
	return withHooks[*ReviewProject, ReviewProjectMutation](ctx, rpuo.sqlSave, rpuo.mutation, rpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpuo *ReviewProjectUpdateOne) SaveX(ctx context.Context) *ReviewProject {
	node, err := rpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpuo *ReviewProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := rpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpuo *ReviewProjectUpdateOne) ExecX(ctx context.Context) {
	if err := rpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpuo *ReviewProjectUpdateOne) check() error {
	if _, ok := rpuo.mutation.ApplicantID(); rpuo.mutation.ApplicantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ReviewProject.applicant"`)
	}
	if _, ok := rpuo.mutation.ProjectID(); rpuo.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ReviewProject.project"`)
	}
	return nil
}

func (rpuo *ReviewProjectUpdateOne) sqlSave(ctx context.Context) (_node *ReviewProject, err error) {
	if err := rpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(reviewproject.Table, reviewproject.Columns, sqlgraph.NewFieldSpec(reviewproject.FieldID, field.TypeUint32))
	id, ok := rpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReviewProject.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reviewproject.FieldID)
		for _, f := range fields {
			if !reviewproject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reviewproject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpuo.mutation.WorkflowID(); ok {
		_spec.SetField(reviewproject.FieldWorkflowID, field.TypeString, value)
	}
	if value, ok := rpuo.mutation.RunID(); ok {
		_spec.SetField(reviewproject.FieldRunID, field.TypeString, value)
	}
	if value, ok := rpuo.mutation.Status(); ok {
		_spec.SetField(reviewproject.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := rpuo.mutation.AddedStatus(); ok {
		_spec.AddField(reviewproject.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := rpuo.mutation.CreatedTime(); ok {
		_spec.SetField(reviewproject.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := rpuo.mutation.DeletedTime(); ok {
		_spec.SetField(reviewproject.FieldDeletedTime, field.TypeTime, value)
	}
	if rpuo.mutation.DeletedTimeCleared() {
		_spec.ClearField(reviewproject.FieldDeletedTime, field.TypeTime)
	}
	if value, ok := rpuo.mutation.ModifiedTime(); ok {
		_spec.SetField(reviewproject.FieldModifiedTime, field.TypeTime, value)
	}
	if rpuo.mutation.ModifiedTimeCleared() {
		_spec.ClearField(reviewproject.FieldModifiedTime, field.TypeTime)
	}
	if rpuo.mutation.ApplicantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reviewproject.ApplicantTable,
			Columns: []string{reviewproject.ApplicantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.ApplicantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reviewproject.ApplicantTable,
			Columns: []string{reviewproject.ApplicantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reviewproject.ProjectTable,
			Columns: []string{reviewproject.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reviewproject.ProjectTable,
			Columns: []string{reviewproject.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.ReviewProjectDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reviewproject.ReviewProjectDetailTable,
			Columns: []string{reviewproject.ReviewProjectDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reviewprojectdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.RemovedReviewProjectDetailIDs(); len(nodes) > 0 && !rpuo.mutation.ReviewProjectDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reviewproject.ReviewProjectDetailTable,
			Columns: []string{reviewproject.ReviewProjectDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reviewprojectdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.ReviewProjectDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reviewproject.ReviewProjectDetailTable,
			Columns: []string{reviewproject.ReviewProjectDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reviewprojectdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReviewProject{config: rpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reviewproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rpuo.mutation.done = true
	return _node, nil
}
