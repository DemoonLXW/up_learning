// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injection

import (
	"github.com/DemoonLXW/up_learning/application"
	"github.com/DemoonLXW/up_learning/config"
	"github.com/DemoonLXW/up_learning/controller"
	"github.com/DemoonLXW/up_learning/database"
	"github.com/DemoonLXW/up_learning/database/ent"
	"github.com/DemoonLXW/up_learning/service"
	"github.com/gin-gonic/gin"
	"github.com/redis/go-redis/v9"
)

// Injectors from injection.go:

func ProvideDataBase() (*ent.Client, error) {
	dataBaseConfig, err := database.ProvideDatabaseConfig()
	if err != nil {
		return nil, err
	}
	client, err := database.ProvideDB(dataBaseConfig)
	if err != nil {
		return nil, err
	}
	return client, nil
}

func ProvideRedis() (*redis.Client, error) {
	dataBaseConfig, err := database.ProvideDatabaseConfig()
	if err != nil {
		return nil, err
	}
	client, err := database.ProvideRedis(dataBaseConfig)
	if err != nil {
		return nil, err
	}
	return client, nil
}

func ProvideService() (*service.Services, error) {
	dataBaseConfig, err := database.ProvideDatabaseConfig()
	if err != nil {
		return nil, err
	}
	client, err := database.ProvideDB(dataBaseConfig)
	if err != nil {
		return nil, err
	}
	managementService := &service.ManagementService{
		DB: client,
	}
	redisClient, err := database.ProvideRedis(dataBaseConfig)
	if err != nil {
		return nil, err
	}
	authService := &service.AuthService{
		DB:    client,
		Redis: redisClient,
	}
	commonService := &service.CommonService{
		DB: client,
	}
	applicantService := &service.ApplicantService{
		DB: client,
	}
	applicationConfig, err := config.ProvideApplicationConfig()
	if err != nil {
		return nil, err
	}
	flowableConfig, err := config.ProvideFlowableConfig(applicationConfig)
	if err != nil {
		return nil, err
	}
	workflowService := &service.WorkflowService{
		FlowableConfig: flowableConfig,
	}
	applicantFacade := &service.ApplicantFacade{
		Common:   commonService,
		Workflow: workflowService,
		DB:       client,
	}
	projectReviewerFacade := &service.ProjectReviewerFacade{
		Workflow:  workflowService,
		Applicant: applicantService,
		DB:        client,
	}
	services := &service.Services{
		Management:        managementService,
		Auth:              authService,
		Common:            commonService,
		Applicant:         applicantService,
		ApplicantFa:       applicantFacade,
		Workflow:          workflowService,
		ProjectReviewerFa: projectReviewerFacade,
	}
	return services, nil
}

func ProvideController() (*controller.Controllers, error) {
	dataBaseConfig, err := database.ProvideDatabaseConfig()
	if err != nil {
		return nil, err
	}
	client, err := database.ProvideDB(dataBaseConfig)
	if err != nil {
		return nil, err
	}
	managementService := &service.ManagementService{
		DB: client,
	}
	redisClient, err := database.ProvideRedis(dataBaseConfig)
	if err != nil {
		return nil, err
	}
	authService := &service.AuthService{
		DB:    client,
		Redis: redisClient,
	}
	commonService := &service.CommonService{
		DB: client,
	}
	applicantService := &service.ApplicantService{
		DB: client,
	}
	applicationConfig, err := config.ProvideApplicationConfig()
	if err != nil {
		return nil, err
	}
	flowableConfig, err := config.ProvideFlowableConfig(applicationConfig)
	if err != nil {
		return nil, err
	}
	workflowService := &service.WorkflowService{
		FlowableConfig: flowableConfig,
	}
	applicantFacade := &service.ApplicantFacade{
		Common:   commonService,
		Workflow: workflowService,
		DB:       client,
	}
	projectReviewerFacade := &service.ProjectReviewerFacade{
		Workflow:  workflowService,
		Applicant: applicantService,
		DB:        client,
	}
	services := &service.Services{
		Management:        managementService,
		Auth:              authService,
		Common:            commonService,
		Applicant:         applicantService,
		ApplicantFa:       applicantFacade,
		Workflow:          workflowService,
		ProjectReviewerFa: projectReviewerFacade,
	}
	authController := &controller.AuthController{
		Services: services,
	}
	managementController := &controller.ManagementController{
		Services: services,
	}
	commonController := &controller.CommonController{
		Common: commonService,
	}
	applicantController := &controller.ApplicantController{
		ApplicantFa: applicantFacade,
		Applicant:   applicantService,
		Common:      commonService,
	}
	projectReviewerController := &controller.ProjectReviewerController{
		ProjectReviewerFa: projectReviewerFacade,
		Applicant:         applicantService,
	}
	controllers := &controller.Controllers{
		Auth:            authController,
		Management:      managementController,
		Common:          commonController,
		Applicant:       applicantController,
		ProjectReviewer: projectReviewerController,
	}
	return controllers, nil
}

func ProvideApplication() (*gin.Engine, error) {
	dataBaseConfig, err := database.ProvideDatabaseConfig()
	if err != nil {
		return nil, err
	}
	client, err := database.ProvideDB(dataBaseConfig)
	if err != nil {
		return nil, err
	}
	managementService := &service.ManagementService{
		DB: client,
	}
	redisClient, err := database.ProvideRedis(dataBaseConfig)
	if err != nil {
		return nil, err
	}
	authService := &service.AuthService{
		DB:    client,
		Redis: redisClient,
	}
	commonService := &service.CommonService{
		DB: client,
	}
	applicantService := &service.ApplicantService{
		DB: client,
	}
	applicationConfig, err := config.ProvideApplicationConfig()
	if err != nil {
		return nil, err
	}
	flowableConfig, err := config.ProvideFlowableConfig(applicationConfig)
	if err != nil {
		return nil, err
	}
	workflowService := &service.WorkflowService{
		FlowableConfig: flowableConfig,
	}
	applicantFacade := &service.ApplicantFacade{
		Common:   commonService,
		Workflow: workflowService,
		DB:       client,
	}
	projectReviewerFacade := &service.ProjectReviewerFacade{
		Workflow:  workflowService,
		Applicant: applicantService,
		DB:        client,
	}
	services := &service.Services{
		Management:        managementService,
		Auth:              authService,
		Common:            commonService,
		Applicant:         applicantService,
		ApplicantFa:       applicantFacade,
		Workflow:          workflowService,
		ProjectReviewerFa: projectReviewerFacade,
	}
	authController := &controller.AuthController{
		Services: services,
	}
	managementController := &controller.ManagementController{
		Services: services,
	}
	commonController := &controller.CommonController{
		Common: commonService,
	}
	applicantController := &controller.ApplicantController{
		ApplicantFa: applicantFacade,
		Applicant:   applicantService,
		Common:      commonService,
	}
	projectReviewerController := &controller.ProjectReviewerController{
		ProjectReviewerFa: projectReviewerFacade,
		Applicant:         applicantService,
	}
	controllers := &controller.Controllers{
		Auth:            authController,
		Management:      managementController,
		Common:          commonController,
		Applicant:       applicantController,
		ProjectReviewer: projectReviewerController,
	}
	engine, err := application.SetupApplication(controllers)
	if err != nil {
		return nil, err
	}
	return engine, nil
}
